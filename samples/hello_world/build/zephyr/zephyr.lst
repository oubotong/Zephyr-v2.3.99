
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000b80 	.word	0x20000b80
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00000fd1 	.word	0x00000fd1
   8:	00003209 	.word	0x00003209
   c:	00001001 	.word	0x00001001
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  10:	00001001 	.word	0x00001001
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  14:	00001001 	.word	0x00001001
  18:	00001001 	.word	0x00001001
	...
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  2c:	00000e29 	.word	0x00000e29
	errno = ENFILE;
  30:	00001001 	.word	0x00001001
	return -1;
  34:	00000000 	.word	0x00000000
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  38:	00000de1 	.word	0x00000de1
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  3c:	000031e3 	.word	0x000031e3

00000040 <_irq_vector_table>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
  40:	00000f91 00000f91 00000f91 00000f91     ................
  50:	00000f91 00000f91 00000f91 00000f91     ................
		fdtable[fd].vtable = NULL;
  60:	00000f91 00000f91 00000f91 00000f91     ................
  70:	00000f91 00000f91 00000f91 00000f91     ................
  80:	00000f91 00000f91 00000f91 00000f91     ................
  90:	00000f91 00000f91 00000f91 00000f91     ................
  a0:	00000f91 00000f91 00000f91 00000f91     ................
  b0:	00000f91 00000f91 00000f91 00000f91     ................
  c0:	00000f91 00000f91 00000f91 00000f91     ................
  d0:	00000f91 00000f91 00000f91 00000f91     ................
  e0:	00000f91 00000f91 00000f91 00000f91     ................
  f0:	00000f91 00000f91 00000f91 00000f91     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1b2>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1b2>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1b6>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1b6>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_IDLE_STACK_SIZE+0x98>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_UART_MUX_RX_STACK_SIZE+0x80>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_UART_MUX_RX_STACK_SIZE+0x10>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e6>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_UART_MUX_RX_STACK_SIZE+0x38>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_UART_MUX_RX_STACK_SIZE+0x1dc>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_UART_MUX_RX_STACK_SIZE+0x5a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_UART_MUX_RX_STACK_SIZE+0x1ac>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xf6>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_UART_MUX_RX_STACK_SIZE+0x6c>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1e2>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1d8>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1d8>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_UART_MUX_RX_STACK_SIZE+0xee>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1d0>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1d0>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_IDLE_STACK_SIZE+0xac>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_UART_MUX_RX_STACK_SIZE+0x14c>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1d4>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_UART_MUX_RX_STACK_SIZE+0x1d4>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_UART_MUX_RX_STACK_SIZE+0x178>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_UART_MUX_RX_STACK_SIZE+0x1cc>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_UART_MUX_RX_STACK_SIZE+0x1cc>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_UART_MUX_RX_STACK_SIZE+0x1be>
     38c:	d015      	beq.n	3ba <CONFIG_UART_MUX_RX_STACK_SIZE+0x1ba>
     38e:	b375      	cbz	r5, 3ee <CONFIG_UART_MUX_RX_STACK_SIZE+0x1ee>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_UART_MUX_RX_STACK_SIZE+0x18e>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_UART_MUX_RX_STACK_SIZE+0x18e>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_UART_MUX_RX_STACK_SIZE+0x178>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_UART_MUX_RX_STACK_SIZE+0xee>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_UART_MUX_RX_STACK_SIZE+0x14c>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <main>:
#include <zephyr.h>
#include <sys/printk.h>

void main(void)
{
	printk("Hello World! %s\n", CONFIG_BOARD);
     3f8:	4901      	ldr	r1, [pc, #4]	; (400 <CONFIG_FLASH_SIZE>)
     3fa:	4802      	ldr	r0, [pc, #8]	; (404 <CONFIG_FLASH_SIZE+0x4>)
     3fc:	f002 bcae 	b.w	2d5c <printk>
     400:	00003abc 	.word	0x00003abc
     404:	00003ad0 	.word	0x00003ad0

00000408 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
     408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     40c:	b087      	sub	sp, #28
     40e:	460f      	mov	r7, r1
     410:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
     412:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
     414:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
     418:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
     41c:	4c1f      	ldr	r4, [pc, #124]	; (49c <print_digits+0x94>)
{
     41e:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     420:	2514      	movs	r5, #20
{
     422:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
     424:	4698      	mov	r8, r3
     426:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     42a:	ea50 0301 	orrs.w	r3, r0, r1
     42e:	d119      	bne.n	464 <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
     430:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     432:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
     434:	bf14      	ite	ne
     436:	3501      	addne	r5, #1
		buf[i] = '0';
     438:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     43a:	442c      	add	r4, r5
		buf[i] = '0';
     43c:	bf08      	it	eq
     43e:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     442:	2c15      	cmp	r4, #21
     444:	d01b      	beq.n	47e <print_digits+0x76>
     446:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
     448:	2c00      	cmp	r4, #0
     44a:	dc1a      	bgt.n	482 <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
     44c:	f81d 0005 	ldrb.w	r0, [sp, r5]
     450:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
     452:	3501      	adds	r5, #1
		out(buf[i], ctx);
     454:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
     456:	2d15      	cmp	r5, #21
     458:	d1f8      	bne.n	44c <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
     45a:	2c00      	cmp	r4, #0
     45c:	dc19      	bgt.n	492 <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
     45e:	b007      	add	sp, #28
     460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
     464:	4642      	mov	r2, r8
     466:	464b      	mov	r3, r9
     468:	f7ff fe4a 	bl	100 <__aeabi_uldivmod>
     46c:	5ca2      	ldrb	r2, [r4, r2]
     46e:	f80d 2005 	strb.w	r2, [sp, r5]
     472:	4684      	mov	ip, r0
     474:	460b      	mov	r3, r1
		num /= base;
     476:	4660      	mov	r0, ip
     478:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     47a:	3d01      	subs	r5, #1
     47c:	e7d5      	b.n	42a <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     47e:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
     480:	e7e4      	b.n	44c <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
     482:	f1bb 0f00 	cmp.w	fp, #0
     486:	d0e1      	beq.n	44c <print_digits+0x44>
		out(pad_char, ctx);
     488:	4639      	mov	r1, r7
     48a:	4650      	mov	r0, sl
     48c:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
     48e:	3c01      	subs	r4, #1
     490:	e7da      	b.n	448 <print_digits+0x40>
		out(pad_char, ctx);
     492:	4639      	mov	r1, r7
     494:	4650      	mov	r0, sl
     496:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
     498:	3c01      	subs	r4, #1
     49a:	e7de      	b.n	45a <print_digits+0x52>
     49c:	00003ae1 	.word	0x00003ae1

000004a0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     4a0:	680b      	ldr	r3, [r1, #0]
     4a2:	3301      	adds	r3, #1
     4a4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     4a6:	4b01      	ldr	r3, [pc, #4]	; (4ac <char_out+0xc>)
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	4718      	bx	r3
     4ac:	20000000 	.word	0x20000000

000004b0 <__printk_hook_install>:
	_char_out = fn;
     4b0:	4b01      	ldr	r3, [pc, #4]	; (4b8 <__printk_hook_install+0x8>)
     4b2:	6018      	str	r0, [r3, #0]
}
     4b4:	4770      	bx	lr
     4b6:	bf00      	nop
     4b8:	20000000 	.word	0x20000000

000004bc <z_vprintk>:
{
     4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     4c0:	2600      	movs	r6, #0
{
     4c2:	b087      	sub	sp, #28
     4c4:	4605      	mov	r5, r0
     4c6:	468b      	mov	fp, r1
     4c8:	461c      	mov	r4, r3
	while (*fmt) {
     4ca:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
     4ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     4d2:	4637      	mov	r7, r6
			might_format = 0;
     4d4:	2300      	movs	r3, #0
					break;
     4d6:	e007      	b.n	4e8 <z_vprintk+0x2c>
		if (!might_format) {
     4d8:	b96b      	cbnz	r3, 4f6 <z_vprintk+0x3a>
			if (*fmt != '%') {
     4da:	2825      	cmp	r0, #37	; 0x25
     4dc:	f000 80fc 	beq.w	6d8 <z_vprintk+0x21c>
				out((int)*fmt, ctx);
     4e0:	4659      	mov	r1, fp
     4e2:	9304      	str	r3, [sp, #16]
     4e4:	47a8      	blx	r5
     4e6:	9b04      	ldr	r3, [sp, #16]
	while (*fmt) {
     4e8:	f819 0f01 	ldrb.w	r0, [r9, #1]!
     4ec:	2800      	cmp	r0, #0
     4ee:	d1f3      	bne.n	4d8 <z_vprintk+0x1c>
}
     4f0:	b007      	add	sp, #28
     4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     4f6:	287a      	cmp	r0, #122	; 0x7a
     4f8:	d80a      	bhi.n	510 <z_vprintk+0x54>
     4fa:	2862      	cmp	r0, #98	; 0x62
     4fc:	d810      	bhi.n	520 <z_vprintk+0x64>
     4fe:	2830      	cmp	r0, #48	; 0x30
     500:	d052      	beq.n	5a8 <z_vprintk+0xec>
     502:	d845      	bhi.n	590 <z_vprintk+0xd4>
     504:	2825      	cmp	r0, #37	; 0x25
     506:	f000 80e5 	beq.w	6d4 <z_vprintk+0x218>
     50a:	282d      	cmp	r0, #45	; 0x2d
     50c:	f000 80ea 	beq.w	6e4 <z_vprintk+0x228>
					out((int)'%', ctx);
     510:	4659      	mov	r1, fp
     512:	2025      	movs	r0, #37	; 0x25
     514:	47a8      	blx	r5
					out((int)*fmt, ctx);
     516:	f899 0000 	ldrb.w	r0, [r9]
     51a:	4659      	mov	r1, fp
     51c:	47a8      	blx	r5
     51e:	e7d9      	b.n	4d4 <z_vprintk+0x18>
     520:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
     524:	2a17      	cmp	r2, #23
     526:	d8f3      	bhi.n	510 <z_vprintk+0x54>
     528:	a101      	add	r1, pc, #4	; (adr r1, 530 <z_vprintk+0x74>)
     52a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
     52e:	bf00      	nop
     530:	000006cd 	.word	0x000006cd
     534:	000005f1 	.word	0x000005f1
     538:	00000511 	.word	0x00000511
     53c:	00000511 	.word	0x00000511
     540:	00000511 	.word	0x00000511
     544:	000005d3 	.word	0x000005d3
     548:	000005f1 	.word	0x000005f1
     54c:	00000511 	.word	0x00000511
     550:	00000511 	.word	0x00000511
     554:	000005d3 	.word	0x000005d3
     558:	00000511 	.word	0x00000511
     55c:	00000511 	.word	0x00000511
     560:	00000511 	.word	0x00000511
     564:	00000655 	.word	0x00000655
     568:	00000511 	.word	0x00000511
     56c:	00000511 	.word	0x00000511
     570:	00000697 	.word	0x00000697
     574:	00000511 	.word	0x00000511
     578:	000005f1 	.word	0x000005f1
     57c:	00000511 	.word	0x00000511
     580:	00000511 	.word	0x00000511
     584:	00000599 	.word	0x00000599
     588:	00000511 	.word	0x00000511
     58c:	000005d3 	.word	0x000005d3
			switch (*fmt) {
     590:	2839      	cmp	r0, #57	; 0x39
     592:	d915      	bls.n	5c0 <z_vprintk+0x104>
     594:	2858      	cmp	r0, #88	; 0x58
     596:	d1bb      	bne.n	510 <z_vprintk+0x54>
				if (*fmt == 'p') {
     598:	f899 3000 	ldrb.w	r3, [r9]
     59c:	2b70      	cmp	r3, #112	; 0x70
     59e:	d163      	bne.n	668 <z_vprintk+0x1ac>
					x = va_arg(ap, unsigned int);
     5a0:	f854 2b04 	ldr.w	r2, [r4], #4
     5a4:	2300      	movs	r3, #0
     5a6:	e06a      	b.n	67e <z_vprintk+0x1c2>
				if (min_width < 0 && padding == PAD_NONE) {
     5a8:	f1b8 0f00 	cmp.w	r8, #0
     5ac:	da0b      	bge.n	5c6 <z_vprintk+0x10a>
     5ae:	2f00      	cmp	r7, #0
     5b0:	f000 809a 	beq.w	6e8 <z_vprintk+0x22c>
					min_width = *fmt - '0';
     5b4:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     5b8:	2f00      	cmp	r7, #0
     5ba:	bf08      	it	eq
     5bc:	2702      	moveq	r7, #2
     5be:	e793      	b.n	4e8 <z_vprintk+0x2c>
				if (min_width < 0) {
     5c0:	f1b8 0f00 	cmp.w	r8, #0
     5c4:	dbf6      	blt.n	5b4 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
     5c6:	220a      	movs	r2, #10
     5c8:	fb02 0808 	mla	r8, r2, r8, r0
     5cc:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
     5d0:	e7f2      	b.n	5b8 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
     5d2:	2868      	cmp	r0, #104	; 0x68
     5d4:	d103      	bne.n	5de <z_vprintk+0x122>
     5d6:	2e68      	cmp	r6, #104	; 0x68
     5d8:	d106      	bne.n	5e8 <z_vprintk+0x12c>
					length_mod = 'H';
     5da:	2648      	movs	r6, #72	; 0x48
     5dc:	e784      	b.n	4e8 <z_vprintk+0x2c>
				} else if (*fmt == 'l' && length_mod == 'l') {
     5de:	286c      	cmp	r0, #108	; 0x6c
     5e0:	d102      	bne.n	5e8 <z_vprintk+0x12c>
     5e2:	2e6c      	cmp	r6, #108	; 0x6c
     5e4:	f000 8082 	beq.w	6ec <z_vprintk+0x230>
				} else if (length_mod == 0) {
     5e8:	2e00      	cmp	r6, #0
     5ea:	d191      	bne.n	510 <z_vprintk+0x54>
     5ec:	4606      	mov	r6, r0
     5ee:	e77b      	b.n	4e8 <z_vprintk+0x2c>
				if (length_mod == 'z') {
     5f0:	2e7a      	cmp	r6, #122	; 0x7a
     5f2:	d103      	bne.n	5fc <z_vprintk+0x140>
					d = va_arg(ap, int);
     5f4:	f854 2b04 	ldr.w	r2, [r4], #4
     5f8:	17d3      	asrs	r3, r2, #31
     5fa:	e008      	b.n	60e <z_vprintk+0x152>
				} else if (length_mod == 'l') {
     5fc:	2e6c      	cmp	r6, #108	; 0x6c
     5fe:	d0f9      	beq.n	5f4 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
     600:	2e4c      	cmp	r6, #76	; 0x4c
     602:	d1f7      	bne.n	5f4 <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
     604:	3407      	adds	r4, #7
     606:	f024 0407 	bic.w	r4, r4, #7
					d = (printk_val_t) lld;
     60a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				if (*fmt != 'u' && negative(d)) {
     60e:	2875      	cmp	r0, #117	; 0x75
     610:	d00f      	beq.n	632 <z_vprintk+0x176>
     612:	2a00      	cmp	r2, #0
     614:	f173 0100 	sbcs.w	r1, r3, #0
     618:	da0b      	bge.n	632 <z_vprintk+0x176>
					out((int)'-', ctx);
     61a:	4659      	mov	r1, fp
     61c:	202d      	movs	r0, #45	; 0x2d
     61e:	e9cd 2304 	strd	r2, r3, [sp, #16]
     622:	47a8      	blx	r5
					d = -d;
     624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
     628:	4252      	negs	r2, r2
     62a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
     62e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
     632:	1ef9      	subs	r1, r7, #3
     634:	bf18      	it	ne
     636:	2101      	movne	r1, #1
     638:	2f01      	cmp	r7, #1
     63a:	bf0c      	ite	eq
     63c:	2030      	moveq	r0, #48	; 0x30
     63e:	2020      	movne	r0, #32
     640:	e9cd 0802 	strd	r0, r8, [sp, #8]
     644:	9101      	str	r1, [sp, #4]
     646:	210a      	movs	r1, #10
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
     648:	9100      	str	r1, [sp, #0]
     64a:	4628      	mov	r0, r5
     64c:	4659      	mov	r1, fp
     64e:	f7ff fedb 	bl	408 <print_digits>
     652:	e73f      	b.n	4d4 <z_vprintk+0x18>
				out('0', ctx);
     654:	4659      	mov	r1, fp
     656:	2030      	movs	r0, #48	; 0x30
     658:	47a8      	blx	r5
				out('x', ctx);
     65a:	4659      	mov	r1, fp
     65c:	2078      	movs	r0, #120	; 0x78
     65e:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
     660:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
     664:	2701      	movs	r7, #1
     666:	e797      	b.n	598 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     668:	2e6c      	cmp	r6, #108	; 0x6c
     66a:	d099      	beq.n	5a0 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
     66c:	2e4c      	cmp	r6, #76	; 0x4c
     66e:	d197      	bne.n	5a0 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
     670:	1de3      	adds	r3, r4, #7
     672:	f023 0307 	bic.w	r3, r3, #7
     676:	461c      	mov	r4, r3
     678:	685b      	ldr	r3, [r3, #4]
     67a:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
     67e:	1ef9      	subs	r1, r7, #3
     680:	bf18      	it	ne
     682:	2101      	movne	r1, #1
     684:	2f01      	cmp	r7, #1
     686:	bf0c      	ite	eq
     688:	2030      	moveq	r0, #48	; 0x30
     68a:	2020      	movne	r0, #32
     68c:	9101      	str	r1, [sp, #4]
     68e:	e9cd 0802 	strd	r0, r8, [sp, #8]
     692:	2110      	movs	r1, #16
     694:	e7d8      	b.n	648 <z_vprintk+0x18c>
				char *s = va_arg(ap, char *);
     696:	46a2      	mov	sl, r4
     698:	f85a 3b04 	ldr.w	r3, [sl], #4
				while (*s) {
     69c:	461c      	mov	r4, r3
     69e:	4621      	mov	r1, r4
     6a0:	f814 0b01 	ldrb.w	r0, [r4], #1
     6a4:	b940      	cbnz	r0, 6b8 <z_vprintk+0x1fc>
				if (padding == PAD_SPACE_AFTER) {
     6a6:	2f03      	cmp	r7, #3
     6a8:	d122      	bne.n	6f0 <z_vprintk+0x234>
					int remaining = min_width - (s - start);
     6aa:	1acc      	subs	r4, r1, r3
     6ac:	eba8 0404 	sub.w	r4, r8, r4
					while (remaining-- > 0) {
     6b0:	2c00      	cmp	r4, #0
     6b2:	dc06      	bgt.n	6c2 <z_vprintk+0x206>
				char *s = va_arg(ap, char *);
     6b4:	4654      	mov	r4, sl
     6b6:	e70d      	b.n	4d4 <z_vprintk+0x18>
					out((int)(*s++), ctx);
     6b8:	4659      	mov	r1, fp
     6ba:	9304      	str	r3, [sp, #16]
     6bc:	47a8      	blx	r5
     6be:	9b04      	ldr	r3, [sp, #16]
     6c0:	e7ed      	b.n	69e <z_vprintk+0x1e2>
						out(' ', ctx);
     6c2:	4659      	mov	r1, fp
     6c4:	2020      	movs	r0, #32
     6c6:	47a8      	blx	r5
     6c8:	3c01      	subs	r4, #1
     6ca:	e7f1      	b.n	6b0 <z_vprintk+0x1f4>
				out(c, ctx);
     6cc:	f854 0b04 	ldr.w	r0, [r4], #4
     6d0:	4659      	mov	r1, fp
     6d2:	e723      	b.n	51c <z_vprintk+0x60>
				out((int)'%', ctx);
     6d4:	4659      	mov	r1, fp
     6d6:	e721      	b.n	51c <z_vprintk+0x60>
				length_mod = 0;
     6d8:	461e      	mov	r6, r3
				padding = PAD_NONE;
     6da:	461f      	mov	r7, r3
				min_width = -1;
     6dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
     6e0:	2301      	movs	r3, #1
     6e2:	e701      	b.n	4e8 <z_vprintk+0x2c>
			switch (*fmt) {
     6e4:	2703      	movs	r7, #3
     6e6:	e6ff      	b.n	4e8 <z_vprintk+0x2c>
					padding = PAD_ZERO_BEFORE;
     6e8:	2701      	movs	r7, #1
     6ea:	e6fd      	b.n	4e8 <z_vprintk+0x2c>
					length_mod = 'L';
     6ec:	264c      	movs	r6, #76	; 0x4c
     6ee:	e6fb      	b.n	4e8 <z_vprintk+0x2c>
				char *s = va_arg(ap, char *);
     6f0:	4654      	mov	r4, sl
			might_format = 0;
     6f2:	4603      	mov	r3, r0
     6f4:	e6f8      	b.n	4e8 <z_vprintk+0x2c>
     6f6:	bf00      	nop

000006f8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     6f8:	b507      	push	{r0, r1, r2, lr}
     6fa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     6fc:	2100      	movs	r1, #0
{
     6fe:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     700:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
     702:	4803      	ldr	r0, [pc, #12]	; (710 <vprintk+0x18>)
     704:	a901      	add	r1, sp, #4
     706:	f7ff fed9 	bl	4bc <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     70a:	b003      	add	sp, #12
     70c:	f85d fb04 	ldr.w	pc, [sp], #4
     710:	000004a1 	.word	0x000004a1

00000714 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     718:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     71c:	f019 0808 	ands.w	r8, r9, #8
{
     720:	4604      	mov	r4, r0
     722:	4693      	mov	fp, r2
	if (processing) {
     724:	d00d      	beq.n	742 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     726:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     728:	bf0c      	ite	eq
     72a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     72e:	f049 0920 	orrne.w	r9, r9, #32
     732:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     736:	f38b 8811 	msr	BASEPRI, fp
     73a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     73e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     742:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     746:	2902      	cmp	r1, #2
     748:	d107      	bne.n	75a <process_event+0x46>
			evt = process_recheck(mgr);
     74a:	4620      	mov	r0, r4
     74c:	f002 fb13 	bl	2d76 <process_recheck>
		if (evt == EVT_NOP) {
     750:	2800      	cmp	r0, #0
     752:	d0f0      	beq.n	736 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     754:	2801      	cmp	r0, #1
     756:	8b23      	ldrh	r3, [r4, #24]
     758:	d150      	bne.n	7fc <process_event+0xe8>
			res = mgr->last_res;
     75a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     75c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     75e:	2f00      	cmp	r7, #0
     760:	da15      	bge.n	78e <process_event+0x7a>
		*clients = mgr->clients;
     762:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     764:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     768:	e9c4 8800 	strd	r8, r8, [r4]
     76c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     770:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     772:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     774:	8b21      	ldrh	r1, [r4, #24]
     776:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     77a:	45ca      	cmp	sl, r9
     77c:	d002      	beq.n	784 <process_event+0x70>
		if (do_monitors
     77e:	68a3      	ldr	r3, [r4, #8]
     780:	2b00      	cmp	r3, #0
     782:	d15c      	bne.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
		    || !sys_slist_is_empty(&clients)
     784:	b90d      	cbnz	r5, 78a <process_event+0x76>
		    || (transit != NULL)) {
     786:	2e00      	cmp	r6, #0
     788:	d074      	beq.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     78a:	2300      	movs	r3, #0
     78c:	e058      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     78e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     792:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     794:	2a01      	cmp	r2, #1
     796:	d820      	bhi.n	7da <process_event+0xc6>
		*clients = mgr->clients;
     798:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     79c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     79e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     7a0:	b289      	uxth	r1, r1
	list->tail = NULL;
     7a2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     7a6:	d10c      	bne.n	7c2 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     7a8:	2d00      	cmp	r5, #0
     7aa:	462b      	mov	r3, r5
     7ac:	bf38      	it	cc
     7ae:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     7b0:	b12b      	cbz	r3, 7be <process_event+0xaa>
				mgr->refs += 1U;
     7b2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	3201      	adds	r2, #1
     7b8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     7ba:	2b00      	cmp	r3, #0
     7bc:	d1f8      	bne.n	7b0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7be:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     7c2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     7c4:	4620      	mov	r0, r4
     7c6:	f002 fad6 	bl	2d76 <process_recheck>
     7ca:	4606      	mov	r6, r0
     7cc:	2800      	cmp	r0, #0
     7ce:	d0d1      	beq.n	774 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     7d0:	8b23      	ldrh	r3, [r4, #24]
     7d2:	f043 0320 	orr.w	r3, r3, #32
     7d6:	8323      	strh	r3, [r4, #24]
     7d8:	e7cb      	b.n	772 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     7da:	2b04      	cmp	r3, #4
     7dc:	d10c      	bne.n	7f8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7de:	f021 0107 	bic.w	r1, r1, #7
     7e2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     7e4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     7e6:	4620      	mov	r0, r4
     7e8:	f002 fac5 	bl	2d76 <process_recheck>
     7ec:	4605      	mov	r5, r0
     7ee:	2800      	cmp	r0, #0
     7f0:	d0bf      	beq.n	772 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     7f2:	f041 0120 	orr.w	r1, r1, #32
     7f6:	8321      	strh	r1, [r4, #24]
     7f8:	2500      	movs	r5, #0
     7fa:	e7ba      	b.n	772 <process_event+0x5e>
		} else if (evt == EVT_START) {
     7fc:	2803      	cmp	r0, #3
     7fe:	d109      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
			transit = mgr->transitions->start;
     800:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     802:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     806:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     808:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     80c:	8323      	strh	r3, [r4, #24]
}
     80e:	2500      	movs	r5, #0
		res = 0;
     810:	462f      	mov	r7, r5
     812:	e7af      	b.n	774 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     814:	2804      	cmp	r0, #4
     816:	d106      	bne.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
			transit = mgr->transitions->stop;
     818:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     81a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     81e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     820:	f043 0304 	orr.w	r3, r3, #4
     824:	e7f2      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		} else if (evt == EVT_RESET) {
     826:	2805      	cmp	r0, #5
     828:	d106      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
			transit = mgr->transitions->reset;
     82a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     82c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     830:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     832:	f043 0305 	orr.w	r3, r3, #5
     836:	e7e9      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     838:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     83a:	462e      	mov	r6, r5
     83c:	e7e8      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
				   && !sys_slist_is_empty(&mgr->monitors);
     83e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     840:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     844:	8321      	strh	r1, [r4, #24]
     846:	f38b 8811 	msr	BASEPRI, fp
     84a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     84e:	bb03      	cbnz	r3, 892 <CONFIG_ISR_STACK_SIZE+0x92>
	while (!sys_slist_is_empty(list)) {
     850:	2d00      	cmp	r5, #0
     852:	d133      	bne.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
			if (transit != NULL) {
     854:	b116      	cbz	r6, 85c <CONFIG_ISR_STACK_SIZE+0x5c>
				transit(mgr, transition_complete);
     856:	4921      	ldr	r1, [pc, #132]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     858:	4620      	mov	r0, r4
     85a:	47b0      	blx	r6
	__asm__ volatile(
     85c:	f04f 0320 	mov.w	r3, #32
     860:	f3ef 8b11 	mrs	fp, BASEPRI
     864:	f383 8811 	msr	BASEPRI, r3
     868:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     86c:	8b23      	ldrh	r3, [r4, #24]
     86e:	f023 0308 	bic.w	r3, r3, #8
     872:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     874:	8b23      	ldrh	r3, [r4, #24]
     876:	06da      	lsls	r2, r3, #27
     878:	d528      	bpl.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     87a:	f023 0310 	bic.w	r3, r3, #16
     87e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     880:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     882:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     886:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     88a:	2900      	cmp	r1, #0
     88c:	f47f af5b 	bne.w	746 <process_event+0x32>
out:
     890:	e751      	b.n	736 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     892:	68a1      	ldr	r1, [r4, #8]
     894:	2900      	cmp	r1, #0
     896:	d0db      	beq.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
	return node->next;
     898:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     89a:	f8d1 b004 	ldr.w	fp, [r1, #4]
     89e:	2b00      	cmp	r3, #0
     8a0:	bf38      	it	cc
     8a2:	2300      	movcc	r3, #0
     8a4:	4699      	mov	r9, r3
     8a6:	4652      	mov	r2, sl
     8a8:	463b      	mov	r3, r7
     8aa:	4620      	mov	r0, r4
     8ac:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     8ae:	f1b9 0f00 	cmp.w	r9, #0
     8b2:	d0cd      	beq.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
     8b4:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     8b8:	4649      	mov	r1, r9
     8ba:	e7ee      	b.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     8bc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     8be:	463b      	mov	r3, r7
     8c0:	4652      	mov	r2, sl
     8c2:	4620      	mov	r0, r4
     8c4:	682d      	ldr	r5, [r5, #0]
     8c6:	f002 fa72 	bl	2dae <notify_one>
     8ca:	e7c1      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     8cc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     8d0:	bf1e      	ittt	ne
     8d2:	f023 0320 	bicne.w	r3, r3, #32
     8d6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     8d8:	2102      	movne	r1, #2
     8da:	e7d2      	b.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
     8dc:	00002ddb 	.word	0x00002ddb

000008e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     8e0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     8e2:	4807      	ldr	r0, [pc, #28]	; (900 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
     8e4:	4c07      	ldr	r4, [pc, #28]	; (904 <uart_console_init+0x24>)
     8e6:	f001 fbbb 	bl	2060 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     8ea:	4b07      	ldr	r3, [pc, #28]	; (908 <uart_console_init+0x28>)
     8ec:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     8ee:	4620      	mov	r0, r4
     8f0:	f000 fd44 	bl	137c <__stdout_hook_install>
	__printk_hook_install(console_out);
     8f4:	4620      	mov	r0, r4
     8f6:	f7ff fddb 	bl	4b0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     8fa:	2000      	movs	r0, #0
     8fc:	bd10      	pop	{r4, pc}
     8fe:	bf00      	nop
     900:	00003af2 	.word	0x00003af2
     904:	0000090d 	.word	0x0000090d
     908:	200001c0 	.word	0x200001c0

0000090c <console_out>:
	if ('\n' == c) {
     90c:	280a      	cmp	r0, #10
{
     90e:	b538      	push	{r3, r4, r5, lr}
     910:	4d07      	ldr	r5, [pc, #28]	; (930 <console_out+0x24>)
     912:	4604      	mov	r4, r0
	if ('\n' == c) {
     914:	d104      	bne.n	920 <console_out+0x14>
     916:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     918:	6883      	ldr	r3, [r0, #8]
     91a:	210d      	movs	r1, #13
     91c:	685b      	ldr	r3, [r3, #4]
     91e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     920:	6828      	ldr	r0, [r5, #0]
     922:	6883      	ldr	r3, [r0, #8]
     924:	b2e1      	uxtb	r1, r4
     926:	685b      	ldr	r3, [r3, #4]
     928:	4798      	blx	r3
}
     92a:	4620      	mov	r0, r4
     92c:	bd38      	pop	{r3, r4, r5, pc}
     92e:	bf00      	nop
     930:	200001c0 	.word	0x200001c0

00000934 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
     938:	4f0e      	ldr	r7, [pc, #56]	; (974 <onoff_stop+0x40>)
     93a:	68fa      	ldr	r2, [r7, #12]
	size_t offset = (size_t)(mgr - data->mgr);
     93c:	1a84      	subs	r4, r0, r2
     93e:	10a3      	asrs	r3, r4, #2
     940:	4c0d      	ldr	r4, [pc, #52]	; (978 <onoff_stop+0x44>)
     942:	435c      	muls	r4, r3
{
     944:	4605      	mov	r5, r0
     946:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     948:	200c      	movs	r0, #12
     94a:	fb00 2004 	mla	r0, r0, r4, r2
{
     94e:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     950:	2140      	movs	r1, #64	; 0x40
     952:	4408      	add	r0, r1
     954:	f002 fbaa 	bl	30ac <set_off_state>
	if (err < 0) {
     958:	1e01      	subs	r1, r0, #0
     95a:	db05      	blt.n	968 <onoff_stop+0x34>
	get_sub_config(dev, type)->stop();
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     962:	6863      	ldr	r3, [r4, #4]
     964:	4798      	blx	r3
	return 0;
     966:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     968:	4628      	mov	r0, r5
     96a:	4633      	mov	r3, r6
}
     96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	notify(mgr, res);
     970:	4718      	bx	r3
     972:	bf00      	nop
     974:	2000002c 	.word	0x2000002c
     978:	b6db6db7 	.word	0xb6db6db7

0000097c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
     980:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9d4 <onoff_start+0x58>
     984:	f8d8 600c 	ldr.w	r6, [r8, #12]
	size_t offset = (size_t)(mgr - data->mgr);
     988:	1b84      	subs	r4, r0, r6
     98a:	10a3      	asrs	r3, r4, #2
     98c:	4c0f      	ldr	r4, [pc, #60]	; (9cc <onoff_start+0x50>)
     98e:	435c      	muls	r4, r3
     990:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     992:	250c      	movs	r5, #12
     994:	4365      	muls	r5, r4
{
     996:	4681      	mov	r9, r0
	err = set_starting_state(&subdata->flags, ctx);
     998:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
     99c:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
     99e:	4430      	add	r0, r6
     9a0:	2140      	movs	r1, #64	; 0x40
     9a2:	f002 fb9c 	bl	30de <set_starting_state>
	if (err < 0) {
     9a6:	1e01      	subs	r1, r0, #0
     9a8:	db0a      	blt.n	9c0 <onoff_start+0x44>
	subdata->cb = data->cb;
     9aa:	4a09      	ldr	r2, [pc, #36]	; (9d0 <onoff_start+0x54>)
     9ac:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
     9ae:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     9b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
     9b6:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     9ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	 get_sub_config(dev, type)->start();
     9be:	4718      	bx	r3
		notify(mgr, err);
     9c0:	4648      	mov	r0, r9
     9c2:	463b      	mov	r3, r7
}
     9c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		notify(mgr, err);
     9c8:	4718      	bx	r3
     9ca:	bf00      	nop
     9cc:	b6db6db7 	.word	0xb6db6db7
     9d0:	00003141 	.word	0x00003141
     9d4:	2000002c 	.word	0x2000002c

000009d8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     9d8:	2200      	movs	r2, #0
{
     9da:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     9dc:	2101      	movs	r1, #1
{
     9de:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     9e0:	4610      	mov	r0, r2
     9e2:	f000 fa4f 	bl	e84 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
     9e6:	2000      	movs	r0, #0
     9e8:	f000 fa2e 	bl	e48 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
     9ec:	480f      	ldr	r0, [pc, #60]	; (a2c <clk_init+0x54>)
     9ee:	f001 fa21 	bl	1e34 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
     9f2:	4b0f      	ldr	r3, [pc, #60]	; (a30 <clk_init+0x58>)
     9f4:	4298      	cmp	r0, r3
     9f6:	d115      	bne.n	a24 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
     9f8:	f001 fa2c 	bl	1e54 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
     9fc:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
     9fe:	490d      	ldr	r1, [pc, #52]	; (a34 <clk_init+0x5c>)
     a00:	4630      	mov	r0, r6
     a02:	f002 fa07 	bl	2e14 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     a06:	2800      	cmp	r0, #0
     a08:	db0b      	blt.n	a22 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     a0a:	2501      	movs	r5, #1
     a0c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
     a0e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     a10:	4908      	ldr	r1, [pc, #32]	; (a34 <clk_init+0x5c>)
     a12:	f104 001c 	add.w	r0, r4, #28
     a16:	f002 f9fd 	bl	2e14 <onoff_manager_init>
		if (err < 0) {
     a1a:	2800      	cmp	r0, #0
     a1c:	db01      	blt.n	a22 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     a1e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
     a20:	2000      	movs	r0, #0
}
     a22:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
     a24:	f06f 0004 	mvn.w	r0, #4
     a28:	e7fb      	b.n	a22 <clk_init+0x4a>
     a2a:	bf00      	nop
     a2c:	00000a71 	.word	0x00000a71
     a30:	0bad0000 	.word	0x0bad0000
     a34:	00003a0c 	.word	0x00003a0c

00000a38 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(struct device *dev,
     a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     a3c:	4e0b      	ldr	r6, [pc, #44]	; (a6c <clkstarted_handle.constprop.0+0x34>)
static void clkstarted_handle(struct device *dev,
     a3e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
     a40:	230c      	movs	r3, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     a42:	68f0      	ldr	r0, [r6, #12]
	clock_control_cb_t callback = sub_data->cb;
     a44:	434b      	muls	r3, r1
     a46:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
     a48:	e9d4 570e 	ldrd	r5, r7, [r4, #56]	; 0x38
	sub_data->cb = NULL;
     a4c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
     a4e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
     a50:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     a52:	4418      	add	r0, r3
     a54:	f002 fb61 	bl	311a <set_on_state>
	if (callback) {
     a58:	b12d      	cbz	r5, a66 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
     a5a:	463a      	mov	r2, r7
     a5c:	4630      	mov	r0, r6
     a5e:	462b      	mov	r3, r5
}
     a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
     a64:	4718      	bx	r3
}
     a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a6a:	bf00      	nop
     a6c:	2000002c 	.word	0x2000002c

00000a70 <clock_event_handler>:
	switch (event) {
     a70:	b110      	cbz	r0, a78 <clock_event_handler+0x8>
     a72:	2801      	cmp	r0, #1
     a74:	d005      	beq.n	a82 <clock_event_handler+0x12>
     a76:	4770      	bx	lr
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     a78:	4b03      	ldr	r3, [pc, #12]	; (a88 <clock_event_handler+0x18>)
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
     a7a:	68db      	ldr	r3, [r3, #12]
     a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     a7e:	075b      	lsls	r3, r3, #29
     a80:	d101      	bne.n	a86 <clock_event_handler+0x16>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     a82:	f7ff bfd9 	b.w	a38 <clkstarted_handle.constprop.0>
}
     a86:	4770      	bx	lr
     a88:	2000002c 	.word	0x2000002c

00000a8c <generic_hfclk_start>:
{
     a8c:	b508      	push	{r3, lr}
     a8e:	f04f 0320 	mov.w	r3, #32
     a92:	f3ef 8111 	mrs	r1, BASEPRI
     a96:	f383 8811 	msr	BASEPRI, r3
     a9a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
     a9e:	4a13      	ldr	r2, [pc, #76]	; (aec <generic_hfclk_start+0x60>)
     aa0:	6813      	ldr	r3, [r2, #0]
     aa2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
     aa6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
     aaa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
     aac:	d00e      	beq.n	acc <generic_hfclk_start+0x40>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
     aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     ab2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
     ab6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
     aba:	f013 0301 	ands.w	r3, r3, #1
     abe:	d005      	beq.n	acc <generic_hfclk_start+0x40>
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
     ac0:	4b0b      	ldr	r3, [pc, #44]	; (af0 <generic_hfclk_start+0x64>)
	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
     ac2:	68d8      	ldr	r0, [r3, #12]
			set_on_state(get_hf_flags());
     ac4:	3040      	adds	r0, #64	; 0x40
     ac6:	f002 fb28 	bl	311a <set_on_state>
			already_started = true;
     aca:	2301      	movs	r3, #1
	__asm__ volatile(
     acc:	f381 8811 	msr	BASEPRI, r1
     ad0:	f3bf 8f6f 	isb	sy
	if (already_started) {
     ad4:	b123      	cbz	r3, ae0 <generic_hfclk_start+0x54>
}
     ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
     ada:	2000      	movs	r0, #0
     adc:	f7ff bfac 	b.w	a38 <clkstarted_handle.constprop.0>
}
     ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
     ae4:	2001      	movs	r0, #1
     ae6:	f001 b9c7 	b.w	1e78 <nrfx_clock_start>
     aea:	bf00      	nop
     aec:	20000224 	.word	0x20000224
     af0:	2000002c 	.word	0x2000002c

00000af4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     af4:	4b09      	ldr	r3, [pc, #36]	; (b1c <generic_hfclk_stop+0x28>)
     af6:	f3bf 8f5b 	dmb	ish
     afa:	e853 2f00 	ldrex	r2, [r3]
     afe:	f022 0102 	bic.w	r1, r2, #2
     b02:	e843 1000 	strex	r0, r1, [r3]
     b06:	2800      	cmp	r0, #0
     b08:	d1f7      	bne.n	afa <generic_hfclk_stop+0x6>
     b0a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
     b0e:	07d3      	lsls	r3, r2, #31
     b10:	d402      	bmi.n	b18 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
     b12:	2001      	movs	r0, #1
     b14:	f001 b9ce 	b.w	1eb4 <nrfx_clock_stop>
}
     b18:	4770      	bx	lr
     b1a:	bf00      	nop
     b1c:	20000224 	.word	0x20000224

00000b20 <api_blocking_start>:
{
     b20:	b510      	push	{r4, lr}
     b22:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     b24:	2300      	movs	r3, #0
     b26:	2201      	movs	r2, #1
     b28:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
     b2c:	9301      	str	r3, [sp, #4]
     b2e:	4b09      	ldr	r3, [pc, #36]	; (b54 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     b30:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
     b32:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     b34:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
     b38:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
     b3c:	f002 fb33 	bl	31a6 <api_start>
	if (err < 0) {
     b40:	2800      	cmp	r0, #0
     b42:	db05      	blt.n	b50 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     b48:	2300      	movs	r3, #0
     b4a:	4620      	mov	r0, r4
     b4c:	f001 fece 	bl	28ec <z_impl_k_sem_take>
}
     b50:	b008      	add	sp, #32
     b52:	bd10      	pop	{r4, pc}
     b54:	00003153 	.word	0x00003153

00000b58 <z_nrf_clock_control_lf_on>:
{
     b58:	b510      	push	{r4, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     b5a:	4911      	ldr	r1, [pc, #68]	; (ba0 <z_nrf_clock_control_lf_on+0x48>)
     b5c:	f3bf 8f5b 	dmb	ish
     b60:	4604      	mov	r4, r0
     b62:	2201      	movs	r2, #1
     b64:	e851 3f00 	ldrex	r3, [r1]
     b68:	e841 2000 	strex	r0, r2, [r1]
     b6c:	2800      	cmp	r0, #0
     b6e:	d1f9      	bne.n	b64 <z_nrf_clock_control_lf_on+0xc>
     b70:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
     b74:	b943      	cbnz	r3, b88 <z_nrf_clock_control_lf_on+0x30>
				get_onoff_manager(DEVICE_GET(clock_nrf),
     b76:	490b      	ldr	r1, [pc, #44]	; (ba4 <z_nrf_clock_control_lf_on+0x4c>)
	return &data->mgr[type];
     b78:	68c8      	ldr	r0, [r1, #12]
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
     b7a:	490b      	ldr	r1, [pc, #44]	; (ba8 <z_nrf_clock_control_lf_on+0x50>)
		err = onoff_request(mgr, &cli);
     b7c:	301c      	adds	r0, #28
     b7e:	604b      	str	r3, [r1, #4]
     b80:	60cb      	str	r3, [r1, #12]
     b82:	608a      	str	r2, [r1, #8]
     b84:	f002 f959 	bl	2e3a <onoff_request>
	switch (start_mode) {
     b88:	2c01      	cmp	r4, #1
     b8a:	d006      	beq.n	b9a <z_nrf_clock_control_lf_on+0x42>
     b8c:	2c02      	cmp	r4, #2
     b8e:	d106      	bne.n	b9e <z_nrf_clock_control_lf_on+0x46>
		lfclk_spinwait(CLOCK_CONTROL_NRF_K32SRC);
     b90:	2001      	movs	r0, #1
}
     b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lfclk_spinwait(NRF_CLOCK_LFCLK_RC);
     b96:	f002 bae5 	b.w	3164 <lfclk_spinwait>
     b9a:	2000      	movs	r0, #0
     b9c:	e7f9      	b.n	b92 <z_nrf_clock_control_lf_on+0x3a>
}
     b9e:	bd10      	pop	{r4, pc}
     ba0:	20000228 	.word	0x20000228
     ba4:	2000002c 	.word	0x2000002c
     ba8:	200001c4 	.word	0x200001c4

00000bac <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
     bac:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     bae:	4b08      	ldr	r3, [pc, #32]	; (bd0 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     bb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     bb4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     bb8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     bbc:	4290      	cmp	r0, r2
     bbe:	d100      	bne.n	bc2 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     bc0:	4770      	bx	lr
     bc2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     bc6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     bc8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     bcc:	e7f2      	b.n	bb4 <handle_next_cycle_case+0x8>
     bce:	bf00      	nop
     bd0:	40011000 	.word	0x40011000

00000bd4 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     bd4:	4b07      	ldr	r3, [pc, #28]	; (bf4 <rtc_nrf_isr+0x20>)
     bd6:	2200      	movs	r2, #0
     bd8:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     bda:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     bdc:	4a06      	ldr	r2, [pc, #24]	; (bf8 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
     bde:	4b07      	ldr	r3, [pc, #28]	; (bfc <rtc_nrf_isr+0x28>)
     be0:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
     be4:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     be6:	1ac0      	subs	r0, r0, r3
     be8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     bec:	4403      	add	r3, r0
     bee:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
     bf0:	f001 bffa 	b.w	2be8 <z_clock_announce>
     bf4:	40011140 	.word	0x40011140
     bf8:	2000022c 	.word	0x2000022c
     bfc:	40011000 	.word	0x40011000

00000c00 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     c00:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     c02:	4d10      	ldr	r5, [pc, #64]	; (c44 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     c04:	4b10      	ldr	r3, [pc, #64]	; (c48 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
     c06:	2400      	movs	r4, #0
     c08:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     c0c:	601c      	str	r4, [r3, #0]
     c0e:	681b      	ldr	r3, [r3, #0]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c10:	4b0e      	ldr	r3, [pc, #56]	; (c4c <z_clock_driver_init+0x4c>)
     c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     c16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     c1e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
     c22:	4622      	mov	r2, r4
     c24:	2101      	movs	r1, #1
     c26:	2011      	movs	r0, #17
     c28:	f000 f92c 	bl	e84 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
     c2c:	2011      	movs	r0, #17
     c2e:	f000 f90b 	bl	e48 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     c32:	4a07      	ldr	r2, [pc, #28]	; (c50 <z_clock_driver_init+0x50>)
     c34:	2301      	movs	r3, #1
     c36:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(NRF_LFCLK_START_MODE_NOWAIT);
     c38:	4620      	mov	r0, r4
     c3a:	602b      	str	r3, [r5, #0]
     c3c:	f7ff ff8c 	bl	b58 <z_nrf_clock_control_lf_on>

	return 0;
}
     c40:	4620      	mov	r0, r4
     c42:	bd38      	pop	{r3, r4, r5, pc}
     c44:	40011000 	.word	0x40011000
     c48:	40011140 	.word	0x40011140
     c4c:	e000e100 	.word	0xe000e100
     c50:	40011008 	.word	0x40011008

00000c54 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
     c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
     c56:	4b2b      	ldr	r3, [pc, #172]	; (d04 <z_clock_set_timeout+0xb0>)
     return p_reg->COUNTER;
     c58:	4c2b      	ldr	r4, [pc, #172]	; (d08 <z_clock_set_timeout+0xb4>)
     c5a:	6819      	ldr	r1, [r3, #0]
     c5c:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     c60:	4d2a      	ldr	r5, [pc, #168]	; (d0c <z_clock_set_timeout+0xb8>)
	return (a - b) & COUNTER_MAX;
     c62:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     c64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     c68:	bf08      	it	eq
     c6a:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
     c6c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     c70:	0212      	lsls	r2, r2, #8
     c72:	d436      	bmi.n	ce2 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
     c74:	3801      	subs	r0, #1
     c76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     c7a:	42a8      	cmp	r0, r5
     c7c:	bfa8      	it	ge
     c7e:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     c80:	3301      	adds	r3, #1
     c82:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     c84:	42a8      	cmp	r0, r5
     c86:	bf94      	ite	ls
     c88:	180d      	addls	r5, r1, r0
     c8a:	194d      	addhi	r5, r1, r5
    p_reg->INTENCLR = mask;
     c8c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     c90:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
     return p_reg->COUNTER;
     c94:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
     c98:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     c9c:	4e1c      	ldr	r6, [pc, #112]	; (d10 <z_clock_set_timeout+0xbc>)
     c9e:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
     ca0:	1a9b      	subs	r3, r3, r2
     ca2:	6037      	str	r7, [r6, #0]
     ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ca8:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
     caa:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     cac:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     cb0:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     cb4:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
     cb8:	d104      	bne.n	cc4 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
     cba:	200f      	movs	r0, #15
     cbc:	f002 fd4c 	bl	3758 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     cc0:	6037      	str	r7, [r6, #0]
     cc2:	6833      	ldr	r3, [r6, #0]
     cc4:	4b13      	ldr	r3, [pc, #76]	; (d14 <z_clock_set_timeout+0xc0>)
     cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     cca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     cce:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     cd2:	1a2b      	subs	r3, r5, r0
     cd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
     cd8:	2b01      	cmp	r3, #1
     cda:	d104      	bne.n	ce6 <z_clock_set_timeout+0x92>
		handle_next_cycle_case(t);
     cdc:	f7ff ff66 	bl	bac <handle_next_cycle_case>
     ce0:	e00b      	b.n	cfa <z_clock_set_timeout+0xa6>
		ticks = 0;
     ce2:	2000      	movs	r0, #0
     ce4:	e7cc      	b.n	c80 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     ce6:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     cea:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
     cee:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     cf2:	1a2d      	subs	r5, r5, r0
     cf4:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
     cf6:	022b      	lsls	r3, r5, #8
     cf8:	d4f0      	bmi.n	cdc <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
     cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     cfe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
     d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d04:	2000022c 	.word	0x2000022c
     d08:	40011000 	.word	0x40011000
     d0c:	007fffff 	.word	0x007fffff
     d10:	40011140 	.word	0x40011140
     d14:	e000e100 	.word	0xe000e100

00000d18 <z_clock_elapsed>:
	__asm__ volatile(
     d18:	f04f 0220 	mov.w	r2, #32
     d1c:	f3ef 8311 	mrs	r3, BASEPRI
     d20:	f382 8811 	msr	BASEPRI, r2
     d24:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     d28:	4a06      	ldr	r2, [pc, #24]	; (d44 <z_clock_elapsed+0x2c>)
     d2a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     d2e:	4a06      	ldr	r2, [pc, #24]	; (d48 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     d30:	6812      	ldr	r2, [r2, #0]
     d32:	1a80      	subs	r0, r0, r2
     d34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     d38:	f383 8811 	msr	BASEPRI, r3
     d3c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     d40:	4770      	bx	lr
     d42:	bf00      	nop
     d44:	40011000 	.word	0x40011000
     d48:	2000022c 	.word	0x2000022c

00000d4c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
     d4c:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     d4e:	4c11      	ldr	r4, [pc, #68]	; (d94 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     d50:	4a11      	ldr	r2, [pc, #68]	; (d98 <_DoInit+0x4c>)
     d52:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     d54:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     d56:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
     d5a:	4b10      	ldr	r3, [pc, #64]	; (d9c <_DoInit+0x50>)
     d5c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     d5e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
     d64:	4a0e      	ldr	r2, [pc, #56]	; (da0 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
     d66:	490f      	ldr	r1, [pc, #60]	; (da4 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     d68:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
     d6a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
     d6c:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     d6e:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
     d70:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
     d72:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     d74:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     d76:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
     d78:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     d7a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     d7c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     d7e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
     d80:	f002 fa49 	bl	3216 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
     d84:	4908      	ldr	r1, [pc, #32]	; (da8 <_DoInit+0x5c>)
     d86:	4620      	mov	r0, r4
     d88:	f002 fa45 	bl	3216 <strcpy>
  p->acID[6] = ' ';
     d8c:	2320      	movs	r3, #32
     d8e:	71a3      	strb	r3, [r4, #6]
}
     d90:	bd10      	pop	{r4, pc}
     d92:	bf00      	nop
     d94:	20000230 	.word	0x20000230
     d98:	00003b09 	.word	0x00003b09
     d9c:	2000037c 	.word	0x2000037c
     da0:	2000036c 	.word	0x2000036c
     da4:	00003b12 	.word	0x00003b12
     da8:	00003b16 	.word	0x00003b16

00000dac <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     dac:	4a09      	ldr	r2, [pc, #36]	; (dd4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     dae:	490a      	ldr	r1, [pc, #40]	; (dd8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     db0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     db2:	6809      	ldr	r1, [r1, #0]
     db4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     db6:	4909      	ldr	r1, [pc, #36]	; (ddc <arch_swap+0x30>)
	_current->arch.basepri = key;
     db8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     dba:	684b      	ldr	r3, [r1, #4]
     dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     dc0:	604b      	str	r3, [r1, #4]
     dc2:	2300      	movs	r3, #0
     dc4:	f383 8811 	msr	BASEPRI, r3
     dc8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     dcc:	6893      	ldr	r3, [r2, #8]
}
     dce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
     dd0:	4770      	bx	lr
     dd2:	bf00      	nop
     dd4:	2000032c 	.word	0x2000032c
     dd8:	00003ab8 	.word	0x00003ab8
     ddc:	e000ed00 	.word	0xe000ed00

00000de0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     de0:	490f      	ldr	r1, [pc, #60]	; (e20 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
     de2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     de4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
     de8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     dea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     dee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     df2:	2020      	movs	r0, #32
    msr BASEPRI, r0
     df4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     df8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     dfc:	4f09      	ldr	r7, [pc, #36]	; (e24 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     dfe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     e02:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     e04:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     e06:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     e08:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
     e0a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     e0c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     e0e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     e12:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
     e16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     e1a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     e1e:	4770      	bx	lr
    ldr r1, =_kernel
     e20:	2000032c 	.word	0x2000032c
    ldr v4, =_SCS_ICSR
     e24:	e000ed04 	.word	0xe000ed04

00000e28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     e28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     e2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     e2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     e32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     e36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     e38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     e3c:	2902      	cmp	r1, #2
    beq _oops
     e3e:	d0ff      	beq.n	e40 <_oops>

00000e40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     e40:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     e42:	f002 f9dd 	bl	3200 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     e46:	bd01      	pop	{r0, pc}

00000e48 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     e48:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     e4a:	2b00      	cmp	r3, #0
     e4c:	db08      	blt.n	e60 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e4e:	2201      	movs	r2, #1
     e50:	f000 001f 	and.w	r0, r0, #31
     e54:	fa02 f000 	lsl.w	r0, r2, r0
     e58:	095b      	lsrs	r3, r3, #5
     e5a:	4a02      	ldr	r2, [pc, #8]	; (e64 <arch_irq_enable+0x1c>)
     e5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     e60:	4770      	bx	lr
     e62:	bf00      	nop
     e64:	e000e100 	.word	0xe000e100

00000e68 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
     e68:	4b05      	ldr	r3, [pc, #20]	; (e80 <arch_irq_is_enabled+0x18>)
     e6a:	0942      	lsrs	r2, r0, #5
     e6c:	f000 001f 	and.w	r0, r0, #31
     e70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     e74:	2301      	movs	r3, #1
     e76:	fa03 f000 	lsl.w	r0, r3, r0
}
     e7a:	4010      	ands	r0, r2
     e7c:	4770      	bx	lr
     e7e:	bf00      	nop
     e80:	e000e100 	.word	0xe000e100

00000e84 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     e84:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     e86:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e88:	bfa8      	it	ge
     e8a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     e8e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e92:	bfb8      	it	lt
     e94:	4b06      	ldrlt	r3, [pc, #24]	; (eb0 <z_arm_irq_priority_set+0x2c>)
     e96:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e9a:	bfac      	ite	ge
     e9c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ea0:	f000 000f 	andlt.w	r0, r0, #15
     ea4:	b2c9      	uxtb	r1, r1
     ea6:	bfb4      	ite	lt
     ea8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     eaa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
     eae:	4770      	bx	lr
     eb0:	e000ed14 	.word	0xe000ed14

00000eb4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
     eb4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
     eb8:	9b00      	ldr	r3, [sp, #0]
     eba:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
     ebe:	490a      	ldr	r1, [pc, #40]	; (ee8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
     ec0:	9b01      	ldr	r3, [sp, #4]
     ec2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
     ec6:	9b02      	ldr	r3, [sp, #8]
     ec8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
     ecc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
     ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     ed4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
     ed8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
     edc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
     ede:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
     ee0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
     ee2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     ee4:	4770      	bx	lr
     ee6:	bf00      	nop
     ee8:	00002ecd 	.word	0x00002ecd

00000eec <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
     eec:	b508      	push	{r3, lr}
     eee:	4606      	mov	r6, r0
     ef0:	460d      	mov	r5, r1
     ef2:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
     ef4:	f000 f996 	bl	1224 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
     ef8:	4b07      	ldr	r3, [pc, #28]	; (f18 <arch_switch_to_main_thread+0x2c>)
     efa:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     efc:	4620      	mov	r0, r4
     efe:	f385 8809 	msr	PSP, r5
     f02:	2100      	movs	r1, #0
     f04:	b663      	cpsie	if
     f06:	f381 8811 	msr	BASEPRI, r1
     f0a:	f3bf 8f6f 	isb	sy
     f0e:	2200      	movs	r2, #0
     f10:	2300      	movs	r3, #0
     f12:	f001 ffdb 	bl	2ecc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     f16:	bf00      	nop
     f18:	2000032c 	.word	0x2000032c

00000f1c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
     f1c:	4901      	ldr	r1, [pc, #4]	; (f24 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
     f1e:	2210      	movs	r2, #16
	str	r2, [r1]
     f20:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
     f22:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
     f24:	e000ed10 	.word	0xe000ed10

00000f28 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
     f28:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
     f2a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
     f2c:	f380 8811 	msr	BASEPRI, r0
	isb
     f30:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
     f34:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
     f38:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
     f3a:	b662      	cpsie	i
	isb
     f3c:	f3bf 8f6f 	isb	sy

	bx	lr
     f40:	4770      	bx	lr
     f42:	bf00      	nop

00000f44 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     f44:	bf30      	wfi
    b z_SysNmiOnReset
     f46:	f7ff bffd 	b.w	f44 <z_SysNmiOnReset>
     f4a:	bf00      	nop

00000f4c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f4c:	4a0e      	ldr	r2, [pc, #56]	; (f88 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     f4e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f50:	4b0e      	ldr	r3, [pc, #56]	; (f8c <z_arm_prep_c+0x40>)
     f52:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     f56:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     f58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f5c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
     f60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     f64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
     f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
     f6c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
     f70:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     f74:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
     f78:	f001 f8b0 	bl	20dc <z_bss_zero>
	z_data_copy();
     f7c:	f001 f8b8 	bl	20f0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
     f80:	f000 f91e 	bl	11c0 <z_arm_interrupt_init>
	z_cstart();
     f84:	f001 f8f2 	bl	216c <z_cstart>
     f88:	00000000 	.word	0x00000000
     f8c:	e000ed00 	.word	0xe000ed00

00000f90 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     f90:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
     f92:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     f94:	4a0b      	ldr	r2, [pc, #44]	; (fc4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     f96:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     f98:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     f9a:	bf1e      	ittt	ne
	movne	r1, #0
     f9c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     f9e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     fa0:	f002 fb0f 	blne	35c2 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     fa4:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     fa6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     faa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     fae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
     fb2:	4905      	ldr	r1, [pc, #20]	; (fc8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     fb4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     fb6:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     fb8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     fba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     fbe:	4903      	ldr	r1, [pc, #12]	; (fcc <_isr_wrapper+0x3c>)
	bx r1
     fc0:	4708      	bx	r1
     fc2:	0000      	.short	0x0000
	ldr r2, =_kernel
     fc4:	2000032c 	.word	0x2000032c
	ldr r1, =_sw_isr_table
     fc8:	00003858 	.word	0x00003858
	ldr r1, =z_arm_int_exit
     fcc:	000011a5 	.word	0x000011a5

00000fd0 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     fd0:	f002 f988 	bl	32e4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     fd4:	2020      	movs	r0, #32
    msr BASEPRI, r0
     fd6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
     fda:	4808      	ldr	r0, [pc, #32]	; (ffc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
     fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     fe0:	1840      	adds	r0, r0, r1
    msr PSP, r0
     fe2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     fe6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     fea:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     fec:	4308      	orrs	r0, r1
    msr CONTROL, r0
     fee:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     ff2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     ff6:	f7ff ffa9 	bl	f4c <z_arm_prep_c>
     ffa:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
     ffc:	20000cc0 	.word	0x20000cc0

00001000 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1000:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1004:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1008:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    100a:	4672      	mov	r2, lr
	bl z_arm_fault
    100c:	f000 f84e 	bl	10ac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1010:	bd01      	pop	{r0, pc}
    1012:	bf00      	nop

00001014 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1014:	4b0c      	ldr	r3, [pc, #48]	; (1048 <mem_manage_fault.isra.0+0x34>)
    1016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    101a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    101c:	0792      	lsls	r2, r2, #30
    101e:	d508      	bpl.n	1032 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1020:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1024:	0612      	lsls	r2, r2, #24
    1026:	d504      	bpl.n	1032 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1028:	b118      	cbz	r0, 1032 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    102a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    102c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1030:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1032:	4b05      	ldr	r3, [pc, #20]	; (1048 <mem_manage_fault.isra.0+0x34>)
    1034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    103a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    103c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    103e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1042:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1044:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1046:	4770      	bx	lr
    1048:	e000ed00 	.word	0xe000ed00

0000104c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <bus_fault.isra.0+0x38>)
    104e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1054:	0592      	lsls	r2, r2, #22
    1056:	d508      	bpl.n	106a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1058:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    105a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    105c:	0412      	lsls	r2, r2, #16
    105e:	d504      	bpl.n	106a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1060:	b118      	cbz	r0, 106a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1068:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    106a:	4b06      	ldr	r3, [pc, #24]	; (1084 <bus_fault.isra.0+0x38>)
    106c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    106e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1070:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1072:	bf58      	it	pl
    1074:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1076:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    1078:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    107a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    107e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1080:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1082:	4770      	bx	lr
    1084:	e000ed00 	.word	0xe000ed00

00001088 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1088:	4b07      	ldr	r3, [pc, #28]	; (10a8 <usage_fault.isra.0+0x20>)
    108a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    108c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    108e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1098:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    109c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    10a0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    10a2:	2000      	movs	r0, #0
    10a4:	4770      	bx	lr
    10a6:	bf00      	nop
    10a8:	e000ed00 	.word	0xe000ed00

000010ac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    10ac:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    10ae:	4b36      	ldr	r3, [pc, #216]	; (1188 <z_arm_fault+0xdc>)
    10b0:	685b      	ldr	r3, [r3, #4]
{
    10b2:	b08a      	sub	sp, #40	; 0x28
    10b4:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    10b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    10ba:	2500      	movs	r5, #0
    10bc:	f385 8811 	msr	BASEPRI, r5
    10c0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    10c4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    10c8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    10cc:	d111      	bne.n	10f2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    10ce:	f002 010c 	and.w	r1, r2, #12
    10d2:	2908      	cmp	r1, #8
    10d4:	d00d      	beq.n	10f2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    10d6:	0711      	lsls	r1, r2, #28
    10d8:	d401      	bmi.n	10de <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    10da:	4606      	mov	r6, r0
			*nested_exc = true;
    10dc:	2501      	movs	r5, #1
	*recoverable = false;
    10de:	2200      	movs	r2, #0
    10e0:	3b03      	subs	r3, #3
    10e2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    10e6:	2b03      	cmp	r3, #3
    10e8:	d847      	bhi.n	117a <z_arm_fault+0xce>
    10ea:	e8df f003 	tbb	[pc, r3]
    10ee:	3e04      	.short	0x3e04
    10f0:	3b42      	.short	0x3b42
		return NULL;
    10f2:	462e      	mov	r6, r5
    10f4:	e7f3      	b.n	10de <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    10f6:	4b24      	ldr	r3, [pc, #144]	; (1188 <z_arm_fault+0xdc>)
    10f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    10fa:	0792      	lsls	r2, r2, #30
    10fc:	d43d      	bmi.n	117a <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    10fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1100:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1104:	d008      	beq.n	1118 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    1106:	3328      	adds	r3, #40	; 0x28
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	b1eb      	cbz	r3, 1148 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    110c:	f10d 0107 	add.w	r1, sp, #7
    1110:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1112:	f7ff ff7f 	bl	1014 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    1116:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1118:	f89d 3007 	ldrb.w	r3, [sp, #7]
    111c:	b993      	cbnz	r3, 1144 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    111e:	2220      	movs	r2, #32
    1120:	4631      	mov	r1, r6
    1122:	a802      	add	r0, sp, #8
    1124:	f002 f88d 	bl	3242 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1128:	9b09      	ldr	r3, [sp, #36]	; 0x24
    112a:	b345      	cbz	r5, 117e <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    112c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1130:	b922      	cbnz	r2, 113c <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1132:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1136:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    113a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    113c:	a902      	add	r1, sp, #8
    113e:	4620      	mov	r0, r4
    1140:	f002 f85c 	bl	31fc <z_arm_fatal_error>
}
    1144:	b00a      	add	sp, #40	; 0x28
    1146:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1148:	4b10      	ldr	r3, [pc, #64]	; (118c <z_arm_fault+0xe0>)
    114a:	781b      	ldrb	r3, [r3, #0]
    114c:	b12b      	cbz	r3, 115a <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    114e:	f10d 0107 	add.w	r1, sp, #7
    1152:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1154:	f7ff ff7a 	bl	104c <bus_fault.isra.0>
    1158:	e7dd      	b.n	1116 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    115a:	4b0d      	ldr	r3, [pc, #52]	; (1190 <z_arm_fault+0xe4>)
    115c:	8818      	ldrh	r0, [r3, #0]
    115e:	b284      	uxth	r4, r0
    1160:	2c00      	cmp	r4, #0
    1162:	d0d9      	beq.n	1118 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    1164:	f7ff ff90 	bl	1088 <usage_fault.isra.0>
    1168:	e7d5      	b.n	1116 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    116a:	f10d 0107 	add.w	r1, sp, #7
    116e:	2000      	movs	r0, #0
    1170:	e7cf      	b.n	1112 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    1172:	f10d 0107 	add.w	r1, sp, #7
    1176:	2000      	movs	r0, #0
    1178:	e7ec      	b.n	1154 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    117a:	2400      	movs	r4, #0
    117c:	e7cc      	b.n	1118 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    117e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1182:	f023 0301 	bic.w	r3, r3, #1
    1186:	e7d8      	b.n	113a <z_arm_fault+0x8e>
    1188:	e000ed00 	.word	0xe000ed00
    118c:	e000ed29 	.word	0xe000ed29
    1190:	e000ed2a 	.word	0xe000ed2a

00001194 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1194:	4a02      	ldr	r2, [pc, #8]	; (11a0 <z_arm_fault_init+0xc>)
    1196:	6953      	ldr	r3, [r2, #20]
    1198:	f043 0310 	orr.w	r3, r3, #16
    119c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    119e:	4770      	bx	lr
    11a0:	e000ed00 	.word	0xe000ed00

000011a4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    11a4:	4b04      	ldr	r3, [pc, #16]	; (11b8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    11a6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    11a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    11aa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    11ac:	d003      	beq.n	11b6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    11ae:	4903      	ldr	r1, [pc, #12]	; (11bc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    11b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    11b4:	600a      	str	r2, [r1, #0]

000011b6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    11b6:	4770      	bx	lr
	ldr r3, =_kernel
    11b8:	2000032c 	.word	0x2000032c
	ldr r1, =_SCS_ICSR
    11bc:	e000ed04 	.word	0xe000ed04

000011c0 <z_arm_interrupt_init>:
    11c0:	4804      	ldr	r0, [pc, #16]	; (11d4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    11c2:	2300      	movs	r3, #0
    11c4:	2120      	movs	r1, #32
    11c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    11c8:	3301      	adds	r3, #1
    11ca:	2b30      	cmp	r3, #48	; 0x30
    11cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    11d0:	d1f9      	bne.n	11c6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    11d2:	4770      	bx	lr
    11d4:	e000e100 	.word	0xe000e100

000011d8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    11d8:	b538      	push	{r3, r4, r5, lr}
    11da:	4604      	mov	r4, r0
	__asm__ volatile(
    11dc:	f04f 0320 	mov.w	r3, #32
    11e0:	f3ef 8511 	mrs	r5, BASEPRI
    11e4:	f383 8811 	msr	BASEPRI, r3
    11e8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    11ec:	f001 fa00 	bl	25f0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    11f0:	4b0a      	ldr	r3, [pc, #40]	; (121c <z_impl_k_thread_abort+0x44>)
    11f2:	689b      	ldr	r3, [r3, #8]
    11f4:	42a3      	cmp	r3, r4
    11f6:	d10b      	bne.n	1210 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    11f8:	4b09      	ldr	r3, [pc, #36]	; (1220 <z_impl_k_thread_abort+0x48>)
    11fa:	685a      	ldr	r2, [r3, #4]
    11fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1200:	b912      	cbnz	r2, 1208 <z_impl_k_thread_abort+0x30>

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    1202:	4628      	mov	r0, r5
    1204:	f7ff fdd2 	bl	dac <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1208:	685a      	ldr	r2, [r3, #4]
    120a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    120e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1210:	4628      	mov	r0, r5
}
    1212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    1216:	f002 b9d6 	b.w	35c6 <z_reschedule_irqlock>
    121a:	bf00      	nop
    121c:	2000032c 	.word	0x2000032c
    1220:	e000ed00 	.word	0xe000ed00

00001224 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1226:	4b08      	ldr	r3, [pc, #32]	; (1248 <z_arm_configure_static_mpu_regions+0x24>)
    1228:	9301      	str	r3, [sp, #4]
    122a:	4b08      	ldr	r3, [pc, #32]	; (124c <z_arm_configure_static_mpu_regions+0x28>)
    122c:	9302      	str	r3, [sp, #8]
    122e:	4b08      	ldr	r3, [pc, #32]	; (1250 <z_arm_configure_static_mpu_regions+0x2c>)
    1230:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    1232:	ab01      	add	r3, sp, #4
    1234:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1236:	4a07      	ldr	r2, [pc, #28]	; (1254 <z_arm_configure_static_mpu_regions+0x30>)
    1238:	4b07      	ldr	r3, [pc, #28]	; (1258 <z_arm_configure_static_mpu_regions+0x34>)
    123a:	2101      	movs	r1, #1
    123c:	4668      	mov	r0, sp
    123e:	f000 f893 	bl	1368 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1242:	b005      	add	sp, #20
    1244:	f85d fb04 	ldr.w	pc, [sp], #4
    1248:	20000000 	.word	0x20000000
    124c:	00000000 	.word	0x00000000
    1250:	060b0000 	.word	0x060b0000
    1254:	20000000 	.word	0x20000000
    1258:	20040000 	.word	0x20040000

0000125c <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    125c:	f8df c084 	ldr.w	ip, [pc, #132]	; 12e4 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1260:	b5f0      	push	{r4, r5, r6, r7, lr}
    1262:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1264:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    1266:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    1268:	428f      	cmp	r7, r1
    126a:	db00      	blt.n	126e <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    126e:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    1272:	f8de 4004 	ldr.w	r4, [lr, #4]
    1276:	b394      	cbz	r4, 12de <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    1278:	b143      	cbz	r3, 128c <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    127a:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    127c:	422c      	tst	r4, r5
    127e:	d119      	bne.n	12b4 <mpu_configure_regions+0x58>
		&&
    1280:	2c1f      	cmp	r4, #31
    1282:	d917      	bls.n	12b4 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
    1284:	f8de 2000 	ldr.w	r2, [lr]
		&&
    1288:	4215      	tst	r5, r2
    128a:	d113      	bne.n	12b4 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    128c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    128e:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    1290:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    1294:	f8de 0008 	ldr.w	r0, [lr, #8]
    1298:	d90f      	bls.n	12ba <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    129a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    129e:	d80e      	bhi.n	12be <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    12a0:	3c01      	subs	r4, #1
    12a2:	fab4 f484 	clz	r4, r4
    12a6:	f1c4 041f 	rsb	r4, r4, #31
    12aa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    12ac:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    12ae:	ea44 0400 	orr.w	r4, r4, r0
    12b2:	d906      	bls.n	12c2 <mpu_configure_regions+0x66>
			return -EINVAL;
    12b4:	f06f 0015 	mvn.w	r0, #21
    12b8:	e7d8      	b.n	126c <mpu_configure_regions+0x10>
		return REGION_32B;
    12ba:	2408      	movs	r4, #8
    12bc:	e7f6      	b.n	12ac <mpu_configure_regions+0x50>
		return REGION_4G;
    12be:	243e      	movs	r4, #62	; 0x3e
    12c0:	e7f4      	b.n	12ac <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    12c2:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    12c6:	4315      	orrs	r5, r2
    12c8:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    12cc:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    12d0:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    12d4:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    12d6:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    12da:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    12de:	3701      	adds	r7, #1
    12e0:	e7c2      	b.n	1268 <mpu_configure_regions+0xc>
    12e2:	bf00      	nop
    12e4:	e000ed90 	.word	0xe000ed90

000012e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    12e8:	4b03      	ldr	r3, [pc, #12]	; (12f8 <arm_core_mpu_enable+0x10>)
    12ea:	2205      	movs	r2, #5
    12ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    12ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12f2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    12f6:	4770      	bx	lr
    12f8:	e000ed90 	.word	0xe000ed90

000012fc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    12fc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1300:	4b01      	ldr	r3, [pc, #4]	; (1308 <arm_core_mpu_disable+0xc>)
    1302:	2200      	movs	r2, #0
    1304:	605a      	str	r2, [r3, #4]
}
    1306:	4770      	bx	lr
    1308:	e000ed90 	.word	0xe000ed90

0000130c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    130c:	4913      	ldr	r1, [pc, #76]	; (135c <arm_mpu_init+0x50>)
    130e:	6808      	ldr	r0, [r1, #0]
    1310:	2808      	cmp	r0, #8
{
    1312:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1314:	d81e      	bhi.n	1354 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1316:	f7ff fff1 	bl	12fc <arm_core_mpu_disable>
	MPU->RNR = index;
    131a:	4c11      	ldr	r4, [pc, #68]	; (1360 <arm_mpu_init+0x54>)
    131c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    131e:	2200      	movs	r2, #0
    1320:	4290      	cmp	r0, r2
    1322:	f101 010c 	add.w	r1, r1, #12
    1326:	d105      	bne.n	1334 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1328:	4b0e      	ldr	r3, [pc, #56]	; (1364 <arm_mpu_init+0x58>)
    132a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    132c:	f7ff ffdc 	bl	12e8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1330:	2000      	movs	r0, #0
}
    1332:	bd10      	pop	{r4, pc}
    1334:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1336:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    133a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    133e:	4313      	orrs	r3, r2
    1340:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1344:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1346:	f851 3c04 	ldr.w	r3, [r1, #-4]
    134a:	f043 0301 	orr.w	r3, r3, #1
    134e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1350:	3201      	adds	r2, #1
    1352:	e7e5      	b.n	1320 <arm_mpu_init+0x14>
		return -1;
    1354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1358:	e7eb      	b.n	1332 <arm_mpu_init+0x26>
    135a:	bf00      	nop
    135c:	00003a18 	.word	0x00003a18
    1360:	e000ed90 	.word	0xe000ed90
    1364:	2000077c 	.word	0x2000077c

00001368 <arm_core_mpu_configure_static_mpu_regions>:
{
    1368:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    136a:	4c03      	ldr	r4, [pc, #12]	; (1378 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    136c:	2301      	movs	r3, #1
    136e:	7822      	ldrb	r2, [r4, #0]
    1370:	f7ff ff74 	bl	125c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1374:	7020      	strb	r0, [r4, #0]
}
    1376:	bd10      	pop	{r4, pc}
    1378:	2000077c 	.word	0x2000077c

0000137c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    137c:	4b01      	ldr	r3, [pc, #4]	; (1384 <__stdout_hook_install+0x8>)
    137e:	6018      	str	r0, [r3, #0]
}
    1380:	4770      	bx	lr
    1382:	bf00      	nop
    1384:	20000004 	.word	0x20000004

00001388 <nordicsemi_nrf52_init>:
    1388:	f04f 0320 	mov.w	r3, #32
    138c:	f3ef 8211 	mrs	r2, BASEPRI
    1390:	f383 8811 	msr	BASEPRI, r3
    1394:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1398:	4906      	ldr	r1, [pc, #24]	; (13b4 <nordicsemi_nrf52_init+0x2c>)
    139a:	2301      	movs	r3, #1
    139c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    13a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    13a4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    13a8:	f382 8811 	msr	BASEPRI, r2
    13ac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    13b0:	2000      	movs	r0, #0
    13b2:	4770      	bx	lr
    13b4:	4001e000 	.word	0x4001e000

000013b8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    13b8:	b120      	cbz	r0, 13c4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    13ba:	4b03      	ldr	r3, [pc, #12]	; (13c8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    13bc:	0180      	lsls	r0, r0, #6
    13be:	f043 0301 	orr.w	r3, r3, #1
    13c2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    13c4:	4770      	bx	lr
    13c6:	bf00      	nop
    13c8:	000039e0 	.word	0x000039e0

000013cc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    13cc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    13ce:	4b09      	ldr	r3, [pc, #36]	; (13f4 <gpio_nrfx_init+0x28>)
    13d0:	781a      	ldrb	r2, [r3, #0]
    13d2:	b96a      	cbnz	r2, 13f0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    13d4:	2101      	movs	r1, #1
    13d6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    13d8:	2006      	movs	r0, #6
    13da:	2105      	movs	r1, #5
    13dc:	f7ff fd52 	bl	e84 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    13e0:	2006      	movs	r0, #6
    13e2:	f7ff fd31 	bl	e48 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    13e6:	4b04      	ldr	r3, [pc, #16]	; (13f8 <gpio_nrfx_init+0x2c>)
    13e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    13ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    13f0:	2000      	movs	r0, #0
    13f2:	bd08      	pop	{r3, pc}
    13f4:	2000077d 	.word	0x2000077d
    13f8:	40006000 	.word	0x40006000

000013fc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    13fc:	4b2b      	ldr	r3, [pc, #172]	; (14ac <gpio_nrfx_config+0xb0>)
{
    13fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1400:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1402:	482b      	ldr	r0, [pc, #172]	; (14b0 <gpio_nrfx_config+0xb4>)
    1404:	4013      	ands	r3, r2
    1406:	4283      	cmp	r3, r0
    1408:	d041      	beq.n	148e <gpio_nrfx_config+0x92>
    140a:	d80d      	bhi.n	1428 <gpio_nrfx_config+0x2c>
    140c:	2b06      	cmp	r3, #6
    140e:	d015      	beq.n	143c <gpio_nrfx_config+0x40>
    1410:	d805      	bhi.n	141e <gpio_nrfx_config+0x22>
    1412:	b19b      	cbz	r3, 143c <gpio_nrfx_config+0x40>
    1414:	2b02      	cmp	r3, #2
    1416:	d03c      	beq.n	1492 <gpio_nrfx_config+0x96>
    1418:	f06f 0015 	mvn.w	r0, #21
    141c:	e036      	b.n	148c <gpio_nrfx_config+0x90>
    141e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1422:	d1f9      	bne.n	1418 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1424:	2301      	movs	r3, #1
    1426:	e009      	b.n	143c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1428:	4822      	ldr	r0, [pc, #136]	; (14b4 <gpio_nrfx_config+0xb8>)
    142a:	4283      	cmp	r3, r0
    142c:	d033      	beq.n	1496 <gpio_nrfx_config+0x9a>
    142e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1432:	d032      	beq.n	149a <gpio_nrfx_config+0x9e>
    1434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1438:	d1ee      	bne.n	1418 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    143a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    143c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    143e:	bf54      	ite	pl
    1440:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    1444:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1446:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    144a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    144c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1450:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1454:	d507      	bpl.n	1466 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1456:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    145a:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    145c:	d01f      	beq.n	149e <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    145e:	2201      	movs	r2, #1
    1460:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1462:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1466:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    1468:	4c13      	ldr	r4, [pc, #76]	; (14b8 <gpio_nrfx_config+0xbc>)
    146a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    146c:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1470:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    1474:	bf18      	it	ne
    1476:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    147a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    147e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1482:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1486:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    148a:	2000      	movs	r0, #0
}
    148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    148e:	2307      	movs	r3, #7
    1490:	e7d4      	b.n	143c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1492:	2304      	movs	r3, #4
    1494:	e7d2      	b.n	143c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1496:	2305      	movs	r3, #5
    1498:	e7d0      	b.n	143c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    149a:	2303      	movs	r3, #3
    149c:	e7ce      	b.n	143c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    149e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    14a0:	bf42      	ittt	mi
    14a2:	2201      	movmi	r2, #1
    14a4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    14a6:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    14aa:	e7dc      	b.n	1466 <gpio_nrfx_config+0x6a>
    14ac:	00f00006 	.word	0x00f00006
    14b0:	00100006 	.word	0x00100006
    14b4:	00400002 	.word	0x00400002
    14b8:	50000300 	.word	0x50000300

000014bc <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    14bc:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    14c0:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    14c2:	4b08      	ldr	r3, [pc, #32]	; (14e4 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    14c4:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    14c6:	bf18      	it	ne
    14c8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    14cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    14d0:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    14d4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    14d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    14dc:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    14e0:	4770      	bx	lr
    14e2:	bf00      	nop
    14e4:	50000300 	.word	0x50000300

000014e8 <gpio_nrfx_pin_interrupt_configure>:
{
    14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ea:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    14ec:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    14ee:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    14f0:	7a08      	ldrb	r0, [r1, #8]
    14f2:	f005 061f 	and.w	r6, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    14f6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    14fa:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
    14fe:	d110      	bne.n	1522 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    1500:	0970      	lsrs	r0, r6, #5
        case 1: return NRF_P1;
    1502:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    1504:	f006 011f 	and.w	r1, r6, #31
        case 1: return NRF_P1;
    1508:	486b      	ldr	r0, [pc, #428]	; (16b8 <gpio_nrfx_pin_interrupt_configure+0x1d0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    150a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    150e:	bf18      	it	ne
    1510:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1514:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1518:	07cc      	lsls	r4, r1, #31
    151a:	d507      	bpl.n	152c <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    151c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1520:	e0bd      	b.n	169e <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1522:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1526:	68f9      	ldr	r1, [r7, #12]
    1528:	f000 80aa 	beq.w	1680 <gpio_nrfx_pin_interrupt_configure+0x198>
    152c:	68f8      	ldr	r0, [r7, #12]
    152e:	2101      	movs	r1, #1
    1530:	40a9      	lsls	r1, r5
    1532:	4301      	orrs	r1, r0
    1534:	6978      	ldr	r0, [r7, #20]
    1536:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1538:	2101      	movs	r1, #1
    153a:	40a9      	lsls	r1, r5
    153c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1540:	69ba      	ldr	r2, [r7, #24]
    1542:	bf0c      	ite	eq
    1544:	4308      	orreq	r0, r1
    1546:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1548:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    154c:	bf0c      	ite	eq
    154e:	430a      	orreq	r2, r1
    1550:	438a      	bicne	r2, r1
    1552:	61ba      	str	r2, [r7, #24]
    1554:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1556:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    155c:	bf0c      	ite	eq
    155e:	4311      	orreq	r1, r2
    1560:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1564:	4a55      	ldr	r2, [pc, #340]	; (16bc <gpio_nrfx_pin_interrupt_configure+0x1d4>)
    1566:	6139      	str	r1, [r7, #16]
    1568:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    156c:	2300      	movs	r3, #0
    156e:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1570:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    1574:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    1578:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    157c:	4286      	cmp	r6, r0
    157e:	f040 8084 	bne.w	168a <gpio_nrfx_pin_interrupt_configure+0x1a2>
		    && (intenset & BIT(i))) {
    1582:	fa21 f003 	lsr.w	r0, r1, r3
    1586:	07c0      	lsls	r0, r0, #31
    1588:	d57f      	bpl.n	168a <gpio_nrfx_pin_interrupt_configure+0x1a2>
			(void)atomic_and(mask, ~BIT(i));
    158a:	2101      	movs	r1, #1
    158c:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    158e:	484c      	ldr	r0, [pc, #304]	; (16c0 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    1590:	f3bf 8f5b 	dmb	ish
    1594:	43cc      	mvns	r4, r1
    1596:	e850 cf00 	ldrex	ip, [r0]
    159a:	ea0c 0c04 	and.w	ip, ip, r4
    159e:	e840 ce00 	strex	lr, ip, [r0]
    15a2:	f1be 0f00 	cmp.w	lr, #0
    15a6:	d1f6      	bne.n	1596 <gpio_nrfx_pin_interrupt_configure+0xae>
    15a8:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    15ac:	009b      	lsls	r3, r3, #2
    15ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    15b2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    15b6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    15ba:	f020 0001 	bic.w	r0, r0, #1
    15be:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    15c2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    15c6:	2100      	movs	r1, #0
    15c8:	4630      	mov	r0, r6
    15ca:	f7ff ff77 	bl	14bc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    15ce:	68fb      	ldr	r3, [r7, #12]
    15d0:	40eb      	lsrs	r3, r5
    15d2:	f013 0301 	ands.w	r3, r3, #1
    15d6:	d051      	beq.n	167c <gpio_nrfx_pin_interrupt_configure+0x194>
		if (data->trig_edge & BIT(pin)) {
    15d8:	697b      	ldr	r3, [r7, #20]
    15da:	40eb      	lsrs	r3, r5
    15dc:	f013 0401 	ands.w	r4, r3, #1
    15e0:	d05e      	beq.n	16a0 <gpio_nrfx_pin_interrupt_configure+0x1b8>
			if (data->double_edge & BIT(pin)) {
    15e2:	69bb      	ldr	r3, [r7, #24]
    15e4:	40eb      	lsrs	r3, r5
    15e6:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    15e8:	bf5f      	itttt	pl
    15ea:	6939      	ldrpl	r1, [r7, #16]
    15ec:	fa21 f505 	lsrpl.w	r5, r1, r5
    15f0:	f005 0501 	andpl.w	r5, r5, #1
    15f4:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    15f8:	4931      	ldr	r1, [pc, #196]	; (16c0 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    15fa:	bf54      	ite	pl
    15fc:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    15fe:	2503      	movmi	r5, #3
    1600:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    1602:	2701      	movs	r7, #1
    1604:	fa07 f402 	lsl.w	r4, r7, r2
    1608:	f3bf 8f5b 	dmb	ish
    160c:	e851 0f00 	ldrex	r0, [r1]
    1610:	ea40 0304 	orr.w	r3, r0, r4
    1614:	e841 3c00 	strex	ip, r3, [r1]
    1618:	f1bc 0f00 	cmp.w	ip, #0
    161c:	d1f6      	bne.n	160c <gpio_nrfx_pin_interrupt_configure+0x124>
    161e:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
    1622:	40d0      	lsrs	r0, r2
    1624:	f010 0301 	ands.w	r3, r0, #1
    1628:	d134      	bne.n	1694 <gpio_nrfx_pin_interrupt_configure+0x1ac>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    162a:	0091      	lsls	r1, r2, #2
    162c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1630:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
    1634:	3240      	adds	r2, #64	; 0x40
    1636:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    163a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    163e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    1642:	0092      	lsls	r2, r2, #2
    1644:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1648:	0236      	lsls	r6, r6, #8
    return ((uint32_t)p_reg + event);
    164a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    164c:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    1650:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
    1654:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1658:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    165c:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
    1660:	4306      	orrs	r6, r0
    1662:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1666:	6013      	str	r3, [r2, #0]
    1668:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    166a:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    166e:	f042 0201 	orr.w	r2, r2, #1
    1672:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
    1676:	4a11      	ldr	r2, [pc, #68]	; (16bc <gpio_nrfx_pin_interrupt_configure+0x1d4>)
    1678:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
    167c:	4618      	mov	r0, r3
    167e:	e00e      	b.n	169e <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1680:	2001      	movs	r0, #1
    1682:	40a8      	lsls	r0, r5
    1684:	ea21 0100 	bic.w	r1, r1, r0
    1688:	e754      	b.n	1534 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    168a:	3301      	adds	r3, #1
    168c:	2b08      	cmp	r3, #8
    168e:	f47f af6f 	bne.w	1570 <gpio_nrfx_pin_interrupt_configure+0x88>
    1692:	e798      	b.n	15c6 <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    1694:	3201      	adds	r2, #1
    1696:	2a08      	cmp	r2, #8
    1698:	d1b4      	bne.n	1604 <gpio_nrfx_pin_interrupt_configure+0x11c>
	return -ENODEV;
    169a:	f06f 0012 	mvn.w	r0, #18
}
    169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
    16a0:	6939      	ldr	r1, [r7, #16]
    16a2:	40e9      	lsrs	r1, r5
    16a4:	f001 0101 	and.w	r1, r1, #1
    16a8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    16ac:	4630      	mov	r0, r6
    16ae:	b2c9      	uxtb	r1, r1
    16b0:	f7ff ff04 	bl	14bc <nrf_gpio_cfg_sense_set>
	int res = 0;
    16b4:	4620      	mov	r0, r4
    16b6:	e7f2      	b.n	169e <gpio_nrfx_pin_interrupt_configure+0x1b6>
    16b8:	50000300 	.word	0x50000300
    16bc:	40006000 	.word	0x40006000
    16c0:	20000310 	.word	0x20000310

000016c4 <gpiote_event_handler>:
{
    16c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    16c6:	2600      	movs	r6, #0
    16c8:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    16cc:	4d28      	ldr	r5, [pc, #160]	; (1770 <gpiote_event_handler+0xac>)
    16ce:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
    16d0:	b14c      	cbz	r4, 16e6 <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    16d2:	4828      	ldr	r0, [pc, #160]	; (1774 <gpiote_event_handler+0xb0>)
    16d4:	f001 fe72 	bl	33bc <check_level_trigger_pins>
		fired_triggers[0] =
    16d8:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    16da:	4827      	ldr	r0, [pc, #156]	; (1778 <gpiote_event_handler+0xb4>)
    16dc:	f001 fe6e 	bl	33bc <check_level_trigger_pins>
		fired_triggers[1] =
    16e0:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    16e2:	602e      	str	r6, [r5, #0]
    16e4:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
    16e6:	4d25      	ldr	r5, [pc, #148]	; (177c <gpiote_event_handler+0xb8>)
{
    16e8:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    16ea:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    16ec:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    16ee:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    16f2:	fa06 f102 	lsl.w	r1, r6, r2
    16f6:	4219      	tst	r1, r3
    16f8:	d01b      	beq.n	1732 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    16fa:	0091      	lsls	r1, r2, #2
    16fc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1700:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    1704:	680b      	ldr	r3, [r1, #0]
    1706:	b1a3      	cbz	r3, 1732 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1708:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    170c:	af02      	add	r7, sp, #8
    170e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1712:	f8c1 c000 	str.w	ip, [r1]
    1716:	f3c3 3040 	ubfx	r0, r3, #13, #1
    171a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    171e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1722:	f850 7c08 	ldr.w	r7, [r0, #-8]
    1726:	fa06 f303 	lsl.w	r3, r6, r3
    172a:	433b      	orrs	r3, r7
    172c:	f840 3c08 	str.w	r3, [r0, #-8]
    1730:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1732:	3201      	adds	r2, #1
    1734:	2a08      	cmp	r2, #8
    1736:	d1da      	bne.n	16ee <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
    1738:	9a00      	ldr	r2, [sp, #0]
    173a:	b122      	cbz	r2, 1746 <gpiote_event_handler+0x82>
	gpio_fire_callbacks(list, port, pins);
    173c:	490d      	ldr	r1, [pc, #52]	; (1774 <gpiote_event_handler+0xb0>)
	sys_slist_t *list = &data->callbacks;
    173e:	68c8      	ldr	r0, [r1, #12]
	gpio_fire_callbacks(list, port, pins);
    1740:	3004      	adds	r0, #4
    1742:	f001 fdd1 	bl	32e8 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    1746:	9a01      	ldr	r2, [sp, #4]
    1748:	b12a      	cbz	r2, 1756 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
    174a:	490a      	ldr	r1, [pc, #40]	; (1774 <gpiote_event_handler+0xb0>)
	sys_slist_t *list = &data->callbacks;
    174c:	69c8      	ldr	r0, [r1, #28]
	gpio_fire_callbacks(list, port, pins);
    174e:	3110      	adds	r1, #16
    1750:	3004      	adds	r0, #4
    1752:	f001 fdc9 	bl	32e8 <gpio_fire_callbacks>
	if (port_event) {
    1756:	b144      	cbz	r4, 176a <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    1758:	4806      	ldr	r0, [pc, #24]	; (1774 <gpiote_event_handler+0xb0>)
    175a:	f001 fe58 	bl	340e <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    175e:	4806      	ldr	r0, [pc, #24]	; (1778 <gpiote_event_handler+0xb4>)
}
    1760:	b003      	add	sp, #12
    1762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    1766:	f001 be52 	b.w	340e <cfg_level_pins>
}
    176a:	b003      	add	sp, #12
    176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    176e:	bf00      	nop
    1770:	4000617c 	.word	0x4000617c
    1774:	2000006c 	.word	0x2000006c
    1778:	2000007c 	.word	0x2000007c
    177c:	40006000 	.word	0x40006000

00001780 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1780:	4b06      	ldr	r3, [pc, #24]	; (179c <uart_nrfx_poll_in+0x1c>)
    1782:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    1784:	b13a      	cbz	r2, 1796 <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1786:	2000      	movs	r0, #0
    1788:	6018      	str	r0, [r3, #0]
    178a:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    178c:	4b04      	ldr	r3, [pc, #16]	; (17a0 <uart_nrfx_poll_in+0x20>)
    178e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1792:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    1794:	4770      	bx	lr
		return -1;
    1796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    179a:	4770      	bx	lr
    179c:	40002108 	.word	0x40002108
    17a0:	40002000 	.word	0x40002000

000017a4 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    17a4:	4b02      	ldr	r3, [pc, #8]	; (17b0 <uart_nrfx_err_check+0xc>)
    17a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    17aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    17ae:	4770      	bx	lr
    17b0:	40002000 	.word	0x40002000

000017b4 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    17b4:	b570      	push	{r4, r5, r6, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    17b6:	794b      	ldrb	r3, [r1, #5]
    17b8:	2b01      	cmp	r3, #1
    17ba:	d024      	beq.n	1806 <uart_nrfx_configure+0x52>
    17bc:	2b03      	cmp	r3, #3
    17be:	d11f      	bne.n	1800 <uart_nrfx_configure+0x4c>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    17c0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    17c2:	798b      	ldrb	r3, [r1, #6]
    17c4:	2b03      	cmp	r3, #3
    17c6:	d11b      	bne.n	1800 <uart_nrfx_configure+0x4c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    17c8:	79cc      	ldrb	r4, [r1, #7]
    17ca:	b10c      	cbz	r4, 17d0 <uart_nrfx_configure+0x1c>
    17cc:	2c01      	cmp	r4, #1
    17ce:	d117      	bne.n	1800 <uart_nrfx_configure+0x4c>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    17d0:	790a      	ldrb	r2, [r1, #4]
    17d2:	b112      	cbz	r2, 17da <uart_nrfx_configure+0x26>
    17d4:	2a02      	cmp	r2, #2
    17d6:	d113      	bne.n	1800 <uart_nrfx_configure+0x4c>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    17d8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    17da:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    17dc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    17e0:	d062      	beq.n	18a8 <uart_nrfx_configure+0xf4>
    17e2:	d82d      	bhi.n	1840 <uart_nrfx_configure+0x8c>
    17e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    17e8:	d060      	beq.n	18ac <uart_nrfx_configure+0xf8>
    17ea:	d816      	bhi.n	181a <uart_nrfx_configure+0x66>
    17ec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    17f0:	d05e      	beq.n	18b0 <uart_nrfx_configure+0xfc>
    17f2:	d80a      	bhi.n	180a <uart_nrfx_configure+0x56>
    17f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    17f8:	d05d      	beq.n	18b6 <uart_nrfx_configure+0x102>
    17fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    17fe:	d05d      	beq.n	18bc <uart_nrfx_configure+0x108>
    1800:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1804:	e04f      	b.n	18a6 <uart_nrfx_configure+0xf2>
	switch (cfg->stop_bits) {
    1806:	2600      	movs	r6, #0
    1808:	e7db      	b.n	17c2 <uart_nrfx_configure+0xe>
	switch (baudrate) {
    180a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    180e:	d058      	beq.n	18c2 <uart_nrfx_configure+0x10e>
    1810:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1814:	d1f4      	bne.n	1800 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    1816:	4b35      	ldr	r3, [pc, #212]	; (18ec <uart_nrfx_configure+0x138>)
    1818:	e039      	b.n	188e <uart_nrfx_configure+0xda>
	switch (baudrate) {
    181a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    181e:	d053      	beq.n	18c8 <uart_nrfx_configure+0x114>
    1820:	d807      	bhi.n	1832 <uart_nrfx_configure+0x7e>
    1822:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1826:	d051      	beq.n	18cc <uart_nrfx_configure+0x118>
    1828:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    182c:	d1e8      	bne.n	1800 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    182e:	4b30      	ldr	r3, [pc, #192]	; (18f0 <uart_nrfx_configure+0x13c>)
    1830:	e02d      	b.n	188e <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1832:	f647 2512 	movw	r5, #31250	; 0x7a12
    1836:	42ab      	cmp	r3, r5
    1838:	d1e2      	bne.n	1800 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    183a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    183e:	e026      	b.n	188e <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1840:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1844:	d045      	beq.n	18d2 <uart_nrfx_configure+0x11e>
    1846:	d811      	bhi.n	186c <uart_nrfx_configure+0xb8>
    1848:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    184c:	d043      	beq.n	18d6 <uart_nrfx_configure+0x122>
    184e:	d808      	bhi.n	1862 <uart_nrfx_configure+0xae>
    1850:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    1854:	42ab      	cmp	r3, r5
    1856:	d040      	beq.n	18da <uart_nrfx_configure+0x126>
    1858:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    185c:	d1d0      	bne.n	1800 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    185e:	4b25      	ldr	r3, [pc, #148]	; (18f4 <uart_nrfx_configure+0x140>)
    1860:	e015      	b.n	188e <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1862:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1866:	d1cb      	bne.n	1800 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    1868:	4b23      	ldr	r3, [pc, #140]	; (18f8 <uart_nrfx_configure+0x144>)
    186a:	e010      	b.n	188e <uart_nrfx_configure+0xda>
	switch (baudrate) {
    186c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1870:	d036      	beq.n	18e0 <uart_nrfx_configure+0x12c>
    1872:	d807      	bhi.n	1884 <uart_nrfx_configure+0xd0>
    1874:	4d21      	ldr	r5, [pc, #132]	; (18fc <uart_nrfx_configure+0x148>)
    1876:	42ab      	cmp	r3, r5
    1878:	d034      	beq.n	18e4 <uart_nrfx_configure+0x130>
    187a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    187e:	d1bf      	bne.n	1800 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    1880:	4b1f      	ldr	r3, [pc, #124]	; (1900 <uart_nrfx_configure+0x14c>)
    1882:	e004      	b.n	188e <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1884:	4d1f      	ldr	r5, [pc, #124]	; (1904 <uart_nrfx_configure+0x150>)
    1886:	42ab      	cmp	r3, r5
    1888:	d1ba      	bne.n	1800 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    188a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    188e:	4d1e      	ldr	r5, [pc, #120]	; (1908 <uart_nrfx_configure+0x154>)
                    | (uint32_t)p_cfg->hwfc;
    1890:	4334      	orrs	r4, r6
    1892:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    1894:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1898:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    189c:	68c3      	ldr	r3, [r0, #12]
    189e:	c903      	ldmia	r1, {r0, r1}
    18a0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    18a4:	2000      	movs	r0, #0
}
    18a6:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    18a8:	4b18      	ldr	r3, [pc, #96]	; (190c <uart_nrfx_configure+0x158>)
    18aa:	e7f0      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    18ac:	4b18      	ldr	r3, [pc, #96]	; (1910 <uart_nrfx_configure+0x15c>)
    18ae:	e7ee      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    18b0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    18b4:	e7eb      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    18b6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    18ba:	e7e8      	b.n	188e <uart_nrfx_configure+0xda>
	switch (baudrate) {
    18bc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    18c0:	e7e5      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    18c2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    18c6:	e7e2      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    18c8:	4b12      	ldr	r3, [pc, #72]	; (1914 <uart_nrfx_configure+0x160>)
    18ca:	e7e0      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    18cc:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    18d0:	e7dd      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    18d2:	4b11      	ldr	r3, [pc, #68]	; (1918 <uart_nrfx_configure+0x164>)
    18d4:	e7db      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    18d6:	4b11      	ldr	r3, [pc, #68]	; (191c <uart_nrfx_configure+0x168>)
    18d8:	e7d9      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    18da:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    18de:	e7d6      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    18e0:	4b0f      	ldr	r3, [pc, #60]	; (1920 <uart_nrfx_configure+0x16c>)
    18e2:	e7d4      	b.n	188e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    18e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    18e8:	e7d1      	b.n	188e <uart_nrfx_configure+0xda>
    18ea:	bf00      	nop
    18ec:	0013b000 	.word	0x0013b000
    18f0:	004ea000 	.word	0x004ea000
    18f4:	00ebf000 	.word	0x00ebf000
    18f8:	01d7e000 	.word	0x01d7e000
    18fc:	0003d090 	.word	0x0003d090
    1900:	075f7000 	.word	0x075f7000
    1904:	000f4240 	.word	0x000f4240
    1908:	40002000 	.word	0x40002000
    190c:	009d5000 	.word	0x009d5000
    1910:	00275000 	.word	0x00275000
    1914:	0075f000 	.word	0x0075f000
    1918:	03afb000 	.word	0x03afb000
    191c:	013a9000 	.word	0x013a9000
    1920:	0ebed000 	.word	0x0ebed000

00001924 <uart_nrfx_poll_out>:
{
    1924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1926:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    1928:	f001 ff10 	bl	374c <k_is_in_isr>
    192c:	4d19      	ldr	r5, [pc, #100]	; (1994 <uart_nrfx_poll_out+0x70>)
    192e:	bb70      	cbnz	r0, 198e <uart_nrfx_poll_out+0x6a>
    1930:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1932:	2701      	movs	r7, #1
    1934:	f3bf 8f5b 	dmb	ish
    1938:	e855 3f00 	ldrex	r3, [r5]
    193c:	2b00      	cmp	r3, #0
    193e:	d103      	bne.n	1948 <uart_nrfx_poll_out+0x24>
    1940:	e845 7200 	strex	r2, r7, [r5]
    1944:	2a00      	cmp	r2, #0
    1946:	d1f7      	bne.n	1938 <uart_nrfx_poll_out+0x14>
    1948:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    194c:	d007      	beq.n	195e <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    194e:	2021      	movs	r0, #33	; 0x21
    1950:	2100      	movs	r1, #0
    1952:	3c01      	subs	r4, #1
    1954:	f000 ff84 	bl	2860 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    1958:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    195c:	d1ea      	bne.n	1934 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    195e:	4c0e      	ldr	r4, [pc, #56]	; (1998 <uart_nrfx_poll_out+0x74>)
    1960:	2200      	movs	r2, #0
    1962:	6022      	str	r2, [r4, #0]
    1964:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1966:	4a0d      	ldr	r2, [pc, #52]	; (199c <uart_nrfx_poll_out+0x78>)
    1968:	2101      	movs	r1, #1
    196a:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    196c:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    1970:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1974:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    1976:	b923      	cbnz	r3, 1982 <uart_nrfx_poll_out+0x5e>
    1978:	2001      	movs	r0, #1
    197a:	f001 fde6 	bl	354a <nrfx_busy_wait>
    197e:	3e01      	subs	r6, #1
    1980:	d1f8      	bne.n	1974 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1982:	4b07      	ldr	r3, [pc, #28]	; (19a0 <uart_nrfx_poll_out+0x7c>)
    1984:	2201      	movs	r2, #1
    1986:	601a      	str	r2, [r3, #0]
	*lock = 0;
    1988:	2300      	movs	r3, #0
    198a:	602b      	str	r3, [r5, #0]
}
    198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    198e:	2301      	movs	r3, #1
    1990:	602b      	str	r3, [r5, #0]
    1992:	e7e4      	b.n	195e <uart_nrfx_poll_out+0x3a>
    1994:	20000314 	.word	0x20000314
    1998:	4000211c 	.word	0x4000211c
    199c:	40002008 	.word	0x40002008
    19a0:	4000200c 	.word	0x4000200c

000019a4 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    19a4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    19a8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    19aa:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    19ac:	4b04      	ldr	r3, [pc, #16]	; (19c0 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    19ae:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    19b2:	bf18      	it	ne
    19b4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    19b8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    19ba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    19be:	4770      	bx	lr
    19c0:	50000300 	.word	0x50000300

000019c4 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    19c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    19c6:	4c18      	ldr	r4, [pc, #96]	; (1a28 <uart_nrfx_init+0x64>)
    19c8:	2600      	movs	r6, #0
    19ca:	4605      	mov	r5, r0
    19cc:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_gpio_pin_set(pin_number);
    19d0:	2006      	movs	r0, #6
    19d2:	f7ff ffe7 	bl	19a4 <nrf_gpio_pin_set>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19d6:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000

	/* Setting default height state of the TX PIN to avoid glitches
	 * on the line during peripheral activation/deactivation.
	 */
	nrf_gpio_pin_write(TX_PIN, 1);
	nrf_gpio_cfg_output(TX_PIN);
    19da:	2006      	movs	r0, #6
    19dc:	f001 fd45 	bl	346a <nrf_gpio_cfg_output>
    p_reg->PSEL.RXD = pselrxd;
    19e0:	2308      	movs	r3, #8
    19e2:	f8c7 6720 	str.w	r6, [r7, #1824]	; 0x720
    19e6:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    19ea:	2306      	movs	r3, #6
    19ec:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        nrf_gpio_pin_set(pin_number);
    19f0:	2005      	movs	r0, #5
    19f2:	f7ff ffd7 	bl	19a4 <nrf_gpio_pin_set>
	if (HAS_PROP(rts_pin)) {
		/* Setting default height state of the RTS PIN to avoid glitches
		 * on the line during peripheral activation/deactivation.
		 */
		nrf_gpio_pin_write(RTS_PIN, 1);
		nrf_gpio_cfg_output(RTS_PIN);
    19f6:	2005      	movs	r0, #5
    19f8:	f001 fd37 	bl	346a <nrf_gpio_cfg_output>
    p_reg->PSEL.RTS = pselrts;
    19fc:	2305      	movs	r3, #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19fe:	f8c7 671c 	str.w	r6, [r7, #1820]	; 0x71c
    1a02:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1a06:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1a08:	68e9      	ldr	r1, [r5, #12]
    1a0a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1a0e:	4628      	mov	r0, r5
    1a10:	f7ff fed0 	bl	17b4 <uart_nrfx_configure>
	if (err) {
    1a14:	b938      	cbnz	r0, 1a26 <uart_nrfx_init+0x62>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    1a16:	2304      	movs	r3, #4
    1a18:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1a1c:	4b03      	ldr	r3, [pc, #12]	; (1a2c <uart_nrfx_init+0x68>)
    1a1e:	6018      	str	r0, [r3, #0]
    1a20:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1a22:	2301      	movs	r3, #1
    1a24:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    1a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a28:	40002000 	.word	0x40002000
    1a2c:	40002108 	.word	0x40002108

00001a30 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1a30:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1a32:	794b      	ldrb	r3, [r1, #5]
    1a34:	2b01      	cmp	r3, #1
    1a36:	d029      	beq.n	1a8c <uarte_nrfx_configure+0x5c>
    1a38:	2b03      	cmp	r3, #3
    1a3a:	d124      	bne.n	1a86 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1a3c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1a3e:	798b      	ldrb	r3, [r1, #6]
    1a40:	2b03      	cmp	r3, #3
    1a42:	d120      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1a44:	79cc      	ldrb	r4, [r1, #7]
    1a46:	b124      	cbz	r4, 1a52 <uarte_nrfx_configure+0x22>
    1a48:	2c01      	cmp	r4, #1
    1a4a:	d11c      	bne.n	1a86 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1a4c:	6843      	ldr	r3, [r0, #4]
    1a4e:	791b      	ldrb	r3, [r3, #4]
    1a50:	b1cb      	cbz	r3, 1a86 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1a52:	790a      	ldrb	r2, [r1, #4]
    1a54:	b112      	cbz	r2, 1a5c <uarte_nrfx_configure+0x2c>
    1a56:	2a02      	cmp	r2, #2
    1a58:	d115      	bne.n	1a86 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1a5a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1a5c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1a5e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1a60:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1a64:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1a66:	d064      	beq.n	1b32 <uarte_nrfx_configure+0x102>
    1a68:	d82d      	bhi.n	1ac6 <uarte_nrfx_configure+0x96>
    1a6a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1a6e:	d063      	beq.n	1b38 <uarte_nrfx_configure+0x108>
    1a70:	d816      	bhi.n	1aa0 <uarte_nrfx_configure+0x70>
    1a72:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1a76:	d061      	beq.n	1b3c <uarte_nrfx_configure+0x10c>
    1a78:	d80a      	bhi.n	1a90 <uarte_nrfx_configure+0x60>
    1a7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1a7e:	d060      	beq.n	1b42 <uarte_nrfx_configure+0x112>
    1a80:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1a84:	d060      	beq.n	1b48 <uarte_nrfx_configure+0x118>
    1a86:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1a8a:	e051      	b.n	1b30 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    1a8c:	2600      	movs	r6, #0
    1a8e:	e7d6      	b.n	1a3e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1a90:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1a94:	d05b      	beq.n	1b4e <uarte_nrfx_configure+0x11e>
    1a96:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1a9a:	d1f4      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1a9c:	4b36      	ldr	r3, [pc, #216]	; (1b78 <uarte_nrfx_configure+0x148>)
    1a9e:	e03c      	b.n	1b1a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1aa0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1aa4:	d056      	beq.n	1b54 <uarte_nrfx_configure+0x124>
    1aa6:	d807      	bhi.n	1ab8 <uarte_nrfx_configure+0x88>
    1aa8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1aac:	d054      	beq.n	1b58 <uarte_nrfx_configure+0x128>
    1aae:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1ab2:	d1e8      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1ab4:	4b31      	ldr	r3, [pc, #196]	; (1b7c <uarte_nrfx_configure+0x14c>)
    1ab6:	e030      	b.n	1b1a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1ab8:	f647 2712 	movw	r7, #31250	; 0x7a12
    1abc:	42bb      	cmp	r3, r7
    1abe:	d1e2      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1ac0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1ac4:	e029      	b.n	1b1a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1ac6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1aca:	d047      	beq.n	1b5c <uarte_nrfx_configure+0x12c>
    1acc:	d813      	bhi.n	1af6 <uarte_nrfx_configure+0xc6>
    1ace:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1ad2:	d046      	beq.n	1b62 <uarte_nrfx_configure+0x132>
    1ad4:	d809      	bhi.n	1aea <uarte_nrfx_configure+0xba>
    1ad6:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1ada:	42bb      	cmp	r3, r7
    1adc:	d043      	beq.n	1b66 <uarte_nrfx_configure+0x136>
    1ade:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1ae2:	d1d0      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1ae4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1ae8:	e017      	b.n	1b1a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1aea:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1aee:	d1ca      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1af0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1af4:	e011      	b.n	1b1a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1af6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1afa:	d037      	beq.n	1b6c <uarte_nrfx_configure+0x13c>
    1afc:	d808      	bhi.n	1b10 <uarte_nrfx_configure+0xe0>
    1afe:	4f20      	ldr	r7, [pc, #128]	; (1b80 <uarte_nrfx_configure+0x150>)
    1b00:	42bb      	cmp	r3, r7
    1b02:	d036      	beq.n	1b72 <uarte_nrfx_configure+0x142>
    1b04:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1b08:	d1bd      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1b0a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1b0e:	e004      	b.n	1b1a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1b10:	4f1c      	ldr	r7, [pc, #112]	; (1b84 <uarte_nrfx_configure+0x154>)
    1b12:	42bb      	cmp	r3, r7
    1b14:	d1b7      	bne.n	1a86 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1b16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1b1a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1b1e:	68c3      	ldr	r3, [r0, #12]
    1b20:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    1b22:	4334      	orrs	r4, r6
    1b24:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1b26:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1b2a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1b2e:	2000      	movs	r0, #0
}
    1b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1b32:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1b36:	e7f0      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1b38:	4b13      	ldr	r3, [pc, #76]	; (1b88 <uarte_nrfx_configure+0x158>)
    1b3a:	e7ee      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1b3c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1b40:	e7eb      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    1b42:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1b46:	e7e8      	b.n	1b1a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1b48:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1b4c:	e7e5      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1b4e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1b52:	e7e2      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1b54:	4b0d      	ldr	r3, [pc, #52]	; (1b8c <uarte_nrfx_configure+0x15c>)
    1b56:	e7e0      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1b58:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <uarte_nrfx_configure+0x160>)
    1b5a:	e7de      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1b5c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1b60:	e7db      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1b62:	4b0c      	ldr	r3, [pc, #48]	; (1b94 <uarte_nrfx_configure+0x164>)
    1b64:	e7d9      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1b66:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1b6a:	e7d6      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1b6c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1b70:	e7d3      	b.n	1b1a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1b72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1b76:	e7d0      	b.n	1b1a <uarte_nrfx_configure+0xea>
    1b78:	0013b000 	.word	0x0013b000
    1b7c:	004ea000 	.word	0x004ea000
    1b80:	0003d090 	.word	0x0003d090
    1b84:	000f4240 	.word	0x000f4240
    1b88:	00275000 	.word	0x00275000
    1b8c:	0075c000 	.word	0x0075c000
    1b90:	003af000 	.word	0x003af000
    1b94:	013a9000 	.word	0x013a9000

00001b98 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    1b98:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    1b9c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1b9e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    1ba0:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1ba2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    1ba6:	bf18      	it	ne
    1ba8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1bac:	2103      	movs	r1, #3
    1bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1bb2:	4770      	bx	lr
    1bb4:	50000300 	.word	0x50000300

00001bb8 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    1bb8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    1bbc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1bbe:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    1bc0:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1bc2:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    1bc6:	bf18      	it	ne
    1bc8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1bcc:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    1bce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    1bd2:	4770      	bx	lr
    1bd4:	50000300 	.word	0x50000300

00001bd8 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    1bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    1bda:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1bdc:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    1bde:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1be0:	2700      	movs	r7, #0
UART_NRF_UARTE_DEVICE(1);
    1be2:	4605      	mov	r5, r0
    1be4:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
        nrf_gpio_pin_set(pin_number);
    1be8:	2022      	movs	r0, #34	; 0x22
    1bea:	f7ff ffe5 	bl	1bb8 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
    1bee:	2022      	movs	r0, #34	; 0x22
    1bf0:	f7ff ffd2 	bl	1b98 <nrf_gpio_cfg_output>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1bf4:	4b11      	ldr	r3, [pc, #68]	; (1c3c <uarte_1_init+0x64>)
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1bf6:	68e9      	ldr	r1, [r5, #12]
    1bf8:	f8c3 7704 	str.w	r7, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
    1bfc:	2322      	movs	r3, #34	; 0x22
    1bfe:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    1c02:	2321      	movs	r3, #33	; 0x21
    1c04:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
    1c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1c0c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    1c10:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
    1c12:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1c16:	f7ff ff0b 	bl	1a30 <uarte_nrfx_configure>
	if (err) {
    1c1a:	b968      	cbnz	r0, 1c38 <uarte_1_init+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1c1c:	2308      	movs	r3, #8
    1c1e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c22:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    1c26:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1c2a:	360c      	adds	r6, #12
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1c2c:	2301      	movs	r3, #1
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1c2e:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1c32:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c36:	6023      	str	r3, [r4, #0]
UART_NRF_UARTE_DEVICE(1);
    1c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c3a:	bf00      	nop
    1c3c:	50000300 	.word	0x50000300

00001c40 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1c40:	4b03      	ldr	r3, [pc, #12]	; (1c50 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    1c42:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    1c44:	f1a0 0308 	sub.w	r3, r0, #8
    1c48:	4258      	negs	r0, r3
    1c4a:	4158      	adcs	r0, r3
    1c4c:	4770      	bx	lr
    1c4e:	bf00      	nop
    1c50:	10000130 	.word	0x10000130

00001c54 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	2b08      	cmp	r3, #8
    1c5a:	d106      	bne.n	1c6a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    1c5c:	4b05      	ldr	r3, [pc, #20]	; (1c74 <nrf52_errata_103+0x20>)
    1c5e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    1c60:	2b03      	cmp	r3, #3
    1c62:	d802      	bhi.n	1c6a <nrf52_errata_103+0x16>
    1c64:	4a04      	ldr	r2, [pc, #16]	; (1c78 <nrf52_errata_103+0x24>)
    1c66:	5cd0      	ldrb	r0, [r2, r3]
    1c68:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    1c6a:	2000      	movs	r0, #0
    #endif
}
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop
    1c70:	10000130 	.word	0x10000130
    1c74:	10000134 	.word	0x10000134
    1c78:	00003b41 	.word	0x00003b41

00001c7c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    1c7c:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
    1c7e:	f7ff ffdf 	bl	1c40 <nrf52_errata_136>
    1c82:	b140      	cbz	r0, 1c96 <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
    1c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c88:	2200      	movs	r2, #0
    1c8a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    1c8e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    1c92:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
    1c96:	f7ff ffd3 	bl	1c40 <nrf52_errata_136>
    1c9a:	2800      	cmp	r0, #0
    1c9c:	d046      	beq.n	1d2c <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1ca2:	4b58      	ldr	r3, [pc, #352]	; (1e04 <SystemInit+0x188>)
    1ca4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1ca8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1cac:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1cb0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1cb4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1cb8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1cbc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1cc0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    1cc4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1cc8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1ccc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1cd0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    1cd4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1cd8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1cdc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1ce0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    1ce4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1ce8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1cec:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1cf0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1cf4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1cf8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1cfc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1d00:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    1d04:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1d08:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    1d0c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1d10:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1d14:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    1d18:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    1d1c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    1d20:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1d24:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    1d28:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
    1d2c:	f7ff ff92 	bl	1c54 <nrf52_errata_103>
    1d30:	b110      	cbz	r0, 1d38 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    1d32:	4b35      	ldr	r3, [pc, #212]	; (1e08 <SystemInit+0x18c>)
    1d34:	4a35      	ldr	r2, [pc, #212]	; (1e0c <SystemInit+0x190>)
    1d36:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
    1d38:	f7ff ff8c 	bl	1c54 <nrf52_errata_103>
    1d3c:	b118      	cbz	r0, 1d46 <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    1d3e:	4b34      	ldr	r3, [pc, #208]	; (1e10 <SystemInit+0x194>)
    1d40:	22fb      	movs	r2, #251	; 0xfb
    1d42:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
    1d46:	f7ff ff85 	bl	1c54 <nrf52_errata_103>
    1d4a:	b148      	cbz	r0, 1d60 <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
    1d4c:	4931      	ldr	r1, [pc, #196]	; (1e14 <SystemInit+0x198>)
    1d4e:	4b32      	ldr	r3, [pc, #200]	; (1e18 <SystemInit+0x19c>)
    1d50:	680a      	ldr	r2, [r1, #0]
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	f022 020f 	bic.w	r2, r2, #15
    1d58:	f003 030f 	and.w	r3, r3, #15
    1d5c:	4313      	orrs	r3, r2
    1d5e:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
    1d60:	f7ff ff78 	bl	1c54 <nrf52_errata_103>
    1d64:	b118      	cbz	r0, 1d6e <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    1d66:	4b2d      	ldr	r3, [pc, #180]	; (1e1c <SystemInit+0x1a0>)
    1d68:	f44f 7200 	mov.w	r2, #512	; 0x200
    1d6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
    1d6e:	f7ff ff67 	bl	1c40 <nrf52_errata_136>
    1d72:	b148      	cbz	r0, 1d88 <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    1d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d78:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1d7c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    1d7e:	bf44      	itt	mi
    1d80:	f06f 0201 	mvnmi.w	r2, #1
    1d84:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1d88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1d8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1d90:	2a00      	cmp	r2, #0
    1d92:	db03      	blt.n	1d9c <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    1d94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1d98:	2b00      	cmp	r3, #0
    1d9a:	da2f      	bge.n	1dfc <SystemInit+0x180>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1d9c:	4b20      	ldr	r3, [pc, #128]	; (1e20 <SystemInit+0x1a4>)
    1d9e:	2201      	movs	r2, #1
    1da0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1da4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1da8:	2a00      	cmp	r2, #0
    1daa:	d0fb      	beq.n	1da4 <SystemInit+0x128>
            NRF_UICR->PSELRESET[0] = 18;
    1dac:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1db0:	2112      	movs	r1, #18
    1db2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1db6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1dba:	2a00      	cmp	r2, #0
    1dbc:	d0fb      	beq.n	1db6 <SystemInit+0x13a>
            NRF_UICR->PSELRESET[1] = 18;
    1dbe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1dc2:	2212      	movs	r2, #18
    1dc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1dc8:	4b15      	ldr	r3, [pc, #84]	; (1e20 <SystemInit+0x1a4>)
    1dca:	461a      	mov	r2, r3
    1dcc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1dd0:	2900      	cmp	r1, #0
    1dd2:	d0fb      	beq.n	1dcc <SystemInit+0x150>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1dd4:	2100      	movs	r1, #0
    1dd6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1dda:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1dde:	2b00      	cmp	r3, #0
    1de0:	d0fb      	beq.n	1dda <SystemInit+0x15e>
  __ASM volatile ("dsb 0xF":::"memory");
    1de2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1de6:	490f      	ldr	r1, [pc, #60]	; (1e24 <SystemInit+0x1a8>)
    1de8:	4b0f      	ldr	r3, [pc, #60]	; (1e28 <SystemInit+0x1ac>)
    1dea:	68ca      	ldr	r2, [r1, #12]
    1dec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1df0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1df2:	60cb      	str	r3, [r1, #12]
    1df4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1df8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1dfa:	e7fd      	b.n	1df8 <SystemInit+0x17c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    1dfc:	4b0b      	ldr	r3, [pc, #44]	; (1e2c <SystemInit+0x1b0>)
    1dfe:	4a0c      	ldr	r2, [pc, #48]	; (1e30 <SystemInit+0x1b4>)
    1e00:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    1e02:	bd08      	pop	{r3, pc}
    1e04:	4000c000 	.word	0x4000c000
    1e08:	4000568c 	.word	0x4000568c
    1e0c:	00038148 	.word	0x00038148
    1e10:	4000f000 	.word	0x4000f000
    1e14:	40000ee4 	.word	0x40000ee4
    1e18:	10000258 	.word	0x10000258
    1e1c:	40029640 	.word	0x40029640
    1e20:	4001e000 	.word	0x4001e000
    1e24:	e000ed00 	.word	0xe000ed00
    1e28:	05fa0004 	.word	0x05fa0004
    1e2c:	20000020 	.word	0x20000020
    1e30:	03d09000 	.word	0x03d09000

00001e34 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    1e34:	4b04      	ldr	r3, [pc, #16]	; (1e48 <nrfx_clock_init+0x14>)
    1e36:	791a      	ldrb	r2, [r3, #4]
    1e38:	b922      	cbnz	r2, 1e44 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    1e3a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    1e3c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    1e3e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    1e40:	4802      	ldr	r0, [pc, #8]	; (1e4c <nrfx_clock_init+0x18>)
    1e42:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    1e44:	4802      	ldr	r0, [pc, #8]	; (1e50 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    1e46:	4770      	bx	lr
    1e48:	20000318 	.word	0x20000318
    1e4c:	0bad0000 	.word	0x0bad0000
    1e50:	0bad000c 	.word	0x0bad000c

00001e54 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    1e54:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    1e56:	2000      	movs	r0, #0
    1e58:	f7ff f806 	bl	e68 <arch_irq_is_enabled>
    1e5c:	b908      	cbnz	r0, 1e62 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    1e5e:	f7fe fff3 	bl	e48 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    1e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e66:	2301      	movs	r3, #1
    1e68:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    1e6c:	4a01      	ldr	r2, [pc, #4]	; (1e74 <nrfx_clock_enable+0x20>)
    1e6e:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    1e70:	bd08      	pop	{r3, pc}
    1e72:	bf00      	nop
    1e74:	2000077e 	.word	0x2000077e

00001e78 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    1e78:	b110      	cbz	r0, 1e80 <nrfx_clock_start+0x8>
    1e7a:	2801      	cmp	r0, #1
    1e7c:	d00b      	beq.n	1e96 <nrfx_clock_start+0x1e>
    1e7e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e80:	4b0a      	ldr	r3, [pc, #40]	; (1eac <nrfx_clock_start+0x34>)
    1e82:	6018      	str	r0, [r3, #0]
    1e84:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    1e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e8a:	2202      	movs	r2, #2
    1e8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e90:	2201      	movs	r2, #1
    1e92:	609a      	str	r2, [r3, #8]
}
    1e94:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e96:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <nrfx_clock_start+0x38>)
    1e98:	2200      	movs	r2, #0
    1e9a:	601a      	str	r2, [r3, #0]
    1e9c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    1e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ea2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1ea6:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    1ea8:	4770      	bx	lr
    1eaa:	bf00      	nop
    1eac:	40000104 	.word	0x40000104
    1eb0:	40000100 	.word	0x40000100

00001eb4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    1eb4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    1eb6:	b110      	cbz	r0, 1ebe <nrfx_clock_stop+0xa>
    1eb8:	2801      	cmp	r0, #1
    1eba:	d018      	beq.n	1eee <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    1ebc:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    1ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ec2:	2202      	movs	r2, #2
    1ec4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1ec8:	4a18      	ldr	r2, [pc, #96]	; (1f2c <nrfx_clock_stop+0x78>)
    1eca:	6010      	str	r0, [r2, #0]
    1ecc:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1ece:	4a18      	ldr	r2, [pc, #96]	; (1f30 <nrfx_clock_stop+0x7c>)
    1ed0:	2101      	movs	r1, #1
    1ed2:	6011      	str	r1, [r2, #0]
    1ed4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1ed8:	461c      	mov	r4, r3
    1eda:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    1ede:	03db      	lsls	r3, r3, #15
    1ee0:	d5ec      	bpl.n	1ebc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    1ee2:	2001      	movs	r0, #1
    1ee4:	f001 fb31 	bl	354a <nrfx_busy_wait>
    1ee8:	3d01      	subs	r5, #1
    1eea:	d1f6      	bne.n	1eda <nrfx_clock_stop+0x26>
    1eec:	e7e6      	b.n	1ebc <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1eee:	4b11      	ldr	r3, [pc, #68]	; (1f34 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    1ef0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1ef4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    1ef6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1efa:	601a      	str	r2, [r3, #0]
    1efc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1efe:	4b0e      	ldr	r3, [pc, #56]	; (1f38 <nrfx_clock_stop+0x84>)
    1f00:	f242 7510 	movw	r5, #10000	; 0x2710
    1f04:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1f06:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1f0a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    1f0e:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1f10:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1f14:	d505      	bpl.n	1f22 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    1f16:	b123      	cbz	r3, 1f22 <nrfx_clock_stop+0x6e>
    1f18:	2001      	movs	r0, #1
    1f1a:	f001 fb16 	bl	354a <nrfx_busy_wait>
    1f1e:	3d01      	subs	r5, #1
    1f20:	d1f1      	bne.n	1f06 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    1f22:	4b06      	ldr	r3, [pc, #24]	; (1f3c <nrfx_clock_stop+0x88>)
    1f24:	2200      	movs	r2, #0
    1f26:	715a      	strb	r2, [r3, #5]
    1f28:	e7c8      	b.n	1ebc <nrfx_clock_stop+0x8>
    1f2a:	bf00      	nop
    1f2c:	40000104 	.word	0x40000104
    1f30:	4000000c 	.word	0x4000000c
    1f34:	40000100 	.word	0x40000100
    1f38:	40000004 	.word	0x40000004
    1f3c:	20000318 	.word	0x20000318

00001f40 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1f40:	4b11      	ldr	r3, [pc, #68]	; (1f88 <nrfx_clock_irq_handler+0x48>)
    1f42:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    1f44:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    1f46:	b16a      	cbz	r2, 1f64 <nrfx_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f48:	2200      	movs	r2, #0
    1f4a:	601a      	str	r2, [r3, #0]
    1f4c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    1f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f52:	2201      	movs	r2, #1
    1f54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    1f58:	4b0c      	ldr	r3, [pc, #48]	; (1f8c <nrfx_clock_irq_handler+0x4c>)
    1f5a:	7958      	ldrb	r0, [r3, #5]
    1f5c:	b910      	cbnz	r0, 1f64 <nrfx_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    1f5e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1f64:	4b0a      	ldr	r3, [pc, #40]	; (1f90 <nrfx_clock_irq_handler+0x50>)
    1f66:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    1f68:	b16a      	cbz	r2, 1f86 <nrfx_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f6a:	2200      	movs	r2, #0
    1f6c:	601a      	str	r2, [r3, #0]
    1f6e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    1f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f74:	2202      	movs	r2, #2
    1f76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    1f7a:	4b04      	ldr	r3, [pc, #16]	; (1f8c <nrfx_clock_irq_handler+0x4c>)
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    1f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    1f80:	681b      	ldr	r3, [r3, #0]
    1f82:	2001      	movs	r0, #1
    1f84:	4718      	bx	r3
}
    1f86:	bd10      	pop	{r4, pc}
    1f88:	40000100 	.word	0x40000100
    1f8c:	20000318 	.word	0x20000318
    1f90:	40000104 	.word	0x40000104

00001f94 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    1f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    1f98:	b510      	push	{r4, lr}
    1f9a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    1f9e:	0762      	lsls	r2, r4, #29
    1fa0:	d507      	bpl.n	1fb2 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    1fa2:	f44f 7084 	mov.w	r0, #264	; 0x108
    1fa6:	f001 fad2 	bl	354e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    1faa:	b110      	cbz	r0, 1fb2 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    1fac:	4b1e      	ldr	r3, [pc, #120]	; (2028 <nrfx_power_irq_handler+0x94>)
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    1fb2:	06a3      	lsls	r3, r4, #26
    1fb4:	d508      	bpl.n	1fc8 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    1fb6:	f44f 708a 	mov.w	r0, #276	; 0x114
    1fba:	f001 fac8 	bl	354e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    1fbe:	b118      	cbz	r0, 1fc8 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    1fc0:	4b1a      	ldr	r3, [pc, #104]	; (202c <nrfx_power_irq_handler+0x98>)
    1fc2:	2000      	movs	r0, #0
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    1fc8:	0660      	lsls	r0, r4, #25
    1fca:	d508      	bpl.n	1fde <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    1fcc:	f44f 708c 	mov.w	r0, #280	; 0x118
    1fd0:	f001 fabd 	bl	354e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    1fd4:	b118      	cbz	r0, 1fde <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    1fd6:	4b15      	ldr	r3, [pc, #84]	; (202c <nrfx_power_irq_handler+0x98>)
    1fd8:	2001      	movs	r0, #1
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    1fde:	0621      	lsls	r1, r4, #24
    1fe0:	d508      	bpl.n	1ff4 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    1fe2:	f44f 708e 	mov.w	r0, #284	; 0x11c
    1fe6:	f001 fab2 	bl	354e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    1fea:	b118      	cbz	r0, 1ff4 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    1fec:	4b10      	ldr	r3, [pc, #64]	; (2030 <nrfx_power_irq_handler+0x9c>)
    1fee:	2000      	movs	r0, #0
    1ff0:	681b      	ldr	r3, [r3, #0]
    1ff2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    1ff4:	05e2      	lsls	r2, r4, #23
    1ff6:	d508      	bpl.n	200a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    1ff8:	f44f 7090 	mov.w	r0, #288	; 0x120
    1ffc:	f001 faa7 	bl	354e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    2000:	b118      	cbz	r0, 200a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    2002:	4b0b      	ldr	r3, [pc, #44]	; (2030 <nrfx_power_irq_handler+0x9c>)
    2004:	2001      	movs	r0, #1
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    200a:	05a3      	lsls	r3, r4, #22
    200c:	d50a      	bpl.n	2024 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    200e:	f44f 7092 	mov.w	r0, #292	; 0x124
    2012:	f001 fa9c 	bl	354e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    2016:	b128      	cbz	r0, 2024 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    2018:	4b05      	ldr	r3, [pc, #20]	; (2030 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    201a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	2002      	movs	r0, #2
    2022:	4718      	bx	r3
}
    2024:	bd10      	pop	{r4, pc}
    2026:	bf00      	nop
    2028:	20000320 	.word	0x20000320
    202c:	20000324 	.word	0x20000324
    2030:	20000328 	.word	0x20000328

00002034 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2036:	4b09      	ldr	r3, [pc, #36]	; (205c <z_sys_init_run_level+0x28>)
    2038:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    203c:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->api = NULL;
    203e:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2040:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2044:	42a6      	cmp	r6, r4
    2046:	d800      	bhi.n	204a <z_sys_init_run_level+0x16>
			}
		}
	}
}
    2048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    204a:	e9d4 3500 	ldrd	r3, r5, [r4]
    204e:	4628      	mov	r0, r5
    2050:	4798      	blx	r3
		if (retval != 0) {
    2052:	b108      	cbz	r0, 2058 <z_sys_init_run_level+0x24>
			if (dev) {
    2054:	b105      	cbz	r5, 2058 <z_sys_init_run_level+0x24>
				dev->api = NULL;
    2056:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2058:	3408      	adds	r4, #8
    205a:	e7f3      	b.n	2044 <z_sys_init_run_level+0x10>
    205c:	00003aa4 	.word	0x00003aa4

00002060 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    2060:	4b0f      	ldr	r3, [pc, #60]	; (20a0 <z_impl_device_get_binding+0x40>)
{
    2062:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    2064:	4c0f      	ldr	r4, [pc, #60]	; (20a4 <z_impl_device_get_binding+0x44>)
{
    2066:	4605      	mov	r5, r0
    2068:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    206a:	429c      	cmp	r4, r3
    206c:	d104      	bne.n	2078 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    206e:	4c0d      	ldr	r4, [pc, #52]	; (20a4 <z_impl_device_get_binding+0x44>)
    2070:	42b4      	cmp	r4, r6
    2072:	d108      	bne.n	2086 <z_impl_device_get_binding+0x26>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    2074:	2400      	movs	r4, #0
    2076:	e010      	b.n	209a <z_impl_device_get_binding+0x3a>
		if (z_device_ready(dev) && (dev->name == name)) {
    2078:	68a2      	ldr	r2, [r4, #8]
    207a:	b112      	cbz	r2, 2082 <z_impl_device_get_binding+0x22>
    207c:	6822      	ldr	r2, [r4, #0]
    207e:	42aa      	cmp	r2, r5
    2080:	d00b      	beq.n	209a <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    2082:	3410      	adds	r4, #16
    2084:	e7f1      	b.n	206a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2086:	68a3      	ldr	r3, [r4, #8]
    2088:	b90b      	cbnz	r3, 208e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    208a:	3410      	adds	r4, #16
    208c:	e7f0      	b.n	2070 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    208e:	6821      	ldr	r1, [r4, #0]
    2090:	4628      	mov	r0, r5
    2092:	f001 f8ca 	bl	322a <strcmp>
    2096:	2800      	cmp	r0, #0
    2098:	d1f7      	bne.n	208a <z_impl_device_get_binding+0x2a>
}
    209a:	4620      	mov	r0, r4
    209c:	bd70      	pop	{r4, r5, r6, pc}
    209e:	bf00      	nop
    20a0:	2000008c 	.word	0x2000008c
    20a4:	2000002c 	.word	0x2000002c

000020a8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    20a8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    20aa:	4d0b      	ldr	r5, [pc, #44]	; (20d8 <idle+0x30>)
	__asm__ volatile(
    20ac:	f04f 0220 	mov.w	r2, #32
    20b0:	f3ef 8311 	mrs	r3, BASEPRI
    20b4:	f382 8811 	msr	BASEPRI, r2
    20b8:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    20bc:	f001 fb64 	bl	3788 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    20c0:	2101      	movs	r1, #1
    20c2:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
    20c4:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    20c6:	bfd8      	it	le
    20c8:	4608      	movle	r0, r1
    20ca:	f001 fb6d 	bl	37a8 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    20ce:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    20d0:	f7fe ff2a 	bl	f28 <arch_cpu_idle>
}
    20d4:	e7ea      	b.n	20ac <idle+0x4>
    20d6:	bf00      	nop
    20d8:	2000032c 	.word	0x2000032c

000020dc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    20dc:	4802      	ldr	r0, [pc, #8]	; (20e8 <z_bss_zero+0xc>)
    20de:	4a03      	ldr	r2, [pc, #12]	; (20ec <z_bss_zero+0x10>)
    20e0:	2100      	movs	r1, #0
    20e2:	1a12      	subs	r2, r2, r0
    20e4:	f001 b8d8 	b.w	3298 <memset>
    20e8:	200000b8 	.word	0x200000b8
    20ec:	20000780 	.word	0x20000780

000020f0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    20f0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    20f2:	4806      	ldr	r0, [pc, #24]	; (210c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    20f4:	4a06      	ldr	r2, [pc, #24]	; (2110 <z_data_copy+0x20>)
    20f6:	4907      	ldr	r1, [pc, #28]	; (2114 <z_data_copy+0x24>)
    20f8:	1a12      	subs	r2, r2, r0
    20fa:	f001 f8a2 	bl	3242 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    20fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    2102:	4a05      	ldr	r2, [pc, #20]	; (2118 <z_data_copy+0x28>)
    2104:	4905      	ldr	r1, [pc, #20]	; (211c <z_data_copy+0x2c>)
    2106:	4806      	ldr	r0, [pc, #24]	; (2120 <z_data_copy+0x30>)
    2108:	f001 b89b 	b.w	3242 <memcpy>
    210c:	20000000 	.word	0x20000000
    2110:	200000b4 	.word	0x200000b4
    2114:	00003b94 	.word	0x00003b94
    2118:	00000000 	.word	0x00000000
    211c:	00003b94 	.word	0x00003b94
    2120:	20000000 	.word	0x20000000

00002124 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2124:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    2126:	4b0c      	ldr	r3, [pc, #48]	; (2158 <bg_thread_main+0x34>)
    2128:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    212a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    212c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    212e:	f7ff ff81 	bl	2034 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    2132:	4a0a      	ldr	r2, [pc, #40]	; (215c <bg_thread_main+0x38>)
    2134:	490a      	ldr	r1, [pc, #40]	; (2160 <bg_thread_main+0x3c>)
    2136:	480b      	ldr	r0, [pc, #44]	; (2164 <bg_thread_main+0x40>)
    2138:	f000 fe10 	bl	2d5c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    213c:	2003      	movs	r0, #3
    213e:	f7ff ff79 	bl	2034 <z_sys_init_run_level>

	z_init_static_threads();
    2142:	f000 fc2d 	bl	29a0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    2146:	f7fe f957 	bl	3f8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    214a:	4a07      	ldr	r2, [pc, #28]	; (2168 <bg_thread_main+0x44>)
    214c:	7b13      	ldrb	r3, [r2, #12]
    214e:	f023 0301 	bic.w	r3, r3, #1
    2152:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2154:	bd08      	pop	{r3, pc}
    2156:	bf00      	nop
    2158:	2000077f 	.word	0x2000077f
    215c:	00003b8c 	.word	0x00003b8c
    2160:	00003b45 	.word	0x00003b45
    2164:	00003b66 	.word	0x00003b66
    2168:	20000138 	.word	0x20000138

0000216c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    216c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    2170:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2268 <z_cstart+0xfc>
    2174:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2176:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    217a:	4d33      	ldr	r5, [pc, #204]	; (2248 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
    217c:	4e33      	ldr	r6, [pc, #204]	; (224c <z_cstart+0xe0>)
    217e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2180:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 226c <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
    2184:	4f32      	ldr	r7, [pc, #200]	; (2250 <z_cstart+0xe4>)
    2186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    218a:	2400      	movs	r4, #0
    218c:	616b      	str	r3, [r5, #20]
    218e:	23e0      	movs	r3, #224	; 0xe0
    2190:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2194:	77ec      	strb	r4, [r5, #31]
    2196:	762c      	strb	r4, [r5, #24]
    2198:	766c      	strb	r4, [r5, #25]
    219a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    219c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    219e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    21a2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    21a4:	f7fe fff6 	bl	1194 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    21a8:	f7fe feb8 	bl	f1c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    21ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    21b0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    21b2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    21b4:	4d27      	ldr	r5, [pc, #156]	; (2254 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    21b6:	f240 1301 	movw	r3, #257	; 0x101
    21ba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    21be:	ab06      	add	r3, sp, #24
    21c0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    21c2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    21c4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    21c8:	f7ff ff34 	bl	2034 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    21cc:	2001      	movs	r0, #1
    21ce:	f7ff ff31 	bl	2034 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    21d2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    21d6:	f000 fae9 	bl	27ac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    21da:	4b1f      	ldr	r3, [pc, #124]	; (2258 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    21dc:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    21de:	491f      	ldr	r1, [pc, #124]	; (225c <z_cstart+0xf0>)
    21e0:	9305      	str	r3, [sp, #20]
    21e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    21e6:	4653      	mov	r3, sl
    21e8:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    21ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
    21f0:	9400      	str	r4, [sp, #0]
    21f2:	4630      	mov	r0, r6
    21f4:	f000 fba4 	bl	2940 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    21f8:	7b73      	ldrb	r3, [r6, #13]
    21fa:	4680      	mov	r8, r0
    21fc:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    2200:	4630      	mov	r0, r6
    2202:	7373      	strb	r3, [r6, #13]
    2204:	f001 f9ff 	bl	3606 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2208:	230f      	movs	r3, #15
    220a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    220e:	4914      	ldr	r1, [pc, #80]	; (2260 <z_cstart+0xf4>)
    2210:	4b14      	ldr	r3, [pc, #80]	; (2264 <z_cstart+0xf8>)
    2212:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2216:	e9cd b404 	strd	fp, r4, [sp, #16]
    221a:	e9cd 4400 	strd	r4, r4, [sp]
    221e:	4638      	mov	r0, r7
    2220:	f000 fb8e 	bl	2940 <z_setup_new_thread>
    2224:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2226:	60ef      	str	r7, [r5, #12]
    2228:	f023 0304 	bic.w	r3, r3, #4
    222c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    222e:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    2232:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    2236:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    2238:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    223c:	4652      	mov	r2, sl
    223e:	4641      	mov	r1, r8
    2240:	4630      	mov	r0, r6
    2242:	f7fe fe53 	bl	eec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2246:	bf00      	nop
    2248:	e000ed00 	.word	0xe000ed00
    224c:	20000138 	.word	0x20000138
    2250:	200000b8 	.word	0x200000b8
    2254:	2000032c 	.word	0x2000032c
    2258:	00003b8d 	.word	0x00003b8d
    225c:	20000780 	.word	0x20000780
    2260:	20000b80 	.word	0x20000b80
    2264:	000020a9 	.word	0x000020a9
    2268:	200014c0 	.word	0x200014c0
    226c:	00002125 	.word	0x00002125

00002270 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2270:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2272:	4c08      	ldr	r4, [pc, #32]	; (2294 <z_reset_time_slice+0x24>)
    2274:	6823      	ldr	r3, [r4, #0]
    2276:	b15b      	cbz	r3, 2290 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2278:	f7fe fd4e 	bl	d18 <z_clock_elapsed>
    227c:	4603      	mov	r3, r0
    227e:	6820      	ldr	r0, [r4, #0]
    2280:	4a05      	ldr	r2, [pc, #20]	; (2298 <z_reset_time_slice+0x28>)
    2282:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    2284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2288:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    228a:	2100      	movs	r1, #0
    228c:	f001 ba8c 	b.w	37a8 <z_set_timeout_expiry>
}
    2290:	bd10      	pop	{r4, pc}
    2292:	bf00      	nop
    2294:	20000364 	.word	0x20000364
    2298:	2000032c 	.word	0x2000032c

0000229c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    229e:	4605      	mov	r5, r0
    22a0:	460c      	mov	r4, r1
    22a2:	f04f 0320 	mov.w	r3, #32
    22a6:	f3ef 8611 	mrs	r6, BASEPRI
    22aa:	f383 8811 	msr	BASEPRI, r3
    22ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    22b2:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <k_sched_time_slice_set+0x4c>)
    22b4:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    22b6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    22ba:	f240 30e7 	movw	r0, #999	; 0x3e7
    22be:	2100      	movs	r1, #0
    22c0:	611a      	str	r2, [r3, #16]
    22c2:	fbe7 0105 	umlal	r0, r1, r7, r5
    22c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    22ca:	2300      	movs	r3, #0
    22cc:	f7fd ff18 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    22d0:	4b06      	ldr	r3, [pc, #24]	; (22ec <k_sched_time_slice_set+0x50>)
    22d2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    22d4:	4b06      	ldr	r3, [pc, #24]	; (22f0 <k_sched_time_slice_set+0x54>)
    22d6:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    22d8:	f7ff ffca 	bl	2270 <z_reset_time_slice>
	__asm__ volatile(
    22dc:	f386 8811 	msr	BASEPRI, r6
    22e0:	f3bf 8f6f 	isb	sy
	}
}
    22e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22e6:	bf00      	nop
    22e8:	2000032c 	.word	0x2000032c
    22ec:	20000364 	.word	0x20000364
    22f0:	20000360 	.word	0x20000360

000022f4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    22f4:	b949      	cbnz	r1, 230a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    22f6:	f3ef 8005 	mrs	r0, IPSR
    22fa:	b930      	cbnz	r0, 230a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    22fc:	4b05      	ldr	r3, [pc, #20]	; (2314 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    22fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2300:	689b      	ldr	r3, [r3, #8]
    2302:	429a      	cmp	r2, r3
    2304:	d001      	beq.n	230a <z_reschedule+0x16>
	ret = arch_swap(key);
    2306:	f7fe bd51 	b.w	dac <arch_swap>
    230a:	f381 8811 	msr	BASEPRI, r1
    230e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    2312:	4770      	bx	lr
    2314:	2000032c 	.word	0x2000032c

00002318 <k_sched_lock>:
	__asm__ volatile(
    2318:	f04f 0320 	mov.w	r3, #32
    231c:	f3ef 8111 	mrs	r1, BASEPRI
    2320:	f383 8811 	msr	BASEPRI, r3
    2324:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2328:	4b04      	ldr	r3, [pc, #16]	; (233c <k_sched_lock+0x24>)
    232a:	689a      	ldr	r2, [r3, #8]
    232c:	7bd3      	ldrb	r3, [r2, #15]
    232e:	3b01      	subs	r3, #1
    2330:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2332:	f381 8811 	msr	BASEPRI, r1
    2336:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    233a:	4770      	bx	lr
    233c:	2000032c 	.word	0x2000032c

00002340 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2340:	4b09      	ldr	r3, [pc, #36]	; (2368 <z_priq_dumb_remove+0x28>)
    2342:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2346:	4282      	cmp	r2, r0
    2348:	d105      	bne.n	2356 <z_priq_dumb_remove+0x16>
    234a:	689b      	ldr	r3, [r3, #8]
    234c:	428b      	cmp	r3, r1
    234e:	d102      	bne.n	2356 <z_priq_dumb_remove+0x16>
    2350:	7b4b      	ldrb	r3, [r1, #13]
    2352:	06db      	lsls	r3, r3, #27
    2354:	d106      	bne.n	2364 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2356:	e9d1 3200 	ldrd	r3, r2, [r1]
    235a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    235c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    235e:	2300      	movs	r3, #0
	node->prev = NULL;
    2360:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2364:	4770      	bx	lr
    2366:	bf00      	nop
    2368:	2000032c 	.word	0x2000032c

0000236c <update_cache>:
{
    236c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    236e:	4c10      	ldr	r4, [pc, #64]	; (23b0 <update_cache+0x44>)
{
    2370:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2372:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2376:	f001 f93c 	bl	35f2 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    237a:	68a3      	ldr	r3, [r4, #8]
    237c:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    237e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    2380:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    2382:	bf44      	itt	mi
    2384:	f041 0108 	orrmi.w	r1, r1, #8
    2388:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    238a:	b905      	cbnz	r5, 238e <update_cache+0x22>
    238c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    238e:	b94e      	cbnz	r6, 23a4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    2390:	7b5a      	ldrb	r2, [r3, #13]
    2392:	06d2      	lsls	r2, r2, #27
    2394:	d106      	bne.n	23a4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2396:	69aa      	ldr	r2, [r5, #24]
    2398:	b922      	cbnz	r2, 23a4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    239a:	89da      	ldrh	r2, [r3, #14]
    239c:	2a7f      	cmp	r2, #127	; 0x7f
    239e:	d901      	bls.n	23a4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    23a0:	6263      	str	r3, [r4, #36]	; 0x24
}
    23a2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    23a4:	42ab      	cmp	r3, r5
    23a6:	d001      	beq.n	23ac <update_cache+0x40>
			z_reset_time_slice();
    23a8:	f7ff ff62 	bl	2270 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    23ac:	6265      	str	r5, [r4, #36]	; 0x24
}
    23ae:	e7f8      	b.n	23a2 <update_cache+0x36>
    23b0:	2000032c 	.word	0x2000032c

000023b4 <k_sched_unlock>:
{
    23b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    23b6:	f04f 0320 	mov.w	r3, #32
    23ba:	f3ef 8411 	mrs	r4, BASEPRI
    23be:	f383 8811 	msr	BASEPRI, r3
    23c2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    23c6:	4b08      	ldr	r3, [pc, #32]	; (23e8 <k_sched_unlock+0x34>)
    23c8:	689a      	ldr	r2, [r3, #8]
    23ca:	7bd3      	ldrb	r3, [r2, #15]
    23cc:	3301      	adds	r3, #1
    23ce:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    23d0:	2000      	movs	r0, #0
    23d2:	f7ff ffcb 	bl	236c <update_cache>
	__asm__ volatile(
    23d6:	f384 8811 	msr	BASEPRI, r4
    23da:	f3bf 8f6f 	isb	sy
}
    23de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    23e2:	f001 b8fc 	b.w	35de <z_reschedule_unlocked>
    23e6:	bf00      	nop
    23e8:	2000032c 	.word	0x2000032c

000023ec <ready_thread>:
{
    23ec:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    23ee:	7b43      	ldrb	r3, [r0, #13]
    23f0:	06db      	lsls	r3, r3, #27
    23f2:	d12a      	bne.n	244a <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    23f4:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    23f6:	bb43      	cbnz	r3, 244a <ready_thread+0x5e>
	return list->head == list;
    23f8:	4a15      	ldr	r2, [pc, #84]	; (2450 <ready_thread+0x64>)
    23fa:	4611      	mov	r1, r2
    23fc:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2400:	428c      	cmp	r4, r1
    2402:	bf18      	it	ne
    2404:	4623      	movne	r3, r4
    2406:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2408:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    240a:	bf38      	it	cc
    240c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    240e:	b1b3      	cbz	r3, 243e <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    2410:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2414:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2418:	42ae      	cmp	r6, r5
    241a:	db03      	blt.n	2424 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    241c:	42a3      	cmp	r3, r4
    241e:	d00e      	beq.n	243e <ready_thread+0x52>
    2420:	681b      	ldr	r3, [r3, #0]
    2422:	e7f4      	b.n	240e <ready_thread+0x22>
	node->prev = successor->prev;
    2424:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2426:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    242a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    242c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    242e:	7b43      	ldrb	r3, [r0, #13]
    2430:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2434:	7343      	strb	r3, [r0, #13]
}
    2436:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2438:	2000      	movs	r0, #0
    243a:	f7ff bf97 	b.w	236c <update_cache>
	node->prev = list->tail;
    243e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    2442:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2444:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2446:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    2448:	e7f1      	b.n	242e <ready_thread+0x42>
}
    244a:	bc70      	pop	{r4, r5, r6}
    244c:	4770      	bx	lr
    244e:	bf00      	nop
    2450:	2000032c 	.word	0x2000032c

00002454 <z_sched_start>:
{
    2454:	b510      	push	{r4, lr}
	__asm__ volatile(
    2456:	f04f 0220 	mov.w	r2, #32
    245a:	f3ef 8411 	mrs	r4, BASEPRI
    245e:	f382 8811 	msr	BASEPRI, r2
    2462:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2466:	7b42      	ldrb	r2, [r0, #13]
    2468:	0751      	lsls	r1, r2, #29
    246a:	d404      	bmi.n	2476 <z_sched_start+0x22>
	__asm__ volatile(
    246c:	f384 8811 	msr	BASEPRI, r4
    2470:	f3bf 8f6f 	isb	sy
}
    2474:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2476:	f022 0204 	bic.w	r2, r2, #4
    247a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    247c:	f7ff ffb6 	bl	23ec <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2480:	4621      	mov	r1, r4
    2482:	4802      	ldr	r0, [pc, #8]	; (248c <z_sched_start+0x38>)
}
    2484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2488:	f7ff bf34 	b.w	22f4 <z_reschedule>
    248c:	20000780 	.word	0x20000780

00002490 <z_move_thread_to_end_of_prio_q>:
{
    2490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2492:	4601      	mov	r1, r0
	__asm__ volatile(
    2494:	f04f 0320 	mov.w	r3, #32
    2498:	f3ef 8411 	mrs	r4, BASEPRI
    249c:	f383 8811 	msr	BASEPRI, r3
    24a0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    24a4:	f990 300d 	ldrsb.w	r3, [r0, #13]
    24a8:	2b00      	cmp	r3, #0
    24aa:	da02      	bge.n	24b2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    24ac:	4819      	ldr	r0, [pc, #100]	; (2514 <z_move_thread_to_end_of_prio_q+0x84>)
    24ae:	f7ff ff47 	bl	2340 <z_priq_dumb_remove>
	return list->head == list;
    24b2:	4a19      	ldr	r2, [pc, #100]	; (2518 <z_move_thread_to_end_of_prio_q+0x88>)
    24b4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    24b6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
    24b8:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    24bc:	4283      	cmp	r3, r0
    24be:	bf08      	it	eq
    24c0:	2300      	moveq	r3, #0
    24c2:	2b00      	cmp	r3, #0
    24c4:	bf38      	it	cc
    24c6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    24c8:	b1eb      	cbz	r3, 2506 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    24ca:	f991 700e 	ldrsb.w	r7, [r1, #14]
    24ce:	f993 600e 	ldrsb.w	r6, [r3, #14]
    24d2:	42b7      	cmp	r7, r6
    24d4:	db03      	blt.n	24de <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    24d6:	429d      	cmp	r5, r3
    24d8:	d015      	beq.n	2506 <z_move_thread_to_end_of_prio_q+0x76>
    24da:	681b      	ldr	r3, [r3, #0]
    24dc:	e7f4      	b.n	24c8 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    24de:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    24e0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    24e4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    24e6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    24e8:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    24ea:	6890      	ldr	r0, [r2, #8]
    24ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    24f0:	734b      	strb	r3, [r1, #13]
    24f2:	1a43      	subs	r3, r0, r1
    24f4:	4258      	negs	r0, r3
    24f6:	4158      	adcs	r0, r3
    24f8:	f7ff ff38 	bl	236c <update_cache>
	__asm__ volatile(
    24fc:	f384 8811 	msr	BASEPRI, r4
    2500:	f3bf 8f6f 	isb	sy
}
    2504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    2506:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    250a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    250c:	6019      	str	r1, [r3, #0]
	list->tail = node;
    250e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    2510:	e7ea      	b.n	24e8 <z_move_thread_to_end_of_prio_q+0x58>
    2512:	bf00      	nop
    2514:	20000354 	.word	0x20000354
    2518:	2000032c 	.word	0x2000032c

0000251c <z_time_slice>:
{
    251c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    251e:	4a15      	ldr	r2, [pc, #84]	; (2574 <z_time_slice+0x58>)
    2520:	4b15      	ldr	r3, [pc, #84]	; (2578 <z_time_slice+0x5c>)
    2522:	6814      	ldr	r4, [r2, #0]
{
    2524:	4601      	mov	r1, r0
	if (pending_current == _current) {
    2526:	6898      	ldr	r0, [r3, #8]
    2528:	42a0      	cmp	r0, r4
    252a:	461c      	mov	r4, r3
    252c:	d103      	bne.n	2536 <z_time_slice+0x1a>
}
    252e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2532:	f7ff be9d 	b.w	2270 <z_reset_time_slice>
	pending_current = NULL;
    2536:	2500      	movs	r5, #0
    2538:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    253a:	4a10      	ldr	r2, [pc, #64]	; (257c <z_time_slice+0x60>)
    253c:	6812      	ldr	r2, [r2, #0]
    253e:	b1b2      	cbz	r2, 256e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2540:	89c2      	ldrh	r2, [r0, #14]
    2542:	2a7f      	cmp	r2, #127	; 0x7f
    2544:	d813      	bhi.n	256e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2546:	4a0e      	ldr	r2, [pc, #56]	; (2580 <z_time_slice+0x64>)
    2548:	f990 500e 	ldrsb.w	r5, [r0, #14]
    254c:	6812      	ldr	r2, [r2, #0]
    254e:	4295      	cmp	r5, r2
    2550:	db0d      	blt.n	256e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    2552:	4a0c      	ldr	r2, [pc, #48]	; (2584 <z_time_slice+0x68>)
    2554:	4290      	cmp	r0, r2
    2556:	d00a      	beq.n	256e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2558:	6982      	ldr	r2, [r0, #24]
    255a:	b942      	cbnz	r2, 256e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    255c:	691a      	ldr	r2, [r3, #16]
    255e:	428a      	cmp	r2, r1
    2560:	dc02      	bgt.n	2568 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2562:	f7ff ff95 	bl	2490 <z_move_thread_to_end_of_prio_q>
    2566:	e7e2      	b.n	252e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    2568:	1a52      	subs	r2, r2, r1
    256a:	611a      	str	r2, [r3, #16]
}
    256c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    256e:	2300      	movs	r3, #0
    2570:	6123      	str	r3, [r4, #16]
    2572:	e7fb      	b.n	256c <z_time_slice+0x50>
    2574:	2000035c 	.word	0x2000035c
    2578:	2000032c 	.word	0x2000032c
    257c:	20000364 	.word	0x20000364
    2580:	20000360 	.word	0x20000360
    2584:	200000b8 	.word	0x200000b8

00002588 <z_impl_k_thread_suspend>:
{
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    258c:	3018      	adds	r0, #24
    258e:	f001 f8e5 	bl	375c <z_abort_timeout>
	__asm__ volatile(
    2592:	f04f 0320 	mov.w	r3, #32
    2596:	f3ef 8611 	mrs	r6, BASEPRI
    259a:	f383 8811 	msr	BASEPRI, r3
    259e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    25a2:	f994 300d 	ldrsb.w	r3, [r4, #13]
    25a6:	2b00      	cmp	r3, #0
    25a8:	da07      	bge.n	25ba <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    25aa:	480f      	ldr	r0, [pc, #60]	; (25e8 <z_impl_k_thread_suspend+0x60>)
    25ac:	4621      	mov	r1, r4
    25ae:	f7ff fec7 	bl	2340 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    25b2:	7b63      	ldrb	r3, [r4, #13]
    25b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    25b8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    25ba:	4d0c      	ldr	r5, [pc, #48]	; (25ec <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    25bc:	7b63      	ldrb	r3, [r4, #13]
    25be:	68a8      	ldr	r0, [r5, #8]
    25c0:	f043 0310 	orr.w	r3, r3, #16
    25c4:	7363      	strb	r3, [r4, #13]
    25c6:	1b03      	subs	r3, r0, r4
    25c8:	4258      	negs	r0, r3
    25ca:	4158      	adcs	r0, r3
    25cc:	f7ff fece 	bl	236c <update_cache>
	__asm__ volatile(
    25d0:	f386 8811 	msr	BASEPRI, r6
    25d4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    25d8:	68ab      	ldr	r3, [r5, #8]
    25da:	42a3      	cmp	r3, r4
    25dc:	d103      	bne.n	25e6 <z_impl_k_thread_suspend+0x5e>
}
    25de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    25e2:	f000 bffc 	b.w	35de <z_reschedule_unlocked>
}
    25e6:	bd70      	pop	{r4, r5, r6, pc}
    25e8:	20000354 	.word	0x20000354
    25ec:	2000032c 	.word	0x2000032c

000025f0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    25f0:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
    25f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25f6:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    25f8:	b103      	cbz	r3, 25fc <z_thread_single_abort+0xc>
		thread->fn_abort();
    25fa:	4798      	blx	r3
    25fc:	f104 0018 	add.w	r0, r4, #24
    2600:	f001 f8ac 	bl	375c <z_abort_timeout>
	__asm__ volatile(
    2604:	f04f 0320 	mov.w	r3, #32
    2608:	f3ef 8611 	mrs	r6, BASEPRI
    260c:	f383 8811 	msr	BASEPRI, r3
    2610:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2614:	7b63      	ldrb	r3, [r4, #13]
    2616:	06d8      	lsls	r0, r3, #27
    2618:	d123      	bne.n	2662 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    261a:	69a2      	ldr	r2, [r4, #24]
    261c:	bb0a      	cbnz	r2, 2662 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    261e:	0619      	lsls	r1, r3, #24
    2620:	d507      	bpl.n	2632 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2622:	481f      	ldr	r0, [pc, #124]	; (26a0 <z_thread_single_abort+0xb0>)
    2624:	4621      	mov	r1, r4
    2626:	f7ff fe8b 	bl	2340 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    262a:	7b63      	ldrb	r3, [r4, #13]
    262c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2630:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2632:	4b1c      	ldr	r3, [pc, #112]	; (26a4 <z_thread_single_abort+0xb4>)
    2634:	6898      	ldr	r0, [r3, #8]
    2636:	1b02      	subs	r2, r0, r4
    2638:	4250      	negs	r0, r2
    263a:	4150      	adcs	r0, r2
    263c:	f7ff fe96 	bl	236c <update_cache>
		thread->base.thread_state |= mask;
    2640:	7b63      	ldrb	r3, [r4, #13]
    2642:	f043 0308 	orr.w	r3, r3, #8
    2646:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2648:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    264c:	2700      	movs	r7, #0
	return list->head == list;
    264e:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2650:	4545      	cmp	r5, r8
    2652:	d000      	beq.n	2656 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2654:	b995      	cbnz	r5, 267c <z_thread_single_abort+0x8c>
	__asm__ volatile(
    2656:	f386 8811 	msr	BASEPRI, r6
    265a:	f3bf 8f6f 	isb	sy
}
    265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    2662:	079b      	lsls	r3, r3, #30
    2664:	d5ec      	bpl.n	2640 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    2666:	68a0      	ldr	r0, [r4, #8]
    2668:	4621      	mov	r1, r4
    266a:	f7ff fe69 	bl	2340 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    266e:	7b63      	ldrb	r3, [r4, #13]
    2670:	f023 0302 	bic.w	r3, r3, #2
    2674:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2676:	2300      	movs	r3, #0
    2678:	60a3      	str	r3, [r4, #8]
    267a:	e7e1      	b.n	2640 <z_thread_single_abort+0x50>
    267c:	f105 0018 	add.w	r0, r5, #24
    2680:	f001 f86c 	bl	375c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2684:	68a8      	ldr	r0, [r5, #8]
    2686:	4629      	mov	r1, r5
    2688:	f7ff fe5a 	bl	2340 <z_priq_dumb_remove>
    268c:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    268e:	60af      	str	r7, [r5, #8]
    2690:	f023 0302 	bic.w	r3, r3, #2
    2694:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2696:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    2698:	4628      	mov	r0, r5
    269a:	f7ff fea7 	bl	23ec <ready_thread>
    269e:	e7d6      	b.n	264e <z_thread_single_abort+0x5e>
    26a0:	20000354 	.word	0x20000354
    26a4:	2000032c 	.word	0x2000032c

000026a8 <unready_thread>:
{
    26a8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    26aa:	f990 300d 	ldrsb.w	r3, [r0, #13]
    26ae:	2b00      	cmp	r3, #0
{
    26b0:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    26b2:	da06      	bge.n	26c2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    26b4:	4807      	ldr	r0, [pc, #28]	; (26d4 <unready_thread+0x2c>)
    26b6:	f7ff fe43 	bl	2340 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    26ba:	7b4b      	ldrb	r3, [r1, #13]
    26bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    26c0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    26c2:	4b05      	ldr	r3, [pc, #20]	; (26d8 <unready_thread+0x30>)
    26c4:	6898      	ldr	r0, [r3, #8]
    26c6:	1a43      	subs	r3, r0, r1
    26c8:	4258      	negs	r0, r3
    26ca:	4158      	adcs	r0, r3
}
    26cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    26d0:	f7ff be4c 	b.w	236c <update_cache>
    26d4:	20000354 	.word	0x20000354
    26d8:	2000032c 	.word	0x2000032c

000026dc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    26dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26de:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    26e0:	f001 f87c 	bl	37dc <z_tick_get_32>
    26e4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    26e6:	f04f 0320 	mov.w	r3, #32
    26ea:	f3ef 8711 	mrs	r7, BASEPRI
    26ee:	f383 8811 	msr	BASEPRI, r3
    26f2:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    26f6:	4e0d      	ldr	r6, [pc, #52]	; (272c <z_tick_sleep.part.0+0x50>)
    26f8:	4b0d      	ldr	r3, [pc, #52]	; (2730 <z_tick_sleep.part.0+0x54>)
    26fa:	68b0      	ldr	r0, [r6, #8]
    26fc:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    26fe:	f000 ffbd 	bl	367c <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    2702:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2704:	490b      	ldr	r1, [pc, #44]	; (2734 <z_tick_sleep.part.0+0x58>)
    2706:	462a      	mov	r2, r5
    2708:	17eb      	asrs	r3, r5, #31
    270a:	3018      	adds	r0, #24
    270c:	f000 f9e4 	bl	2ad8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2710:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2712:	7b53      	ldrb	r3, [r2, #13]
    2714:	f043 0310 	orr.w	r3, r3, #16
    2718:	7353      	strb	r3, [r2, #13]
    271a:	4638      	mov	r0, r7
    271c:	f7fe fb46 	bl	dac <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2720:	f001 f85c 	bl	37dc <z_tick_get_32>
    2724:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    2726:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    272a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    272c:	2000032c 	.word	0x2000032c
    2730:	2000035c 	.word	0x2000035c
    2734:	00003627 	.word	0x00003627

00002738 <pend>:
{
    2738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    273c:	4606      	mov	r6, r0
    273e:	4614      	mov	r4, r2
    2740:	461d      	mov	r5, r3
    2742:	f04f 0320 	mov.w	r3, #32
    2746:	f3ef 8711 	mrs	r7, BASEPRI
    274a:	f383 8811 	msr	BASEPRI, r3
    274e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    2752:	f000 ffa3 	bl	369c <add_to_waitq_locked>
	__asm__ volatile(
    2756:	f387 8811 	msr	BASEPRI, r7
    275a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    275e:	1c6b      	adds	r3, r5, #1
    2760:	bf08      	it	eq
    2762:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    2766:	d008      	beq.n	277a <pend+0x42>
    2768:	4622      	mov	r2, r4
    276a:	462b      	mov	r3, r5
    276c:	f106 0018 	add.w	r0, r6, #24
    2770:	4903      	ldr	r1, [pc, #12]	; (2780 <pend+0x48>)
}
    2772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2776:	f000 b9af 	b.w	2ad8 <z_add_timeout>
    277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    277e:	bf00      	nop
    2780:	00003627 	.word	0x00003627

00002784 <z_pend_curr>:
{
    2784:	b510      	push	{r4, lr}
	pending_current = _current;
    2786:	4b07      	ldr	r3, [pc, #28]	; (27a4 <z_pend_curr+0x20>)
    2788:	6898      	ldr	r0, [r3, #8]
    278a:	4b07      	ldr	r3, [pc, #28]	; (27a8 <z_pend_curr+0x24>)
{
    278c:	460c      	mov	r4, r1
	pending_current = _current;
    278e:	6018      	str	r0, [r3, #0]
{
    2790:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    2792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2796:	f7ff ffcf 	bl	2738 <pend>
    279a:	4620      	mov	r0, r4
}
    279c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    27a0:	f7fe bb04 	b.w	dac <arch_swap>
    27a4:	2000032c 	.word	0x2000032c
    27a8:	2000035c 	.word	0x2000035c

000027ac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    27ac:	4b04      	ldr	r3, [pc, #16]	; (27c0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    27ae:	2100      	movs	r1, #0
    27b0:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    27b4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    27b8:	4608      	mov	r0, r1
    27ba:	f7ff bd6f 	b.w	229c <k_sched_time_slice_set>
    27be:	bf00      	nop
    27c0:	2000032c 	.word	0x2000032c

000027c4 <z_impl_k_yield>:
{
    27c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    27c6:	4c24      	ldr	r4, [pc, #144]	; (2858 <z_impl_k_yield+0x94>)
    27c8:	4b24      	ldr	r3, [pc, #144]	; (285c <z_impl_k_yield+0x98>)
    27ca:	68a2      	ldr	r2, [r4, #8]
    27cc:	429a      	cmp	r2, r3
    27ce:	d030      	beq.n	2832 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    27d0:	f04f 0320 	mov.w	r3, #32
    27d4:	f3ef 8511 	mrs	r5, BASEPRI
    27d8:	f383 8811 	msr	BASEPRI, r3
    27dc:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    27e0:	68a1      	ldr	r1, [r4, #8]
    27e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    27e6:	f7ff fdab 	bl	2340 <z_priq_dumb_remove>
	return list->head == list;
    27ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    27ec:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    27ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    27f0:	4283      	cmp	r3, r0
    27f2:	bf08      	it	eq
    27f4:	2300      	moveq	r3, #0
    27f6:	2b00      	cmp	r3, #0
    27f8:	bf38      	it	cc
    27fa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    27fc:	b32b      	cbz	r3, 284a <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    27fe:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2802:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2806:	42b7      	cmp	r7, r6
    2808:	db03      	blt.n	2812 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    280a:	428b      	cmp	r3, r1
    280c:	d01d      	beq.n	284a <z_impl_k_yield+0x86>
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	e7f4      	b.n	27fc <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    2812:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2814:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    2818:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    281a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    281c:	7b53      	ldrb	r3, [r2, #13]
    281e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2822:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    2824:	2001      	movs	r0, #1
    2826:	f7ff fda1 	bl	236c <update_cache>
	__asm__ volatile(
    282a:	f385 8811 	msr	BASEPRI, r5
    282e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2832:	f04f 0320 	mov.w	r3, #32
    2836:	f3ef 8011 	mrs	r0, BASEPRI
    283a:	f383 8811 	msr	BASEPRI, r3
    283e:	f3bf 8f6f 	isb	sy
}
    2842:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2846:	f7fe bab1 	b.w	dac <arch_swap>
	node->prev = list->tail;
    284a:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    284e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2850:	601a      	str	r2, [r3, #0]
	list->tail = node;
    2852:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    2854:	e7e2      	b.n	281c <z_impl_k_yield+0x58>
    2856:	bf00      	nop
    2858:	2000032c 	.word	0x2000032c
    285c:	200000b8 	.word	0x200000b8

00002860 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    2860:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2862:	3301      	adds	r3, #1
    2864:	bf08      	it	eq
    2866:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    286a:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    286c:	d106      	bne.n	287c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    286e:	4b0b      	ldr	r3, [pc, #44]	; (289c <z_impl_k_sleep+0x3c>)
    2870:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2872:	f7ff fe89 	bl	2588 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    2876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    287a:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    287c:	4604      	mov	r4, r0
	if (ticks == 0) {
    287e:	b948      	cbnz	r0, 2894 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    2880:	f7ff ffa0 	bl	27c4 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    2884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2888:	fb84 3400 	smull	r3, r4, r4, r0
    288c:	0bd8      	lsrs	r0, r3, #15
    288e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2892:	e7f2      	b.n	287a <z_impl_k_sleep+0x1a>
    2894:	f7ff ff22 	bl	26dc <z_tick_sleep.part.0>
    2898:	4604      	mov	r4, r0
    289a:	e7f3      	b.n	2884 <z_impl_k_sleep+0x24>
    289c:	2000032c 	.word	0x2000032c

000028a0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    28a0:	4b01      	ldr	r3, [pc, #4]	; (28a8 <z_impl_k_current_get+0x8>)
    28a2:	6898      	ldr	r0, [r3, #8]
    28a4:	4770      	bx	lr
    28a6:	bf00      	nop
    28a8:	2000032c 	.word	0x2000032c

000028ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    28ac:	b538      	push	{r3, r4, r5, lr}
    28ae:	4604      	mov	r4, r0
    28b0:	f04f 0320 	mov.w	r3, #32
    28b4:	f3ef 8511 	mrs	r5, BASEPRI
    28b8:	f383 8811 	msr	BASEPRI, r3
    28bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    28c0:	f000 ff17 	bl	36f2 <z_unpend_first_thread>

	if (thread != NULL) {
    28c4:	b148      	cbz	r0, 28da <z_impl_k_sem_give+0x2e>
    28c6:	2200      	movs	r2, #0
    28c8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    28ca:	f000 fe9c 	bl	3606 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    28ce:	4629      	mov	r1, r5
    28d0:	4805      	ldr	r0, [pc, #20]	; (28e8 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    28d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    28d6:	f7ff bd0d 	b.w	22f4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    28da:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    28de:	429a      	cmp	r2, r3
    28e0:	bf18      	it	ne
    28e2:	3301      	addne	r3, #1
    28e4:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    28e6:	e7f2      	b.n	28ce <z_impl_k_sem_give+0x22>
    28e8:	20000780 	.word	0x20000780

000028ec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    28ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    28ee:	4614      	mov	r4, r2
    28f0:	461d      	mov	r5, r3
    28f2:	f04f 0320 	mov.w	r3, #32
    28f6:	f3ef 8111 	mrs	r1, BASEPRI
    28fa:	f383 8811 	msr	BASEPRI, r3
    28fe:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    2902:	6883      	ldr	r3, [r0, #8]
    2904:	b143      	cbz	r3, 2918 <z_impl_k_sem_take+0x2c>
		sem->count--;
    2906:	3b01      	subs	r3, #1
    2908:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    290a:	f381 8811 	msr	BASEPRI, r1
    290e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2912:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    2914:	b003      	add	sp, #12
    2916:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2918:	ea54 0305 	orrs.w	r3, r4, r5
    291c:	d106      	bne.n	292c <z_impl_k_sem_take+0x40>
    291e:	f381 8811 	msr	BASEPRI, r1
    2922:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2926:	f06f 000f 	mvn.w	r0, #15
    292a:	e7f3      	b.n	2914 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    292c:	4602      	mov	r2, r0
    292e:	e9cd 4500 	strd	r4, r5, [sp]
    2932:	4802      	ldr	r0, [pc, #8]	; (293c <z_impl_k_sem_take+0x50>)
    2934:	f7ff ff26 	bl	2784 <z_pend_curr>
	return ret;
    2938:	e7ec      	b.n	2914 <z_impl_k_sem_take+0x28>
    293a:	bf00      	nop
    293c:	20000780 	.word	0x20000780

00002940 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2940:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    2944:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    2948:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    294c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    294e:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    2950:	2504      	movs	r5, #4
    2952:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2954:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
    2956:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    2958:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    295a:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
    295c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    295e:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    2962:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    2966:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
    296a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    296c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    296e:	9202      	str	r2, [sp, #8]
    2970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2972:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    2974:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    297a:	9200      	str	r2, [sp, #0]
    297c:	4642      	mov	r2, r8
{
    297e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2980:	f7fe fa98 	bl	eb4 <arch_new_thread>
	if (!_current) {
    2984:	4b05      	ldr	r3, [pc, #20]	; (299c <z_setup_new_thread+0x5c>)
    2986:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    2988:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    298c:	b103      	cbz	r3, 2990 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    2990:	6763      	str	r3, [r4, #116]	; 0x74
}
    2992:	4640      	mov	r0, r8
    2994:	b004      	add	sp, #16
    2996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    299a:	bf00      	nop
    299c:	2000032c 	.word	0x2000032c

000029a0 <z_init_static_threads>:
{
    29a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    29a4:	4e2a      	ldr	r6, [pc, #168]	; (2a50 <z_init_static_threads+0xb0>)
    29a6:	4d2b      	ldr	r5, [pc, #172]	; (2a54 <z_init_static_threads+0xb4>)
{
    29a8:	b086      	sub	sp, #24
    29aa:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    29ac:	42b5      	cmp	r5, r6
    29ae:	f105 0430 	add.w	r4, r5, #48	; 0x30
    29b2:	d310      	bcc.n	29d6 <z_init_static_threads+0x36>
	k_sched_lock();
    29b4:	f7ff fcb0 	bl	2318 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    29b8:	4c26      	ldr	r4, [pc, #152]	; (2a54 <z_init_static_threads+0xb4>)
    29ba:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2a58 <z_init_static_threads+0xb8>
    29be:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    29c2:	f240 36e7 	movw	r6, #999	; 0x3e7
    29c6:	2700      	movs	r7, #0
    29c8:	4544      	cmp	r4, r8
    29ca:	d321      	bcc.n	2a10 <z_init_static_threads+0x70>
}
    29cc:	b006      	add	sp, #24
    29ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    29d2:	f7ff bcef 	b.w	23b4 <k_sched_unlock>
		z_setup_new_thread(
    29d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    29da:	9305      	str	r3, [sp, #20]
    29dc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    29e0:	9304      	str	r3, [sp, #16]
    29e2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    29e6:	9303      	str	r3, [sp, #12]
    29e8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    29ec:	9302      	str	r3, [sp, #8]
    29ee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    29f2:	9301      	str	r3, [sp, #4]
    29f4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    29f8:	9300      	str	r3, [sp, #0]
    29fa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    29fe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2a02:	f7ff ff9d 	bl	2940 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2a06:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2a0a:	65dd      	str	r5, [r3, #92]	; 0x5c
    2a0c:	4625      	mov	r5, r4
    2a0e:	e7cd      	b.n	29ac <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2a12:	1c5a      	adds	r2, r3, #1
    2a14:	d00d      	beq.n	2a32 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    2a16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2a1a:	4630      	mov	r0, r6
    2a1c:	4639      	mov	r1, r7
    2a1e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2a22:	42b9      	cmp	r1, r7
    2a24:	bf08      	it	eq
    2a26:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    2a28:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2a2a:	d104      	bne.n	2a36 <z_init_static_threads+0x96>
	z_sched_start(thread);
    2a2c:	4628      	mov	r0, r5
    2a2e:	f7ff fd11 	bl	2454 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2a32:	3430      	adds	r4, #48	; 0x30
    2a34:	e7c8      	b.n	29c8 <z_init_static_threads+0x28>
    2a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a3a:	2300      	movs	r3, #0
    2a3c:	f7fd fb60 	bl	100 <__aeabi_uldivmod>
    2a40:	4602      	mov	r2, r0
    2a42:	460b      	mov	r3, r1
    2a44:	f105 0018 	add.w	r0, r5, #24
    2a48:	4651      	mov	r1, sl
    2a4a:	f000 f845 	bl	2ad8 <z_add_timeout>
    2a4e:	e7f0      	b.n	2a32 <z_init_static_threads+0x92>
    2a50:	2000008c 	.word	0x2000008c
    2a54:	2000008c 	.word	0x2000008c
    2a58:	00003627 	.word	0x00003627

00002a5c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2a5c:	4b03      	ldr	r3, [pc, #12]	; (2a6c <elapsed+0x10>)
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	b90b      	cbnz	r3, 2a66 <elapsed+0xa>
    2a62:	f7fe b959 	b.w	d18 <z_clock_elapsed>
}
    2a66:	2000      	movs	r0, #0
    2a68:	4770      	bx	lr
    2a6a:	bf00      	nop
    2a6c:	20000368 	.word	0x20000368

00002a70 <remove_timeout>:
{
    2a70:	b530      	push	{r4, r5, lr}
    2a72:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2a74:	b168      	cbz	r0, 2a92 <remove_timeout+0x22>
    2a76:	4a0a      	ldr	r2, [pc, #40]	; (2aa0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    2a78:	6852      	ldr	r2, [r2, #4]
    2a7a:	4290      	cmp	r0, r2
    2a7c:	d009      	beq.n	2a92 <remove_timeout+0x22>
	if (next(t) != NULL) {
    2a7e:	b143      	cbz	r3, 2a92 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    2a80:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    2a84:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    2a88:	1912      	adds	r2, r2, r4
    2a8a:	eb45 0101 	adc.w	r1, r5, r1
    2a8e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    2a92:	6842      	ldr	r2, [r0, #4]
    2a94:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2a96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2a98:	2300      	movs	r3, #0
	node->prev = NULL;
    2a9a:	e9c0 3300 	strd	r3, r3, [r0]
}
    2a9e:	bd30      	pop	{r4, r5, pc}
    2aa0:	20000024 	.word	0x20000024

00002aa4 <next_timeout>:
	return list->head == list;
    2aa4:	4b0a      	ldr	r3, [pc, #40]	; (2ad0 <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
    2aa6:	b510      	push	{r4, lr}
    2aa8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2aaa:	429c      	cmp	r4, r3
    2aac:	bf08      	it	eq
    2aae:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    2ab0:	f7ff ffd4 	bl	2a5c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2ab4:	b144      	cbz	r4, 2ac8 <next_timeout+0x24>
    2ab6:	6923      	ldr	r3, [r4, #16]
    2ab8:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2aba:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <next_timeout+0x30>)
    2abc:	691b      	ldr	r3, [r3, #16]
    2abe:	b113      	cbz	r3, 2ac6 <next_timeout+0x22>
    2ac0:	4298      	cmp	r0, r3
    2ac2:	bfa8      	it	ge
    2ac4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2ac6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2ac8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2acc:	e7f5      	b.n	2aba <next_timeout+0x16>
    2ace:	bf00      	nop
    2ad0:	20000024 	.word	0x20000024
    2ad4:	2000032c 	.word	0x2000032c

00002ad8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2adc:	9101      	str	r1, [sp, #4]
    2ade:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2ae0:	1c4b      	adds	r3, r1, #1
    2ae2:	bf08      	it	eq
    2ae4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    2ae8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2aea:	d06c      	beq.n	2bc6 <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    2aec:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2aee:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    2af2:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2af6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    2afa:	ebb3 0804 	subs.w	r8, r3, r4
    2afe:	eb6b 0905 	sbc.w	r9, fp, r5
    2b02:	f1b8 0f00 	cmp.w	r8, #0
    2b06:	f179 0300 	sbcs.w	r3, r9, #0
    2b0a:	db0f      	blt.n	2b2c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    2b0c:	f7ff ffa6 	bl	2a5c <elapsed>
    2b10:	4a33      	ldr	r2, [pc, #204]	; (2be0 <z_add_timeout+0x108>)
    2b12:	e9d2 1c00 	ldrd	r1, ip, [r2]
    2b16:	f06f 0301 	mvn.w	r3, #1
    2b1a:	1a5b      	subs	r3, r3, r1
    2b1c:	eb6b 020c 	sbc.w	r2, fp, ip
    2b20:	1b1e      	subs	r6, r3, r4
    2b22:	eb62 0705 	sbc.w	r7, r2, r5
    2b26:	1a34      	subs	r4, r6, r0
    2b28:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2b2c:	9b01      	ldr	r3, [sp, #4]
    2b2e:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
    2b32:	f04f 0320 	mov.w	r3, #32
    2b36:	f3ef 8611 	mrs	r6, BASEPRI
    2b3a:	f383 8811 	msr	BASEPRI, r3
    2b3e:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2b42:	f7ff ff8b 	bl	2a5c <elapsed>
	ticks = MAX(1, ticks);
    2b46:	2c01      	cmp	r4, #1
    2b48:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    2b4c:	4b25      	ldr	r3, [pc, #148]	; (2be4 <z_add_timeout+0x10c>)
    2b4e:	bfb8      	it	lt
    2b50:	2401      	movlt	r4, #1
    2b52:	681a      	ldr	r2, [r3, #0]
    2b54:	bfb8      	it	lt
    2b56:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    2b58:	1824      	adds	r4, r4, r0
    2b5a:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b5e:	429a      	cmp	r2, r3
    2b60:	e9ca 4504 	strd	r4, r5, [sl, #16]
    2b64:	d001      	beq.n	2b6a <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2b66:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2b68:	b952      	cbnz	r2, 2b80 <z_add_timeout+0xa8>
	node->prev = list->tail;
    2b6a:	685a      	ldr	r2, [r3, #4]
    2b6c:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    2b70:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2b72:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    2b76:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    2b7a:	f8c3 a004 	str.w	sl, [r3, #4]
}
    2b7e:	e014      	b.n	2baa <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
    2b80:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    2b84:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    2b88:	454d      	cmp	r5, r9
    2b8a:	bf08      	it	eq
    2b8c:	4544      	cmpeq	r4, r8
    2b8e:	d21d      	bcs.n	2bcc <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
    2b90:	ebb8 0004 	subs.w	r0, r8, r4
    2b94:	eb69 0105 	sbc.w	r1, r9, r5
    2b98:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    2b9c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2b9e:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    2ba2:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    2ba6:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    2baa:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2bac:	429a      	cmp	r2, r3
    2bae:	d006      	beq.n	2bbe <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2bb0:	4592      	cmp	sl, r2
    2bb2:	d104      	bne.n	2bbe <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
    2bb4:	f7ff ff76 	bl	2aa4 <next_timeout>
    2bb8:	2100      	movs	r1, #0
    2bba:	f7fe f84b 	bl	c54 <z_clock_set_timeout>
	__asm__ volatile(
    2bbe:	f386 8811 	msr	BASEPRI, r6
    2bc2:	f3bf 8f6f 	isb	sy
		}
	}
}
    2bc6:	b003      	add	sp, #12
    2bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    2bcc:	ebb4 0008 	subs.w	r0, r4, r8
    2bd0:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    2bd4:	42ba      	cmp	r2, r7
    2bd6:	e9ca 0104 	strd	r0, r1, [sl, #16]
    2bda:	d0c6      	beq.n	2b6a <z_add_timeout+0x92>
    2bdc:	6812      	ldr	r2, [r2, #0]
    2bde:	e7c3      	b.n	2b68 <z_add_timeout+0x90>
    2be0:	200001b8 	.word	0x200001b8
    2be4:	20000024 	.word	0x20000024

00002be8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    2be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bec:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2bee:	f7ff fc95 	bl	251c <z_time_slice>
	__asm__ volatile(
    2bf2:	f04f 0320 	mov.w	r3, #32
    2bf6:	f3ef 8411 	mrs	r4, BASEPRI
    2bfa:	f383 8811 	msr	BASEPRI, r3
    2bfe:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2c02:	4d2d      	ldr	r5, [pc, #180]	; (2cb8 <z_clock_announce+0xd0>)
    2c04:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2cbc <z_clock_announce+0xd4>
	return list->head == list;
    2c08:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 2cc0 <z_clock_announce+0xd8>
    2c0c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2c0e:	4651      	mov	r1, sl
    2c10:	f8d5 c000 	ldr.w	ip, [r5]
    2c14:	f8db 0000 	ldr.w	r0, [fp]
    2c18:	4662      	mov	r2, ip
    2c1a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c1c:	4558      	cmp	r0, fp
    2c1e:	e9cd 2300 	strd	r2, r3, [sp]
    2c22:	e9da 8900 	ldrd	r8, r9, [sl]
    2c26:	d00e      	beq.n	2c46 <z_clock_announce+0x5e>
    2c28:	b168      	cbz	r0, 2c46 <z_clock_announce+0x5e>
    2c2a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    2c2e:	42bb      	cmp	r3, r7
    2c30:	bf08      	it	eq
    2c32:	45b4      	cmpeq	ip, r6
    2c34:	d21e      	bcs.n	2c74 <z_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2c36:	9b00      	ldr	r3, [sp, #0]
    2c38:	ebb6 0c03 	subs.w	ip, r6, r3
    2c3c:	9b01      	ldr	r3, [sp, #4]
    2c3e:	eb67 0603 	sbc.w	r6, r7, r3
    2c42:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    2c46:	9b00      	ldr	r3, [sp, #0]
    2c48:	eb13 0208 	adds.w	r2, r3, r8
    2c4c:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    2c4e:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    2c52:	eb43 0309 	adc.w	r3, r3, r9
    2c56:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    2c5a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    2c5c:	f7ff ff22 	bl	2aa4 <next_timeout>
    2c60:	4631      	mov	r1, r6
    2c62:	f7fd fff7 	bl	c54 <z_clock_set_timeout>
	__asm__ volatile(
    2c66:	f384 8811 	msr	BASEPRI, r4
    2c6a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2c6e:	b003      	add	sp, #12
    2c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    2c74:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    2c78:	f04f 0200 	mov.w	r2, #0
    2c7c:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    2c80:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    2c84:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    2c88:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    2c8c:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    2c90:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    2c92:	f7ff feed 	bl	2a70 <remove_timeout>
    2c96:	f384 8811 	msr	BASEPRI, r4
    2c9a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2c9e:	6883      	ldr	r3, [r0, #8]
    2ca0:	4798      	blx	r3
	__asm__ volatile(
    2ca2:	f04f 0320 	mov.w	r3, #32
    2ca6:	f3ef 8411 	mrs	r4, BASEPRI
    2caa:	f383 8811 	msr	BASEPRI, r3
    2cae:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    2cb2:	4902      	ldr	r1, [pc, #8]	; (2cbc <z_clock_announce+0xd4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2cb4:	e7ac      	b.n	2c10 <z_clock_announce+0x28>
    2cb6:	bf00      	nop
    2cb8:	20000368 	.word	0x20000368
    2cbc:	200001b8 	.word	0x200001b8
    2cc0:	20000024 	.word	0x20000024

00002cc4 <z_tick_get>:

int64_t z_tick_get(void)
{
    2cc4:	b510      	push	{r4, lr}
    2cc6:	f04f 0320 	mov.w	r3, #32
    2cca:	f3ef 8411 	mrs	r4, BASEPRI
    2cce:	f383 8811 	msr	BASEPRI, r3
    2cd2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    2cd6:	f7fe f81f 	bl	d18 <z_clock_elapsed>
    2cda:	4b06      	ldr	r3, [pc, #24]	; (2cf4 <z_tick_get+0x30>)
    2cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ce0:	1812      	adds	r2, r2, r0
    2ce2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    2ce6:	f384 8811 	msr	BASEPRI, r4
    2cea:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2cee:	4610      	mov	r0, r2
    2cf0:	4619      	mov	r1, r3
    2cf2:	bd10      	pop	{r4, pc}
    2cf4:	200001b8 	.word	0x200001b8

00002cf8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    2cf8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2cfa:	4c06      	ldr	r4, [pc, #24]	; (2d14 <statics_init+0x1c>)
    2cfc:	4d06      	ldr	r5, [pc, #24]	; (2d18 <statics_init+0x20>)
    2cfe:	42ac      	cmp	r4, r5
    2d00:	d301      	bcc.n	2d06 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    2d02:	2000      	movs	r0, #0
    2d04:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    2d06:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    2d0a:	4620      	mov	r0, r4
    2d0c:	f000 fd6a 	bl	37e4 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2d10:	3414      	adds	r4, #20
    2d12:	e7f4      	b.n	2cfe <statics_init+0x6>
    2d14:	2000008c 	.word	0x2000008c
    2d18:	2000008c 	.word	0x2000008c

00002d1c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    2d1c:	4603      	mov	r3, r0
    2d1e:	b158      	cbz	r0, 2d38 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2d20:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    2d22:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    2d26:	2a01      	cmp	r2, #1
    2d28:	d003      	beq.n	2d32 <sys_notify_validate+0x16>
    2d2a:	2a03      	cmp	r2, #3
    2d2c:	d104      	bne.n	2d38 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    2d2e:	6802      	ldr	r2, [r0, #0]
    2d30:	b112      	cbz	r2, 2d38 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    2d32:	2000      	movs	r0, #0
    2d34:	6098      	str	r0, [r3, #8]
    2d36:	4770      	bx	lr
		return -EINVAL;
    2d38:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    2d3c:	4770      	bx	lr

00002d3e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2d3e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    2d40:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    2d42:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    2d46:	2a03      	cmp	r2, #3
    2d48:	f04f 0200 	mov.w	r2, #0
{
    2d4c:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    2d4e:	bf0c      	ite	eq
    2d50:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    2d52:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    2d54:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    2d56:	4770      	bx	lr

00002d58 <arch_printk_char_out>:
}
    2d58:	2000      	movs	r0, #0
    2d5a:	4770      	bx	lr

00002d5c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    2d5c:	b40f      	push	{r0, r1, r2, r3}
    2d5e:	b507      	push	{r0, r1, r2, lr}
    2d60:	a904      	add	r1, sp, #16
    2d62:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    2d66:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    2d68:	f7fd fcc6 	bl	6f8 <vprintk>
	}
	va_end(ap);
}
    2d6c:	b003      	add	sp, #12
    2d6e:	f85d eb04 	ldr.w	lr, [sp], #4
    2d72:	b004      	add	sp, #16
    2d74:	4770      	bx	lr

00002d76 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2d76:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    2d78:	f013 0307 	ands.w	r3, r3, #7
    2d7c:	d105      	bne.n	2d8a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    2d7e:	6803      	ldr	r3, [r0, #0]
    2d80:	2b00      	cmp	r3, #0
		evt = EVT_START;
    2d82:	bf0c      	ite	eq
    2d84:	2000      	moveq	r0, #0
    2d86:	2003      	movne	r0, #3
    2d88:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    2d8a:	2b02      	cmp	r3, #2
    2d8c:	d105      	bne.n	2d9a <process_recheck+0x24>
		   && (mgr->refs == 0)) {
    2d8e:	8b43      	ldrh	r3, [r0, #26]
    2d90:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    2d92:	bf14      	ite	ne
    2d94:	2000      	movne	r0, #0
    2d96:	2004      	moveq	r0, #4
    2d98:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    2d9a:	2b01      	cmp	r3, #1
    2d9c:	d105      	bne.n	2daa <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    2d9e:	6803      	ldr	r3, [r0, #0]
    2da0:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    2da2:	bf0c      	ite	eq
    2da4:	2000      	moveq	r0, #0
    2da6:	2005      	movne	r0, #5
    2da8:	4770      	bx	lr
	int evt = EVT_NOP;
    2daa:	2000      	movs	r0, #0
}
    2dac:	4770      	bx	lr

00002dae <notify_one>:
{
    2dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2db2:	460d      	mov	r5, r1
    2db4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    2db6:	4619      	mov	r1, r3
    2db8:	1d28      	adds	r0, r5, #4
{
    2dba:	4690      	mov	r8, r2
    2dbc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    2dbe:	f7ff ffbe 	bl	2d3e <sys_notify_finalize>
	if (cb) {
    2dc2:	4604      	mov	r4, r0
    2dc4:	b138      	cbz	r0, 2dd6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    2dc6:	4633      	mov	r3, r6
    2dc8:	4642      	mov	r2, r8
    2dca:	4629      	mov	r1, r5
    2dcc:	4638      	mov	r0, r7
    2dce:	46a4      	mov	ip, r4
}
    2dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    2dd4:	4760      	bx	ip
}
    2dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002dda <transition_complete>:
{
    2dda:	b410      	push	{r4}
	__asm__ volatile(
    2ddc:	f04f 0420 	mov.w	r4, #32
    2de0:	f3ef 8211 	mrs	r2, BASEPRI
    2de4:	f384 8811 	msr	BASEPRI, r4
    2de8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    2dec:	6141      	str	r1, [r0, #20]
}
    2dee:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    2df0:	2101      	movs	r1, #1
    2df2:	f7fd bc8f 	b.w	714 <process_event>

00002df6 <validate_args>:
{
    2df6:	b510      	push	{r4, lr}
    2df8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    2dfa:	b140      	cbz	r0, 2e0e <validate_args+0x18>
    2dfc:	b139      	cbz	r1, 2e0e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    2dfe:	1d08      	adds	r0, r1, #4
    2e00:	f7ff ff8c 	bl	2d1c <sys_notify_validate>
	if ((rv == 0)
    2e04:	b928      	cbnz	r0, 2e12 <validate_args+0x1c>
	    && ((cli->notify.flags
    2e06:	68a3      	ldr	r3, [r4, #8]
    2e08:	f033 0303 	bics.w	r3, r3, #3
    2e0c:	d001      	beq.n	2e12 <validate_args+0x1c>
		rv = -EINVAL;
    2e0e:	f06f 0015 	mvn.w	r0, #21
}
    2e12:	bd10      	pop	{r4, pc}

00002e14 <onoff_manager_init>:
{
    2e14:	b538      	push	{r3, r4, r5, lr}
    2e16:	460c      	mov	r4, r1
	if ((mgr == NULL)
    2e18:	4605      	mov	r5, r0
    2e1a:	b158      	cbz	r0, 2e34 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    2e1c:	b151      	cbz	r1, 2e34 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    2e1e:	680b      	ldr	r3, [r1, #0]
    2e20:	b143      	cbz	r3, 2e34 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    2e22:	684b      	ldr	r3, [r1, #4]
    2e24:	b133      	cbz	r3, 2e34 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    2e26:	221c      	movs	r2, #28
    2e28:	2100      	movs	r1, #0
    2e2a:	f000 fa35 	bl	3298 <memset>
    2e2e:	612c      	str	r4, [r5, #16]
	return 0;
    2e30:	2000      	movs	r0, #0
}
    2e32:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    2e34:	f06f 0015 	mvn.w	r0, #21
    2e38:	e7fb      	b.n	2e32 <onoff_manager_init+0x1e>

00002e3a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2e3a:	b570      	push	{r4, r5, r6, lr}
    2e3c:	4604      	mov	r4, r0
    2e3e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2e40:	f7ff ffd9 	bl	2df6 <validate_args>

	if (rv < 0) {
    2e44:	1e05      	subs	r5, r0, #0
    2e46:	db31      	blt.n	2eac <onoff_request+0x72>
    2e48:	f04f 0320 	mov.w	r3, #32
    2e4c:	f3ef 8111 	mrs	r1, BASEPRI
    2e50:	f383 8811 	msr	BASEPRI, r3
    2e54:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    2e58:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2e5a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    2e5c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    2e60:	42ab      	cmp	r3, r5
    2e62:	f000 0207 	and.w	r2, r0, #7
    2e66:	d02e      	beq.n	2ec6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    2e68:	2a02      	cmp	r2, #2
    2e6a:	d10e      	bne.n	2e8a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    2e6c:	3301      	adds	r3, #1
    2e6e:	8363      	strh	r3, [r4, #26]
	rv = state;
    2e70:	4615      	mov	r5, r2
		notify = true;
    2e72:	2301      	movs	r3, #1
	__asm__ volatile(
    2e74:	f381 8811 	msr	BASEPRI, r1
    2e78:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    2e7c:	b1b3      	cbz	r3, 2eac <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    2e7e:	2300      	movs	r3, #0
    2e80:	4631      	mov	r1, r6
    2e82:	4620      	mov	r0, r4
    2e84:	f7ff ff93 	bl	2dae <notify_one>
    2e88:	e010      	b.n	2eac <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    2e8a:	0783      	lsls	r3, r0, #30
    2e8c:	d001      	beq.n	2e92 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    2e8e:	2a06      	cmp	r2, #6
    2e90:	d10e      	bne.n	2eb0 <onoff_request+0x76>
	parent->next = child;
    2e92:	2300      	movs	r3, #0
    2e94:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    2e96:	6863      	ldr	r3, [r4, #4]
    2e98:	b993      	cbnz	r3, 2ec0 <onoff_request+0x86>
	list->head = node;
    2e9a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    2e9e:	4615      	mov	r5, r2
    2ea0:	b962      	cbnz	r2, 2ebc <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    2ea2:	460a      	mov	r2, r1
    2ea4:	4620      	mov	r0, r4
    2ea6:	2102      	movs	r1, #2
    2ea8:	f7fd fc34 	bl	714 <process_event>
		}
	}

	return rv;
}
    2eac:	4628      	mov	r0, r5
    2eae:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    2eb0:	2a05      	cmp	r2, #5
    2eb2:	bf0c      	ite	eq
    2eb4:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    2eb8:	f06f 0504 	mvnne.w	r5, #4
    2ebc:	2300      	movs	r3, #0
    2ebe:	e7d9      	b.n	2e74 <onoff_request+0x3a>
	parent->next = child;
    2ec0:	601e      	str	r6, [r3, #0]
	list->tail = node;
    2ec2:	6066      	str	r6, [r4, #4]
}
    2ec4:	e7eb      	b.n	2e9e <onoff_request+0x64>
		rv = -EAGAIN;
    2ec6:	f06f 050a 	mvn.w	r5, #10
    2eca:	e7f7      	b.n	2ebc <onoff_request+0x82>

00002ecc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2ecc:	4604      	mov	r4, r0
    2ece:	b508      	push	{r3, lr}
    2ed0:	4608      	mov	r0, r1
    2ed2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2ed4:	461a      	mov	r2, r3
    2ed6:	47a0      	blx	r4
	return z_impl_k_current_get();
    2ed8:	f7ff fce2 	bl	28a0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    2edc:	f7fe f97c 	bl	11d8 <z_impl_k_thread_abort>

00002ee0 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    2ee0:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    2ee2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    2ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    2eea:	bf2c      	ite	cs
    2eec:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    2ef0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    2ef4:	4770      	bx	lr

00002ef6 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    2ef6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    2efa:	6880      	ldr	r0, [r0, #8]
    2efc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    2f00:	bf2c      	ite	cs
    2f02:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    2f06:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    2f0a:	4770      	bx	lr

00002f0c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    2f0c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    2f0e:	2201      	movs	r2, #1
    2f10:	f7ff ffe6 	bl	2ee0 <chunk_field>
}
    2f14:	0840      	lsrs	r0, r0, #1
    2f16:	bd08      	pop	{r3, pc}

00002f18 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    2f18:	6883      	ldr	r3, [r0, #8]
    2f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    2f1e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    2f22:	d308      	bcc.n	2f36 <set_chunk_used+0x1e>
		if (used) {
    2f24:	684b      	ldr	r3, [r1, #4]
    2f26:	b11a      	cbz	r2, 2f30 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    2f28:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    2f2c:	604b      	str	r3, [r1, #4]
    2f2e:	4770      	bx	lr
    2f30:	f023 0301 	bic.w	r3, r3, #1
    2f34:	e7fa      	b.n	2f2c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    2f36:	884b      	ldrh	r3, [r1, #2]
    2f38:	b11a      	cbz	r2, 2f42 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    2f3a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    2f3e:	804b      	strh	r3, [r1, #2]
		}
	}
}
    2f40:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    2f42:	f023 0301 	bic.w	r3, r3, #1
    2f46:	e7fa      	b.n	2f3e <set_chunk_used+0x26>

00002f48 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2f48:	0053      	lsls	r3, r2, #1
    2f4a:	2201      	movs	r2, #1
    2f4c:	f7ff bfd3 	b.w	2ef6 <chunk_set>

00002f50 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    2f50:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    2f52:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    2f54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    2f58:	bf2c      	ite	cs
    2f5a:	2002      	movcs	r0, #2
    2f5c:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    2f5e:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    2f60:	fab0 f080 	clz	r0, r0
}
    2f64:	f1c0 001f 	rsb	r0, r0, #31
    2f68:	4770      	bx	lr

00002f6a <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    2f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f6e:	4604      	mov	r4, r0
    2f70:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
    2f72:	f7ff ffcb 	bl	2f0c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
    2f76:	68a3      	ldr	r3, [r4, #8]
    2f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2f7c:	4601      	mov	r1, r0
    2f7e:	d301      	bcc.n	2f84 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    2f80:	2801      	cmp	r0, #1
    2f82:	d035      	beq.n	2ff0 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    2f84:	4620      	mov	r0, r4
    2f86:	f7ff ffe3 	bl	2f50 <bucket_idx>
	if (b->next == 0) {
    2f8a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    2f8e:	6916      	ldr	r6, [r2, #16]
    2f90:	b99e      	cbnz	r6, 2fba <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    2f92:	2301      	movs	r3, #1
    2f94:	fa03 f000 	lsl.w	r0, r3, r0
    2f98:	68e3      	ldr	r3, [r4, #12]
    2f9a:	4303      	orrs	r3, r0
    2f9c:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    2f9e:	4629      	mov	r1, r5
		b->next = c;
    2fa0:	6115      	str	r5, [r2, #16]
    2fa2:	462b      	mov	r3, r5
    2fa4:	2202      	movs	r2, #2
    2fa6:	4620      	mov	r0, r4
    2fa8:	f7ff ffa5 	bl	2ef6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    2fac:	2203      	movs	r2, #3
    2fae:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    2fb0:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    2fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fb6:	f7ff bf9e 	b.w	2ef6 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    2fba:	2202      	movs	r2, #2
    2fbc:	4631      	mov	r1, r6
    2fbe:	4620      	mov	r0, r4
    2fc0:	f7ff ff8e 	bl	2ee0 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    2fc4:	2202      	movs	r2, #2
    2fc6:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    2fc8:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    2fca:	4629      	mov	r1, r5
    2fcc:	4620      	mov	r0, r4
    2fce:	f7ff ff92 	bl	2ef6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    2fd2:	4633      	mov	r3, r6
    2fd4:	2203      	movs	r2, #3
    2fd6:	4629      	mov	r1, r5
    2fd8:	4620      	mov	r0, r4
    2fda:	f7ff ff8c 	bl	2ef6 <chunk_set>
    2fde:	2203      	movs	r2, #3
    2fe0:	4639      	mov	r1, r7
    2fe2:	462b      	mov	r3, r5
    2fe4:	4620      	mov	r0, r4
    2fe6:	f7ff ff86 	bl	2ef6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    2fea:	2202      	movs	r2, #2
    2fec:	4631      	mov	r1, r6
    2fee:	e7df      	b.n	2fb0 <free_list_add+0x46>
    2ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002ff4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    2ff4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ffa:	bf2c      	ite	cs
    2ffc:	2508      	movcs	r5, #8
    2ffe:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    3000:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3002:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    3004:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3006:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    300a:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    300e:	2200      	movs	r2, #0
    3010:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3012:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    3014:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3016:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    3018:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    301c:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    301e:	4629      	mov	r1, r5
	h->len = buf_sz;
    3020:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    3022:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    3024:	4620      	mov	r0, r4
    3026:	f7ff ff93 	bl	2f50 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    302a:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    302c:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    302e:	1c41      	adds	r1, r0, #1
    3030:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    3032:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    3036:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    3038:	428b      	cmp	r3, r1
    303a:	db29      	blt.n	3090 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    303c:	4632      	mov	r2, r6
    303e:	4620      	mov	r0, r4
    3040:	2100      	movs	r1, #0
    3042:	f7ff ff81 	bl	2f48 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    3046:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    3048:	4620      	mov	r0, r4
    304a:	2201      	movs	r2, #1
    304c:	2100      	movs	r1, #0
    304e:	f7ff ff63 	bl	2f18 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    3052:	463a      	mov	r2, r7
    3054:	4631      	mov	r1, r6
    3056:	f7ff ff77 	bl	2f48 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    305a:	4633      	mov	r3, r6
    305c:	4631      	mov	r1, r6
    305e:	4620      	mov	r0, r4
    3060:	2200      	movs	r2, #0
    3062:	f7ff ff48 	bl	2ef6 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    3066:	4629      	mov	r1, r5
    3068:	4620      	mov	r0, r4
    306a:	2200      	movs	r2, #0
    306c:	f7ff ff6c 	bl	2f48 <set_chunk_size>
    3070:	463b      	mov	r3, r7
    3072:	4629      	mov	r1, r5
    3074:	4620      	mov	r0, r4
    3076:	2200      	movs	r2, #0
    3078:	f7ff ff3d 	bl	2ef6 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    307c:	4629      	mov	r1, r5
    307e:	4620      	mov	r0, r4
    3080:	2201      	movs	r2, #1
    3082:	f7ff ff49 	bl	2f18 <set_chunk_used>

	free_list_add(h, chunk0_size);
    3086:	4631      	mov	r1, r6
}
    3088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    308c:	f7ff bf6d 	b.w	2f6a <free_list_add>
		h->buckets[i].next = 0;
    3090:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    3094:	3301      	adds	r3, #1
    3096:	e7cf      	b.n	3038 <sys_heap_init+0x44>

00003098 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3098:	4770      	bx	lr

0000309a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    309a:	68c2      	ldr	r2, [r0, #12]
    309c:	b2cb      	uxtb	r3, r1
    309e:	210c      	movs	r1, #12
    30a0:	fb03 2101 	mla	r1, r3, r1, r2
    30a4:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    30a6:	f000 0007 	and.w	r0, r0, #7
    30aa:	4770      	bx	lr

000030ac <set_off_state>:
	__asm__ volatile(
    30ac:	f04f 0320 	mov.w	r3, #32
    30b0:	f3ef 8211 	mrs	r2, BASEPRI
    30b4:	f383 8811 	msr	BASEPRI, r3
    30b8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    30bc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    30be:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    30c2:	d001      	beq.n	30c8 <set_off_state+0x1c>
    30c4:	428b      	cmp	r3, r1
    30c6:	d107      	bne.n	30d8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    30c8:	2301      	movs	r3, #1
    30ca:	6003      	str	r3, [r0, #0]
	int err = 0;
    30cc:	2000      	movs	r0, #0
	__asm__ volatile(
    30ce:	f382 8811 	msr	BASEPRI, r2
    30d2:	f3bf 8f6f 	isb	sy
}
    30d6:	4770      	bx	lr
		err = -EPERM;
    30d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    30dc:	e7f7      	b.n	30ce <set_off_state+0x22>

000030de <set_starting_state>:
{
    30de:	b510      	push	{r4, lr}
	__asm__ volatile(
    30e0:	f04f 0320 	mov.w	r3, #32
    30e4:	f3ef 8211 	mrs	r2, BASEPRI
    30e8:	f383 8811 	msr	BASEPRI, r3
    30ec:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    30f0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    30f2:	f003 0407 	and.w	r4, r3, #7
    30f6:	2c01      	cmp	r4, #1
    30f8:	d106      	bne.n	3108 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    30fa:	6001      	str	r1, [r0, #0]
	int err = 0;
    30fc:	2000      	movs	r0, #0
	__asm__ volatile(
    30fe:	f382 8811 	msr	BASEPRI, r2
    3102:	f3bf 8f6f 	isb	sy
}
    3106:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    3108:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    310c:	428b      	cmp	r3, r1
		err = -EBUSY;
    310e:	bf14      	ite	ne
    3110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3114:	f06f 000f 	mvneq.w	r0, #15
    3118:	e7f1      	b.n	30fe <set_starting_state+0x20>

0000311a <set_on_state>:
	__asm__ volatile(
    311a:	f04f 0320 	mov.w	r3, #32
    311e:	f3ef 8211 	mrs	r2, BASEPRI
    3122:	f383 8811 	msr	BASEPRI, r3
    3126:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    312a:	6803      	ldr	r3, [r0, #0]
    312c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3130:	f043 0302 	orr.w	r3, r3, #2
    3134:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    3136:	f382 8811 	msr	BASEPRI, r2
    313a:	f3bf 8f6f 	isb	sy
}
    313e:	4770      	bx	lr

00003140 <onoff_started_callback>:
	return &data->mgr[type];
    3140:	68c0      	ldr	r0, [r0, #12]
{
    3142:	b410      	push	{r4}
	return &data->mgr[type];
    3144:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    3146:	241c      	movs	r4, #28
    3148:	fb03 0004 	mla	r0, r3, r4, r0
    314c:	2100      	movs	r1, #0
}
    314e:	bc10      	pop	{r4}
	notify(mgr, 0);
    3150:	4710      	bx	r2

00003152 <blocking_start_callback>:
{
    3152:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3154:	f7ff bbaa 	b.w	28ac <z_impl_k_sem_give>

00003158 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    3158:	2000      	movs	r0, #0
    315a:	f7fe beab 	b.w	1eb4 <nrfx_clock_stop>

0000315e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    315e:	2000      	movs	r0, #0
    3160:	f7fe be8a 	b.w	1e78 <nrfx_clock_start>

00003164 <lfclk_spinwait>:
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3168:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    316c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3170:	03c9      	lsls	r1, r1, #15
    3172:	d5f9      	bpl.n	3168 <lfclk_spinwait+0x4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3174:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type) && (type == t))) {
    3178:	4298      	cmp	r0, r3
    317a:	d1f5      	bne.n	3168 <lfclk_spinwait+0x4>
}
    317c:	4770      	bx	lr

0000317e <api_stop>:
{
    317e:	b538      	push	{r3, r4, r5, lr}
    3180:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    3182:	230c      	movs	r3, #12
{
    3184:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    3186:	4363      	muls	r3, r4
    3188:	68c0      	ldr	r0, [r0, #12]
    318a:	3340      	adds	r3, #64	; 0x40
    318c:	2180      	movs	r1, #128	; 0x80
    318e:	4418      	add	r0, r3
    3190:	f7ff ff8c 	bl	30ac <set_off_state>
	if (err < 0) {
    3194:	2800      	cmp	r0, #0
    3196:	db05      	blt.n	31a4 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    3198:	6869      	ldr	r1, [r5, #4]
    319a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    319e:	6863      	ldr	r3, [r4, #4]
    31a0:	4798      	blx	r3
	return 0;
    31a2:	2000      	movs	r0, #0
}
    31a4:	bd38      	pop	{r3, r4, r5, pc}

000031a6 <api_start>:
{
    31a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31aa:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    31ac:	f04f 080c 	mov.w	r8, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    31b0:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    31b2:	fb08 f805 	mul.w	r8, r8, r5
{
    31b6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    31b8:	f108 0040 	add.w	r0, r8, #64	; 0x40
    31bc:	2180      	movs	r1, #128	; 0x80
    31be:	4420      	add	r0, r4
{
    31c0:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
    31c2:	f7ff ff8c 	bl	30de <set_starting_state>
	if (err < 0) {
    31c6:	2800      	cmp	r0, #0
    31c8:	db09      	blt.n	31de <api_start+0x38>
	subdata->cb = data->cb;
    31ca:	4444      	add	r4, r8
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
    31d0:	68bb      	ldr	r3, [r7, #8]
    31d2:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
    31d4:	6873      	ldr	r3, [r6, #4]
    31d6:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    31da:	4798      	blx	r3
	return 0;
    31dc:	2000      	movs	r0, #0
}
    31de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000031e2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    31e2:	4770      	bx	lr

000031e4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    31e4:	4770      	bx	lr

000031e6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    31e6:	f7fd bdb1 	b.w	d4c <_DoInit>

000031ea <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    31ea:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    31ec:	f7ff fffb 	bl	31e6 <SEGGER_RTT_Init>

	return 0;
}
    31f0:	2000      	movs	r0, #0
    31f2:	bd08      	pop	{r3, pc}

000031f4 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    31f4:	2100      	movs	r1, #0
    31f6:	2001      	movs	r0, #1
    31f8:	f000 b800 	b.w	31fc <z_arm_fatal_error>

000031fc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    31fc:	f000 b9c6 	b.w	358c <z_fatal_error>

00003200 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3200:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3202:	6800      	ldr	r0, [r0, #0]
    3204:	f000 b9c2 	b.w	358c <z_fatal_error>

00003208 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3208:	b508      	push	{r3, lr}
	handler();
    320a:	f7fd fe9b 	bl	f44 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    320e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    3212:	f7fd bfc7 	b.w	11a4 <z_arm_exc_exit>

00003216 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    3216:	3901      	subs	r1, #1
    3218:	4603      	mov	r3, r0
    321a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    321e:	b90a      	cbnz	r2, 3224 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    3220:	701a      	strb	r2, [r3, #0]

	return dest;
}
    3222:	4770      	bx	lr
		*d = *s;
    3224:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    3228:	e7f7      	b.n	321a <strcpy+0x4>

0000322a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    322a:	1e43      	subs	r3, r0, #1
    322c:	3901      	subs	r1, #1
    322e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3232:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3236:	4282      	cmp	r2, r0
    3238:	d101      	bne.n	323e <strcmp+0x14>
    323a:	2a00      	cmp	r2, #0
    323c:	d1f7      	bne.n	322e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    323e:	1a10      	subs	r0, r2, r0
    3240:	4770      	bx	lr

00003242 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3242:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3244:	ea81 0400 	eor.w	r4, r1, r0
    3248:	07a5      	lsls	r5, r4, #30
    324a:	4603      	mov	r3, r0
    324c:	d00b      	beq.n	3266 <memcpy+0x24>
    324e:	3b01      	subs	r3, #1
    3250:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    3252:	4291      	cmp	r1, r2
    3254:	d11b      	bne.n	328e <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3256:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3258:	2a00      	cmp	r2, #0
    325a:	d0fc      	beq.n	3256 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    325c:	f811 4b01 	ldrb.w	r4, [r1], #1
    3260:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    3264:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    3266:	079c      	lsls	r4, r3, #30
    3268:	d1f6      	bne.n	3258 <memcpy+0x16>
    326a:	f022 0403 	bic.w	r4, r2, #3
    326e:	1f1d      	subs	r5, r3, #4
    3270:	0896      	lsrs	r6, r2, #2
    3272:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3274:	42b9      	cmp	r1, r7
    3276:	d105      	bne.n	3284 <memcpy+0x42>
    3278:	f06f 0503 	mvn.w	r5, #3
    327c:	fb05 2206 	mla	r2, r5, r6, r2
    3280:	4423      	add	r3, r4
    3282:	e7e4      	b.n	324e <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3284:	f851 cb04 	ldr.w	ip, [r1], #4
    3288:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    328c:	e7f2      	b.n	3274 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    328e:	f811 4b01 	ldrb.w	r4, [r1], #1
    3292:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3296:	e7dc      	b.n	3252 <memcpy+0x10>

00003298 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    3298:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    329a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    329c:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    329e:	079c      	lsls	r4, r3, #30
    32a0:	d111      	bne.n	32c6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    32a2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    32a6:	f022 0603 	bic.w	r6, r2, #3
    32aa:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    32ae:	441e      	add	r6, r3
    32b0:	0894      	lsrs	r4, r2, #2
    32b2:	42b3      	cmp	r3, r6
    32b4:	d10d      	bne.n	32d2 <memset+0x3a>
    32b6:	f06f 0503 	mvn.w	r5, #3
    32ba:	fb05 2204 	mla	r2, r5, r4, r2
    32be:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    32c0:	4293      	cmp	r3, r2
    32c2:	d109      	bne.n	32d8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    32c4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    32c6:	2a00      	cmp	r2, #0
    32c8:	d0fc      	beq.n	32c4 <memset+0x2c>
		*(d_byte++) = c_byte;
    32ca:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    32ce:	3a01      	subs	r2, #1
    32d0:	e7e5      	b.n	329e <memset+0x6>
		*(d_word++) = c_word;
    32d2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    32d6:	e7ec      	b.n	32b2 <memset+0x1a>
		*(d_byte++) = c_byte;
    32d8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    32dc:	e7f0      	b.n	32c0 <memset+0x28>

000032de <_stdout_hook_default>:
}
    32de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32e2:	4770      	bx	lr

000032e4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    32e4:	f7fe bcca 	b.w	1c7c <SystemInit>

000032e8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					uint32_t pins)
{
    32e8:	b570      	push	{r4, r5, r6, lr}
    32ea:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    32ec:	6801      	ldr	r1, [r0, #0]
{
    32ee:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    32f0:	b189      	cbz	r1, 3316 <gpio_fire_callbacks+0x2e>
	return node->next;
    32f2:	680c      	ldr	r4, [r1, #0]
    32f4:	2c00      	cmp	r4, #0
    32f6:	bf38      	it	cc
    32f8:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    32fa:	688a      	ldr	r2, [r1, #8]
    32fc:	402a      	ands	r2, r5
    32fe:	d002      	beq.n	3306 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3300:	684b      	ldr	r3, [r1, #4]
    3302:	4630      	mov	r0, r6
    3304:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3306:	b134      	cbz	r4, 3316 <gpio_fire_callbacks+0x2e>
    3308:	6823      	ldr	r3, [r4, #0]
    330a:	2b00      	cmp	r3, #0
    330c:	bf38      	it	cc
    330e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3310:	4621      	mov	r1, r4
    3312:	461c      	mov	r4, r3
    3314:	e7f1      	b.n	32fa <gpio_fire_callbacks+0x12>
		}
	}
}
    3316:	bd70      	pop	{r4, r5, r6, pc}

00003318 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3318:	6843      	ldr	r3, [r0, #4]
    331a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    331c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    3320:	600b      	str	r3, [r1, #0]
}
    3322:	2000      	movs	r0, #0
    3324:	4770      	bx	lr

00003326 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3326:	6843      	ldr	r3, [r0, #4]
    3328:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    332a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    332e:	4042      	eors	r2, r0
    3330:	400a      	ands	r2, r1
    3332:	4042      	eors	r2, r0
    p_reg->OUT = value;
    3334:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    3338:	2000      	movs	r0, #0
    333a:	4770      	bx	lr

0000333c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    333c:	6843      	ldr	r3, [r0, #4]
    333e:	685b      	ldr	r3, [r3, #4]
}
    3340:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    3342:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    3346:	4770      	bx	lr

00003348 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3348:	6843      	ldr	r3, [r0, #4]
    334a:	685b      	ldr	r3, [r3, #4]
}
    334c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    334e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    3352:	4770      	bx	lr

00003354 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3354:	6843      	ldr	r3, [r0, #4]
    3356:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    3358:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    335c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    335e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    3362:	2000      	movs	r0, #0
    3364:	4770      	bx	lr

00003366 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3366:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    3368:	6858      	ldr	r0, [r3, #4]
{
    336a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    336c:	b158      	cbz	r0, 3386 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    336e:	2400      	movs	r4, #0
    3370:	4281      	cmp	r1, r0
    3372:	d113      	bne.n	339c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    3374:	6808      	ldr	r0, [r1, #0]
    3376:	b95c      	cbnz	r4, 3390 <gpio_nrfx_manage_callback+0x2a>
    3378:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    337a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    337c:	42a1      	cmp	r1, r4
    337e:	d100      	bne.n	3382 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    3380:	6098      	str	r0, [r3, #8]
	parent->next = child;
    3382:	2000      	movs	r0, #0
    3384:	6008      	str	r0, [r1, #0]
	if (set) {
    3386:	b972      	cbnz	r2, 33a6 <gpio_nrfx_manage_callback+0x40>
	return 0;
    3388:	2000      	movs	r0, #0
}
    338a:	bd30      	pop	{r4, r5, pc}
    338c:	4628      	mov	r0, r5
    338e:	e7ef      	b.n	3370 <gpio_nrfx_manage_callback+0xa>
    3390:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    3392:	6898      	ldr	r0, [r3, #8]
    3394:	4281      	cmp	r1, r0
	list->tail = node;
    3396:	bf08      	it	eq
    3398:	609c      	streq	r4, [r3, #8]
}
    339a:	e7f2      	b.n	3382 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    339c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    339e:	4604      	mov	r4, r0
    33a0:	2d00      	cmp	r5, #0
    33a2:	d1f3      	bne.n	338c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    33a4:	b13a      	cbz	r2, 33b6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    33a6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    33a8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    33aa:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    33ac:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    33ae:	2800      	cmp	r0, #0
    33b0:	d1ea      	bne.n	3388 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    33b2:	6099      	str	r1, [r3, #8]
}
    33b4:	e7e9      	b.n	338a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    33b6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    33ba:	e7e6      	b.n	338a <gpio_nrfx_manage_callback+0x24>

000033bc <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
    33bc:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    33be:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
    33c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
    33c6:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    33c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    33cc:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    33ce:	430a      	orrs	r2, r1
    33d0:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    33d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
    33d8:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    33dc:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    33de:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
    33e2:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    33e4:	2700      	movs	r7, #0
	while (level_pins) {
    33e6:	b914      	cbnz	r4, 33ee <check_level_trigger_pins+0x32>
}
    33e8:	4628      	mov	r0, r5
    33ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    33ee:	4234      	tst	r4, r6
    33f0:	d00a      	beq.n	3408 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    33f2:	f898 3008 	ldrb.w	r3, [r8, #8]
    33f6:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    33fa:	2100      	movs	r1, #0
    33fc:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    3400:	f7fe f85c 	bl	14bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3404:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    3408:	3701      	adds	r7, #1
		bit <<= 1;
    340a:	0076      	lsls	r6, r6, #1
    340c:	e7eb      	b.n	33e6 <check_level_trigger_pins+0x2a>

0000340e <cfg_level_pins>:
{
    340e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    3412:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3414:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    3418:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    341a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    341e:	4313      	orrs	r3, r2
    3420:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    3424:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    3426:	2500      	movs	r5, #0
	while (level_pins) {
    3428:	b90c      	cbnz	r4, 342e <cfg_level_pins+0x20>
}
    342a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    342e:	4226      	tst	r6, r4
    3430:	d010      	beq.n	3454 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3432:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3434:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3438:	40e9      	lsrs	r1, r5
    343a:	f001 0101 	and.w	r1, r1, #1
    343e:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3442:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3446:	b2c9      	uxtb	r1, r1
    3448:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    344c:	f7fe f836 	bl	14bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3450:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    3454:	3501      	adds	r5, #1
		bit <<= 1;
    3456:	0076      	lsls	r6, r6, #1
    3458:	e7e6      	b.n	3428 <cfg_level_pins+0x1a>

0000345a <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    345a:	68c2      	ldr	r2, [r0, #12]
{
    345c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    345e:	e892 0003 	ldmia.w	r2, {r0, r1}
    3462:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3466:	2000      	movs	r0, #0
    3468:	4770      	bx	lr

0000346a <nrf_gpio_cfg_output>:
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    346a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    346e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3472:	2203      	movs	r2, #3
    3474:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3478:	4770      	bx	lr

0000347a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    347a:	68c2      	ldr	r2, [r0, #12]
{
    347c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    347e:	e892 0003 	ldmia.w	r2, {r0, r1}
    3482:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3486:	2000      	movs	r0, #0
    3488:	4770      	bx	lr

0000348a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    348a:	6843      	ldr	r3, [r0, #4]
    348c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    348e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3492:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    3496:	4770      	bx	lr

00003498 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    3498:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    349a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    349c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    349e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    34a2:	b148      	cbz	r0, 34b8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    34a4:	7b12      	ldrb	r2, [r2, #12]
    34a6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34a8:	2000      	movs	r0, #0
    34aa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    34ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34b2:	2201      	movs	r2, #1
    34b4:	601a      	str	r2, [r3, #0]
	return 0;
    34b6:	4770      	bx	lr
		return -1;
    34b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    34bc:	4770      	bx	lr

000034be <uarte_nrfx_poll_out>:
{
    34be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    34c2:	6843      	ldr	r3, [r0, #4]
{
    34c4:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    34c8:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    34ca:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    34cc:	f000 f93e 	bl	374c <k_is_in_isr>
    34d0:	bbb8      	cbnz	r0, 3542 <uarte_nrfx_poll_out+0x84>
    34d2:	2564      	movs	r5, #100	; 0x64
    34d4:	f106 0708 	add.w	r7, r6, #8
    34d8:	f04f 0801 	mov.w	r8, #1
    34dc:	f3bf 8f5b 	dmb	ish
    34e0:	e857 3f00 	ldrex	r3, [r7]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d103      	bne.n	34f0 <uarte_nrfx_poll_out+0x32>
    34e8:	e847 8200 	strex	r2, r8, [r7]
    34ec:	2a00      	cmp	r2, #0
    34ee:	d1f7      	bne.n	34e0 <uarte_nrfx_poll_out+0x22>
    34f0:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    34f4:	d007      	beq.n	3506 <uarte_nrfx_poll_out+0x48>
	return z_impl_k_sleep(timeout);
    34f6:	2021      	movs	r0, #33	; 0x21
    34f8:	2100      	movs	r1, #0
    34fa:	3d01      	subs	r5, #1
    34fc:	f7ff f9b0 	bl	2860 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    3500:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3504:	d1ea      	bne.n	34dc <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3506:	2300      	movs	r3, #0
    3508:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    350c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3510:	f10d 0307 	add.w	r3, sp, #7
    3514:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3518:	2301      	movs	r3, #1
    351a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    351e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    3522:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3524:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    3528:	b923      	cbnz	r3, 3534 <uarte_nrfx_poll_out+0x76>
    352a:	2001      	movs	r0, #1
    352c:	f000 f80d 	bl	354a <nrfx_busy_wait>
    3530:	3d01      	subs	r5, #1
    3532:	d1f7      	bne.n	3524 <uarte_nrfx_poll_out+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3534:	2301      	movs	r3, #1
    3536:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    3538:	2300      	movs	r3, #0
    353a:	60b3      	str	r3, [r6, #8]
}
    353c:	b002      	add	sp, #8
    353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    3542:	2301      	movs	r3, #1
    3544:	60b3      	str	r3, [r6, #8]
    3546:	e7de      	b.n	3506 <uarte_nrfx_poll_out+0x48>

00003548 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    3548:	4700      	bx	r0

0000354a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    354a:	f000 b905 	b.w	3758 <z_impl_k_busy_wait>

0000354e <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    354e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    3552:	681a      	ldr	r2, [r3, #0]
    3554:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3556:	bf1f      	itttt	ne
    3558:	2200      	movne	r2, #0
    355a:	601a      	strne	r2, [r3, #0]
    355c:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    355e:	2001      	movne	r0, #1
    3560:	bf08      	it	eq
    3562:	2000      	moveq	r0, #0
}
    3564:	4770      	bx	lr

00003566 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    3566:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    3568:	f7fe fd14 	bl	1f94 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    356c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    3570:	f7fe bce6 	b.w	1f40 <nrfx_clock_irq_handler>

00003574 <arch_system_halt>:
	__asm__ volatile(
    3574:	f04f 0220 	mov.w	r2, #32
    3578:	f3ef 8311 	mrs	r3, BASEPRI
    357c:	f382 8811 	msr	BASEPRI, r2
    3580:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    3584:	e7fe      	b.n	3584 <arch_system_halt+0x10>

00003586 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3586:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    3588:	f7ff fff4 	bl	3574 <arch_system_halt>

0000358c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    358e:	4605      	mov	r5, r0
    3590:	460e      	mov	r6, r1
    3592:	f04f 0320 	mov.w	r3, #32
    3596:	f3ef 8711 	mrs	r7, BASEPRI
    359a:	f383 8811 	msr	BASEPRI, r3
    359e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    35a2:	f7ff f97d 	bl	28a0 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    35a6:	4631      	mov	r1, r6
    35a8:	4604      	mov	r4, r0
    35aa:	4628      	mov	r0, r5
    35ac:	f7ff ffeb 	bl	3586 <k_sys_fatal_error_handler>
	__asm__ volatile(
    35b0:	f387 8811 	msr	BASEPRI, r7
    35b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    35b8:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    35ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    35be:	f7fd be0b 	b.w	11d8 <z_impl_k_thread_abort>

000035c2 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    35c2:	f7ff be0f 	b.w	31e4 <z_clock_idle_exit>

000035c6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    35c6:	4603      	mov	r3, r0
    35c8:	b920      	cbnz	r0, 35d4 <z_reschedule_irqlock+0xe>
    35ca:	f3ef 8205 	mrs	r2, IPSR
    35ce:	b90a      	cbnz	r2, 35d4 <z_reschedule_irqlock+0xe>
    35d0:	f7fd bbec 	b.w	dac <arch_swap>
    35d4:	f383 8811 	msr	BASEPRI, r3
    35d8:	f3bf 8f6f 	isb	sy
}
    35dc:	4770      	bx	lr

000035de <z_reschedule_unlocked>:
	__asm__ volatile(
    35de:	f04f 0320 	mov.w	r3, #32
    35e2:	f3ef 8011 	mrs	r0, BASEPRI
    35e6:	f383 8811 	msr	BASEPRI, r3
    35ea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    35ee:	f7ff bfea 	b.w	35c6 <z_reschedule_irqlock>

000035f2 <z_priq_dumb_best>:
{
    35f2:	4603      	mov	r3, r0
	return list->head == list;
    35f4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    35f6:	4283      	cmp	r3, r0
    35f8:	d003      	beq.n	3602 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    35fa:	2800      	cmp	r0, #0
    35fc:	bf38      	it	cc
    35fe:	2000      	movcc	r0, #0
    3600:	4770      	bx	lr
	struct k_thread *thread = NULL;
    3602:	2000      	movs	r0, #0
}
    3604:	4770      	bx	lr

00003606 <z_ready_thread>:
{
    3606:	b510      	push	{r4, lr}
    3608:	f04f 0320 	mov.w	r3, #32
    360c:	f3ef 8411 	mrs	r4, BASEPRI
    3610:	f383 8811 	msr	BASEPRI, r3
    3614:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    3618:	f7fe fee8 	bl	23ec <ready_thread>
	__asm__ volatile(
    361c:	f384 8811 	msr	BASEPRI, r4
    3620:	f3bf 8f6f 	isb	sy
}
    3624:	bd10      	pop	{r4, pc}

00003626 <z_thread_timeout>:
{
    3626:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    3628:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    362c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    362e:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    3632:	b1c3      	cbz	r3, 3666 <z_thread_timeout+0x40>
	__asm__ volatile(
    3634:	f04f 0320 	mov.w	r3, #32
    3638:	f3ef 8511 	mrs	r5, BASEPRI
    363c:	f383 8811 	msr	BASEPRI, r3
    3640:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3644:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3648:	f7fe fe7a 	bl	2340 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    364c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3650:	f023 0302 	bic.w	r3, r3, #2
    3654:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    3658:	2300      	movs	r3, #0
    365a:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    365e:	f385 8811 	msr	BASEPRI, r5
    3662:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3666:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    366a:	f023 0314 	bic.w	r3, r3, #20
    366e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    3672:	4608      	mov	r0, r1
}
    3674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    3678:	f7ff bfc5 	b.w	3606 <z_ready_thread>

0000367c <z_remove_thread_from_ready_q>:
{
    367c:	b510      	push	{r4, lr}
	__asm__ volatile(
    367e:	f04f 0320 	mov.w	r3, #32
    3682:	f3ef 8411 	mrs	r4, BASEPRI
    3686:	f383 8811 	msr	BASEPRI, r3
    368a:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    368e:	f7ff f80b 	bl	26a8 <unready_thread>
	__asm__ volatile(
    3692:	f384 8811 	msr	BASEPRI, r4
    3696:	f3bf 8f6f 	isb	sy
}
    369a:	bd10      	pop	{r4, pc}

0000369c <add_to_waitq_locked>:
{
    369c:	b538      	push	{r3, r4, r5, lr}
    369e:	4604      	mov	r4, r0
    36a0:	460d      	mov	r5, r1
	unready_thread(thread);
    36a2:	f7ff f801 	bl	26a8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    36a6:	7b63      	ldrb	r3, [r4, #13]
    36a8:	f043 0302 	orr.w	r3, r3, #2
    36ac:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    36ae:	b1c5      	cbz	r5, 36e2 <add_to_waitq_locked+0x46>
	return list->head == list;
    36b0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    36b2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    36b4:	429d      	cmp	r5, r3
    36b6:	bf08      	it	eq
    36b8:	2300      	moveq	r3, #0
    36ba:	2b00      	cmp	r3, #0
    36bc:	bf38      	it	cc
    36be:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    36c0:	b183      	cbz	r3, 36e4 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    36c2:	f994 100e 	ldrsb.w	r1, [r4, #14]
    36c6:	f993 200e 	ldrsb.w	r2, [r3, #14]
    36ca:	4291      	cmp	r1, r2
    36cc:	db04      	blt.n	36d8 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    36ce:	686a      	ldr	r2, [r5, #4]
    36d0:	429a      	cmp	r2, r3
    36d2:	d007      	beq.n	36e4 <add_to_waitq_locked+0x48>
    36d4:	681b      	ldr	r3, [r3, #0]
    36d6:	e7f3      	b.n	36c0 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    36d8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    36da:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    36de:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    36e0:	605c      	str	r4, [r3, #4]
}
    36e2:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    36e4:	686b      	ldr	r3, [r5, #4]
    36e6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    36e8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    36ea:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    36ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
    36ee:	606c      	str	r4, [r5, #4]
    36f0:	e7f7      	b.n	36e2 <add_to_waitq_locked+0x46>

000036f2 <z_unpend_first_thread>:
{
    36f2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    36f4:	f04f 0320 	mov.w	r3, #32
    36f8:	f3ef 8211 	mrs	r2, BASEPRI
    36fc:	f383 8811 	msr	BASEPRI, r3
    3700:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3704:	f7ff ff75 	bl	35f2 <z_priq_dumb_best>
    3708:	4604      	mov	r4, r0
	__asm__ volatile(
    370a:	f382 8811 	msr	BASEPRI, r2
    370e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3712:	b1c8      	cbz	r0, 3748 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3714:	f04f 0320 	mov.w	r3, #32
    3718:	f3ef 8511 	mrs	r5, BASEPRI
    371c:	f383 8811 	msr	BASEPRI, r3
    3720:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3724:	4601      	mov	r1, r0
    3726:	6880      	ldr	r0, [r0, #8]
    3728:	f7fe fe0a 	bl	2340 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    372c:	7b63      	ldrb	r3, [r4, #13]
    372e:	f023 0302 	bic.w	r3, r3, #2
    3732:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    3734:	2300      	movs	r3, #0
    3736:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    3738:	f385 8811 	msr	BASEPRI, r5
    373c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    3740:	f104 0018 	add.w	r0, r4, #24
    3744:	f000 f80a 	bl	375c <z_abort_timeout>
}
    3748:	4620      	mov	r0, r4
    374a:	bd38      	pop	{r3, r4, r5, pc}

0000374c <k_is_in_isr>:
    374c:	f3ef 8005 	mrs	r0, IPSR
}
    3750:	3800      	subs	r0, #0
    3752:	bf18      	it	ne
    3754:	2001      	movne	r0, #1
    3756:	4770      	bx	lr

00003758 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    3758:	f7fd be2e 	b.w	13b8 <arch_busy_wait>

0000375c <z_abort_timeout>:
{
    375c:	b510      	push	{r4, lr}
	__asm__ volatile(
    375e:	f04f 0220 	mov.w	r2, #32
    3762:	f3ef 8411 	mrs	r4, BASEPRI
    3766:	f382 8811 	msr	BASEPRI, r2
    376a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    376e:	6803      	ldr	r3, [r0, #0]
    3770:	b13b      	cbz	r3, 3782 <z_abort_timeout+0x26>
			remove_timeout(to);
    3772:	f7ff f97d 	bl	2a70 <remove_timeout>
			ret = 0;
    3776:	2000      	movs	r0, #0
	__asm__ volatile(
    3778:	f384 8811 	msr	BASEPRI, r4
    377c:	f3bf 8f6f 	isb	sy
}
    3780:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3782:	f06f 0015 	mvn.w	r0, #21
    3786:	e7f7      	b.n	3778 <z_abort_timeout+0x1c>

00003788 <z_get_next_timeout_expiry>:
{
    3788:	b510      	push	{r4, lr}
	__asm__ volatile(
    378a:	f04f 0320 	mov.w	r3, #32
    378e:	f3ef 8411 	mrs	r4, BASEPRI
    3792:	f383 8811 	msr	BASEPRI, r3
    3796:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    379a:	f7ff f983 	bl	2aa4 <next_timeout>
	__asm__ volatile(
    379e:	f384 8811 	msr	BASEPRI, r4
    37a2:	f3bf 8f6f 	isb	sy
}
    37a6:	bd10      	pop	{r4, pc}

000037a8 <z_set_timeout_expiry>:
{
    37a8:	b570      	push	{r4, r5, r6, lr}
    37aa:	4604      	mov	r4, r0
    37ac:	460d      	mov	r5, r1
	__asm__ volatile(
    37ae:	f04f 0320 	mov.w	r3, #32
    37b2:	f3ef 8611 	mrs	r6, BASEPRI
    37b6:	f383 8811 	msr	BASEPRI, r3
    37ba:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    37be:	f7ff f971 	bl	2aa4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    37c2:	2801      	cmp	r0, #1
    37c4:	dd05      	ble.n	37d2 <z_set_timeout_expiry+0x2a>
    37c6:	42a0      	cmp	r0, r4
    37c8:	dd03      	ble.n	37d2 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    37ca:	4629      	mov	r1, r5
    37cc:	4620      	mov	r0, r4
    37ce:	f7fd fa41 	bl	c54 <z_clock_set_timeout>
	__asm__ volatile(
    37d2:	f386 8811 	msr	BASEPRI, r6
    37d6:	f3bf 8f6f 	isb	sy
}
    37da:	bd70      	pop	{r4, r5, r6, pc}

000037dc <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    37dc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    37de:	f7ff fa71 	bl	2cc4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    37e2:	bd08      	pop	{r3, pc}

000037e4 <k_heap_init>:
{
    37e4:	b410      	push	{r4}
    37e6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    37ea:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    37ee:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    37f0:	f7ff bc00 	b.w	2ff4 <sys_heap_init>

000037f4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    37f4:	4770      	bx	lr
